-- ==================================================== --
-- ===  Code automatically generated by IDL to Ada  === --
-- ===  compiler OrbAda-idl2ada                     === --
-- ===  Copyright Top Graph'X  1997                 === --
-- ==================================================== --

with Corba.Orb ;
with Corba.Type_Codes ;
with Corba_Ios ;
with Corba.Iop ;
with Corba.Object.Ref_To_Any_Conversion ;
with Corba ;
pragma Elaborate (Corba) ;
pragma Elaborate (Corba.Type_Codes) ;
package body Vehicle is

   Tc_Vehicle : constant Corba.Typecode.Object :=
      Corba.Typecode.Object_Typecode
         ( Id => Vehicle_R_Id, 
           Name => Corba.To_Unbounded_String( "Vehicle"));


   function To_Vehicle (Self : Corba.Object.Ref'class) return Ref'class is
      This : Ref ;
   begin
      Corba.Object.Ref (This) := Corba.Object.Ref (Self) ;
      return This ;
   end To_Vehicle;

   function mark_Of
      (Self : in Ref) return Corba.String is
      Tgx_Stream  : aliased Corba_Ios.Iop_Stream_Type;
      Tgx_Request : Corba.Iop.Request_Id;
      Tgx_Orb     : Corba.Orb.Object := Corba.Orb.Get (Self);
      Tgx_Result  : Corba.String;
      pragma Suppress (Range_Check) ;
   begin
      Corba.Orb.Write_Request
         ( Self              => Self,
           Response_Expected => True,
           Operation         => "_get_mark",
           Stream            => Tgx_Stream'access) ;

      -- Write arguments
      -- None

      -- Send message to the ORB and get the reply (if any)
      Corba.Orb.Client_Send_And_Receive ( Self    => Tgx_Orb,
                                          Request => Tgx_Request,
                                          Stream  => Tgx_Stream'access);
      -- Get the result
      Corba.String'Read (Tgx_Stream'access, Tgx_Result);
      return Tgx_Result;
   end mark_Of;

   procedure Set_mark
      (Self : in out Ref;
       To : in Corba.String) is
      Tgx_Stream  : aliased Corba_Ios.Iop_Stream_Type;
      Tgx_Request : Corba.Iop.Request_Id;
      Tgx_Orb     : Corba.Orb.Object := Corba.Orb.Get (Self);
   begin
      Corba.Orb.Write_Request
         ( Self              => Self,
           Response_Expected => False,
           Operation         => "_set_mark",
           Stream            => Tgx_Stream'access) ;

      -- Write arguments
      Corba.String'Write (Tgx_Stream'access, To);
      
      -- Send message to the ORB (will not wait for reply)
      Corba.Orb.Client_Send_And_Receive ( Self    => Tgx_Orb,
                                          Request => Tgx_Request,
                                          Stream  => Tgx_Stream'access);
   end Set_mark;

   function can_drive
      ( Self : in Ref;
        age : in Corba.Unsigned_Short)
         return Corba.Boolean is
      Tgx_Stream  : aliased Corba_Ios.Iop_Stream_Type;
      Tgx_Request : Corba.Iop.Request_Id;
      Tgx_Orb     : Corba.Orb.Object := Corba.Orb.Get (Self);
      Tgx_Result  : Corba.Boolean;

      pragma Suppress (Range_Check) ;
   begin
      Corba.Orb.Write_Request
         ( Self              => Self,
           Response_Expected => True,
           Operation         => "can_drive",
           Stream            => Tgx_Stream'access) ;

      -- Write in and inout parameters
      Corba.Unsigned_Short'Write (Tgx_Stream'access, age);

      -- Send message to the ORB (wait for reply if required)
      Corba.Orb.Client_Send_And_Receive ( Self    => Tgx_Orb,
                                          Request => Tgx_Request,
                                          Stream  => Tgx_Stream'access);
      -- Get the result
      Corba.Boolean'Read (Tgx_Stream'access, Tgx_Result);
      return Tgx_Result;

      -- Get the out and inout parameters
      -- None
   end can_drive;

   package Vehicle_To_Any is new Corba.Object.Ref_To_Any_Conversion
      (Ref => Ref, Code => Tc_Vehicle) ;

   function To_Any (From : in Ref) return Corba.Any renames
      Vehicle_To_Any.Ref_To_Any ;

   function To_Ref (From : in Corba.Any) return Ref renames
      Vehicle_To_Any.Any_To_Ref ;
end Vehicle;

