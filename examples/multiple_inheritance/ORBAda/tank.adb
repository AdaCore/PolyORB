-- ==================================================== --
-- ===  Code automatically generated by IDL to Ada  === --
-- ===  compiler OrbAda-idl2ada                     === --
-- ===  Copyright Top Graph'X  1997                 === --
-- ==================================================== --

with Corba.Orb ;
with Corba.Type_Codes ;
with Corba_Ios ;
with Corba.Iop ;
with Corba.Object.Ref_To_Any_Conversion ;
with Corba ;
pragma Elaborate (Corba) ;
pragma Elaborate (Corba.Type_Codes) ;
package body tank is

   Tc_tank : constant Corba.Typecode.Object :=
      Corba.Typecode.Object_Typecode
         ( Id => tank_R_Id, 
           Name => Corba.To_Unbounded_String( "tank"));


   function To_tank (Self : Corba.Object.Ref'class) return Ref'class is
      This : Ref ;
   begin
      Corba.Object.Ref (This) := Corba.Object.Ref (Self) ;
      return This ;
   end To_tank;

   function To_Weapon (Self : in Ref) return Weapon.Ref'class is
      This : Weapon.Ref ;
   begin
      Corba.Object.Ref (This) := Corba.Object.Ref (Self) ;
      return This ;
   end To_Weapon;

   procedure shoot
      ( Self : in Ref) is
      Tgx_Stream  : aliased Corba_Ios.Iop_Stream_Type;
      Tgx_Request : Corba.Iop.Request_Id;
      Tgx_Orb     : Corba.Orb.Object := Corba.Orb.Get (Self);

      pragma Suppress (Range_Check) ;
   begin
      Corba.Orb.Write_Request
         ( Self              => Self,
           Response_Expected => True,
           Operation         => "shoot",
           Stream            => Tgx_Stream'access) ;

      -- Write in and inout parameters
      -- None

      -- Send message to the ORB (wait for reply if required)
      Corba.Orb.Client_Send_And_Receive ( Self    => Tgx_Orb,
                                          Request => Tgx_Request,
                                          Stream  => Tgx_Stream'access);
      -- Void result

      -- Get the out and inout parameters
      -- None
   end shoot;

   package tank_To_Any is new Corba.Object.Ref_To_Any_Conversion
      (Ref => Ref, Code => Tc_tank) ;

   function To_Any (From : in Ref) return Corba.Any renames
      tank_To_Any.Ref_To_Any ;

   function To_Ref (From : in Corba.Any) return Ref renames
      tank_To_Any.Any_To_Ref ;
end tank;

