-- ==================================================== --
-- ===  Code automatically generated by IDL to Ada  === --
-- ===  compiler OrbAda-idl2ada                     === --
-- ===  Copyright Top Graph'X  1997                 === --
-- ==================================================== --
with Corba.Orb ;
with Corba_Ios ;
with Corba.Repository ;
with Corba.Interface_Repository ;
with Corba.Iop ;
package body Chicken.Impl is
      type Tgx_Operation_Type is
       ( lay) ;

      procedure Skeleton ( Self        : in Corba.Boa.Object ;
                           Tgx_Object  : in Corba.Boa.Object_Impl_Access ;
                           Tgx_Request : in Corba.Iop.Request_Header ;
                           Tgx_Stream  : access Corba_Ios.Iop_Stream_Type ) ;

      procedure Initialize (Oa : in Corba.Boa.Object) is
         Ir      : Corba.Repository.Ref ;
         The_Orb : Corba.Orb.Object := Corba.Boa.Orb_Id (Oa) ;
      begin
         Tgx_Oa := Oa ;
         Corba.Object.Ref (Ir) := Corba.Orb.Resolve_Initial_References
            (The_Orb, Corba.Interface_Repository.Tgx_Service_Name) ;
         Corba.Object.Ref (Tgx_Interface) := Corba.Object.Ref
            (Corba.Repository.Lookup_Id (Ir, Chicken_R_Id)) ;
         Tgx_Implementation := Corba.Boa.Create
            ( Self        => Oa,
              Name        => Tgx_Service_Name,
              Interface   => Tgx_Interface,
              Activation  => Corba.Shared_Server,
              Impl_Server => Corba.Boa.Service_Path_Name,
              Type_Id     => Chicken_R_Id,
              D_I_R       => null,
              Skeleton    => Skeleton'access) ;

         Corba.Boa.Impl_Is_Ready (Self => Oa, Impl => Tgx_Implementation) ;
      end Initialize ;

      procedure Skeleton ( Self        : in Corba.Boa.Object ;
                           Tgx_Object  : in Corba.Boa.Object_Impl_Access ;
                           Tgx_Request : in Corba.Iop.Request_Header ;
                           Tgx_Stream  : access Corba_Ios.Iop_Stream_Type ) is
         Tgx_Op_Name   : constant Standard.String := Corba.Iop.To_String
            (Tgx_Request.Operation) ;
         Tgx_Operation : Tgx_Operation_Type ;
         Tgx_Obj       : Object_Ptr ;
         Tgx_Orb       : Corba.Orb.Object := Corba.Boa.Orb_Id (Self) ;
         pragma Suppress (Range_Check) ;
      begin
         Tgx_Obj := Object_Ptr (Tgx_Object) ;
         if Tgx_Op_Name (Tgx_Op_Name'first) = '_'
         then
            Tgx_Operation := Tgx_Operation_Type'value ("Tgx" & Tgx_Op_Name) ;
         else
            Tgx_Operation := Tgx_Operation_Type'value (Tgx_Op_Name) ;
         end if ;
         case Tgx_Operation is

         when lay =>
            -- Declare required temporary variables
            declare
               Tgx_Result : chicken_egg_IDL_File.Egg_Forward.Ref ;
            begin
               -- Get params
               -- None

               -- Call operation
               Tgx_Result := lay
                  ( Self => Tgx_Obj) ;

               -- Check if the client needs the result
               if not Tgx_Request.Response_Expected
               then
                  return ;
               end if ;
               -- Build the reply
               Corba.Orb.Write_Reply
                  ( Stream    => Tgx_Stream,
                    Id        => Tgx_Request.Id,
                    Status    => Corba.Iop.No_Exception) ;

               -- Put the result
               chicken_egg_IDL_File.Egg_Forward.Ref'Write (Tgx_Stream,
                  Tgx_Result) ;

               -- Write the out and inout parameters
               -- None

               -- Send message to the client via the ORB
               Corba.Boa.Service_Send ( Self   => Self,
                                        Stream => Tgx_Stream ) ;
            end ;
         end case ;

      -- Handle exceptions
      exception
      when Tgx_Erroneous_Request : others =>
         Corba.Boa.Send_Exception_Reply ( Self => Self,
                                          Id   => Tgx_Request.Id,
                                          X    => Tgx_Erroneous_Request) ;
      end Skeleton ;

      function lay
         ( Self : access Object)
         return chicken_egg_IDL_File.Egg_Forward.Ref is separate ;
   --[Separate body is to be filled by the service implementor]
   end Chicken.Impl;

