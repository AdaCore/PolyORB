Here are the main points to fit in the AdaBroker project in
order of increasing importance (in terms of work) :

- omniowproxycalldesc are not used, we always use omniproxycalldesc.
  The generated code compiles with warnings. But it works !


- The naming service example does not use contexts.
  It could be interessant to add them. You will maybe
  find some bug to correct...

- A type Exception_ID is defined in constants.ads for all repoIDs
  of exceptions. This is meaningless. Either one must extend this type
  to all repoIds or it must be removed.

- Some local variables are used in the generated code and as a
  consequence, the names of these variables are forbidden in the
  Idl files. But there is no security. A good way to correct this
  lack could be to make all these names begin with AdaBroker_ or
  something like that.

- The overloading of subprograms is forbidden in Idl but the Sun's
  frontend does not make any verification of that. AdaBroker neither
  does verifications but generates bad code. One must implement these
  verifications.

- In the interfacing of C functions in Ada, AdaBroker uses the type
  Interfaces.C.Strings.Chars_Ptr. The objects of this type need to be
  deallocated. They are but it could be better to use the type
  Interfaces.C.Strings.Char_array which do not need any deallocation.

- In the object hierarchy under Corba.Object.Ref, each type has an
  associated pointer type and an associated free function in order to
  deallocate the pointers. Ada provides the possibility to define a
  general pointer type on Corba.Object.Ref'Class and the associated
  free method that can then free all objects of the hierarchy.
  One must see if it possible to use this possibility in order to
  avoid the definition of the pointer type and the free method for
  each idl object translated in Ada.

- AdaBroker does not accept the bounded_string type. All strings defined
  in Idl files are mapped to unbounded strings.

- In several places in the AdaBroker code, exceptions are catched. Every
  times, the syntax is : when E : *type* => ... even if E is useless.
  The useless Es can be removed.

- A user can define constants in the Idl code. These are not mapped as
  constants into AdaBroker generated code but replaced every time they
  are used by their value. It would be better to map them as constants
  in the generated Ada code.

- In the invoke method of file omniproxycallwrapper, the result of a call
  to receive_reply can be No_Exception, User_Exception, System_Exception
  or Location_Forward. This last case was never used and never tested.
  An example must so be done for testing it.

- AdaBroker is not thread safe at the moment, even if the code to make it
  thread safe is written. Thre are two files to change : corba-exceptions.adb
  and corba-object.adb. In first case, the protected type Member_List must be
  added, in the second, it is the type Pd_List. Actually, they were added and
  the corresponding code is present in both files in comment. The problem is
  that protected declarations seems to be incompatible with AdaBroker for
  an unknown reason. One must find this reason and correct it.
  (probably library link)

- There are some memory allocations in AdaBroker but no one throws an
  exception in case of memory lack. In fact, the server may crash in such a
  case. A Corba.No_Memory exception must be thrown in such a case.

- There is a memory leak we could not fix in procyObjectFactory_C2Ada.cc
  See comments in this file.

- The generated code for align_size functions is not fully optimized. Some
  objects of fixed size are not globaly aligned. for example, the unions are
  always considered as objects with non fixed size. and then not globaly aligned.
  This point could be improved.

- AdaBroker declares for each operation in the Idl code a corresponding
  omniproxycalldesc object. This object is actually not linked with the function
  but with its signature. Therefore, the number of omniproxycalldesc objects
  present in the generated code could be reduced by declaring one object per
  signature and not one per method.

- The interfacing of C++ and Ada is done in AdaBroker by the use of pragmas like
  import (CPP,...) which are Gnat specific. Moreover, the importation names of
  the C++ functions are egcs specific. It would be better to make AdaBroker
  independant of egcs into using import (C,...) and "extern C" declarations in
  the C code.

- And the last but not least, there is no dynamic library in AdaBroker. So no
  Any type and no Typecode.


ENST 1999
Fabien Azavant, Sebastien Ponce,
Vincent Niebel, Laurent Kubler, Jean-Marie Cottin


