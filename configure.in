#
# $Id$
#
AC_INIT([Dist/xe.ads])
AM_CONFIG_HEADER([Garlic/config.h])
AC_CONFIG_AUX_DIR(support)
#
# Package description
#
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE
#
# Various programs
#
AC_CHECK_PROGS(AWK, [gnuawk gawk awk])
AC_PROG_CC
AM_PROG_WORKING_ADA
AM_CROSS_PROG_WORKING_ADA
AM_EXEEXT
AC_PROG_RANLIB
AC_CHECK_PROGS(SED, [gnused gsed sed])
AC_CHECK_PROGS(TAR, [gtar tar])
AC_CHECK_PROG(UNZIP, gunzip, gunzip)
AC_CHECK_PROG(GNATMAKE, gnatmake, gnatmake)
#
# Check for maintainer mode
#
AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging options],
[GNATFLAGS="-g -O2 -Wall -gnata -gnatwu -gnatwe -gnatx2"],
[GNATFLAGS="-O2 -gnatpn"])
AC_SUBST(GNATFLAGS)
#
# Include or not launching facilities
#
AC_ARG_WITH(launching,
[  --without-launching     Don't include launching facilities],
[
  AC_MSG_CHECKING([launching facilities])
  case ${withval} in
  yes)
     LAUNCHINGSOURCES="\$(LAUNCHINGSOURCES)";
     LAUNCHINGOBJECTS="\$(LAUNCHINGOBJECTS)";
     LAUNCHING_INCLUDED="";
     AC_MSG_RESULT([yes]);;
  *)
     LAUNCHINGSOURCES="";
     LAUNCHINGOBJECTS="";
     LAUNCHING_INCLUDED="--  ";
     AC_MSG_RESULT([no]);;
  esac;
],
[
AC_MSG_CHECKING([launching facilities])
LAUNCHINGSOURCES="\$(LAUNCHINGSOURCES)";
LAUNCHINGOBJECTS="\$(LAUNCHINGOBJECTS)";
LAUNCHING_INCLUDED="";
AC_MSG_RESULT([yes])
])
AC_SUBST(LAUNCHINGSOURCES)
AC_SUBST(LAUNCHINGOBJECTS)
AC_SUBST(LAUNCHING_INCLUDED)
#
# Find GNAT sources
#
AC_GNAT_SOURCE
#
# Check that the GNAT version is recent enough for this version of GLADE
#
AM_ADA_PREREQ(980208, 3.11w)
#
# Platform specific
#
AC_MSG_CHECKING(which platform-specific variant to use)
AC_ARG_WITH(platform,
 [  --with-platform=letter  Select another platform's specific files (debug)],
 [PLATFORM_SPECIFIC="${withval}"],
[case "${target}" in
  sparc-sun-solaris2*) PLATFORM_SPECIFIC=s;;
  sparc-sun-sunos4*)   PLATFORM_SPECIFIC=u;;
  i?86-*-solaris2*)    PLATFORM_SPECIFIC=s;;  
  *-linux*)            PLATFORM_SPECIFIC=l;;
  *-opennt*)           PLATFORM_SPECIFIC=p;;
  alpha-*-osf*)        PLATFORM_SPECIFIC=a;;
  i?86-*-cygwin32*)    PLATFORM_SPECIFIC=w;;
  mips-sgi-irix*)      PLATFORM_SPECIFIC=g;;
  mips-sni-sysv4*)     PLATFORM_SPECIFIC=x;;
  hppa*-hp-hpux*)      PLATFORM_SPECIFIC=h;;
  *-*-rtems*)          PLATFORM_SPECIFIC=r;;
  *)                   ]AC_MSG_ERROR([Unsupported platform "${target}"])[;;
esac])
AC_SUBST(PLATFORM_SPECIFIC)
[case "${PLATFORM_SPECIFIC}" in
   s) PSNAME="Solaris";;
   u) PSNAME="SunOS";;
   a) PSNAME="OSF";;
   l) PSNAME="Linux";;
   p) PSNAME="Open NT";;
   w) PSNAME="Windows NT";;
   g) PSNAME="SGI";;
   x) PSNAME="SNI";;
   h) PSNAME="HP";;
   e) PSNAME="Empty";;
   r) PSNAME="RTEMS";;
   *) PSNAME="Unknown (${PLATFORM_SPECIFIC})";;
esac]
AC_MSG_RESULT($PSNAME)
AC_MSG_CHECKING(preserve the original file properties with)
AC_SUBST(CP_PRESERVE)
[case "${PLATFORM_SPECIFIC}" in
   w) CP_PRESERVE="-lf";;
   *) CP_PRESERVE="-p";;
esac]
AC_MSG_RESULT($CP_PRESERVE)
#
# Local launcher. Linux does not support local launching of programs with
# LinuxThreads. This crashes the machine.
#
AC_MSG_CHECKING(if platform supports local launching)
case "${target}" in
  *-linux*)	SUPPORTS_LOCAL_LAUNCH=False; AC_MSG_RESULT(no);;
  *)            SUPPORTS_LOCAL_LAUNCH=True; AC_MSG_RESULT(yes);;
esac
AC_SUBST(SUPPORTS_LOCAL_LAUNCH)
#
# Remote shell
#
AC_MSG_CHECKING(which remote shell to use)
AC_ARG_WITH(remsh,
 [  --with-remsh=command    Select a remote shell command],
 [RSH="${withval}"],
 [case "${target}" in
   hppa*-hp-hpux*)      RSH=remsh;;
   *)                   RSH=rsh;;
  esac])
AC_SUBST(RSH)
AC_MSG_RESULT($RSH)
#
# Filter list
#
AC_ARG_WITH(filters,
[  --with-filters=list     Enumerate filter list (default=none+zip)],
[
  FILTERLIST="${withval}";
],
[
  FILTERLIST="zip"
])
AC_MSG_CHECKING([default filters])
[
if test -d Garlic; then
  :
else
  mkdir Garlic
fi
FILTERFILE=Garlic/Makefile.fil;
rm -f ${FILTERFILE}
for F in ${FILTERLIST}; do
  if test -f ${srcdir}/Garlic/Makefile.${F}; then
    cat ${srcdir}/Garlic/Makefile.${F} >>${FILTERFILE}
    echo "" >>${FILTERFILE}
  else
    ]AC_MSG_ERROR([unknown filter ${F}])[
  fi;
done
]
AC_MSG_RESULT([${FILTERLIST}])
AC_SUBST_FILE(FILTERFILE)
#
# Protocol list
#
AC_ARG_WITH(protocols,
[  --with-protocols=list   Enumerate protocol list],
[
  AC_MSG_CHECKING([default protocols])
  LIST="";
  PROTOCOLSSOURCES="";
  PROTOCOLSOBJECTS="";
  TCP_INCLUDED="--  ";
  for P in ${withval}; do
     case ${P} in
     TCP|tcp) 
        LIST="${LIST} tcp";
        PROTOCOLSSOURCES="${PROTOCOLSSOURCES} \$(TCPSOURCES)";
        PROTOCOLSOBJECTS="${PROTOCOLSOBJECTS} \$(TCPOBJECTS)";
        TCP_INCLUDED="";;
     no)
        LIST="none";
        ;;
      *) 
        AC_MSG_ERROR([unknown protocol ${P}])
        ;;
      esac;
  done
  AC_MSG_RESULT([${LIST}])
],
[
AC_MSG_CHECKING([default protocols])
PROTOCOLSSOURCES="\$(TCPSOURCES)";
PROTOCOLSOBJECTS="\$(TCPOBJECTS)";
TCP_INCLUDED=""
AC_MSG_RESULT([tcp])
])
if test "$TCP_INCLUDED" = ""; then
  AC_MSG_CHECKING([thread-blocking I/O])
    if grep Non_Blocking $srcdir/Garlic/5${PLATFORM_SPECIFIC}gtplsp.ads \
      > /dev/null 2>&1; then
	AC_MSG_RESULT([no])
	PROTOCOLSSOURCES="${PROTOCOLSSOURCES} \$(NOBLTCPSOURCES)"
	PROTOCOLSOBJECTS="${PROTOCOLSOBJECTS} \$(NOBLTCPOBJECTS)"
    else
	AC_MSG_RESULT([yes])
    fi
fi
AC_SUBST(PROTOCOLSSOURCES)
AC_SUBST(PROTOCOLSOBJECTS)
AC_SUBST(TCP_INCLUDED)
#
# Checking whether s-gtplsp.adb exists for this platform
#
case ${PLATFORM_SPECIFIC} in
  w) TCP_PLATFORM_SOURCE=s-gtplsp.adb;;
  *) TCP_PLATFORM_SOURCE=s-gtplsp.ads;;
esac
AC_SUBST(TCP_PLATFORM_SOURCE)
#
# Extra libraries
#
AC_ARG_WITH(extra-libs,
 [  --with-extra-libs=libs  Add extra libraries when building a program],
 [EXTRA_LIBS="${withval}"])
AC_SUBST(EXTRA_LIBS)
#
# Header files, only when not cross-compiling
#
if test $target = $host; then
AC_CHECK_HEADERS([stdio.h sys/types.h sys/socket.h errno.h netdb.h])
AC_CHECK_HEADERS([netinet/in.h signal.h fcntl.h termio.h termios.h sys/file.h])
AC_CHECK_HEADERS([sys/ioctl.h netinet/tcp.h sys/systeminfo.h poll.h stropts.h])
AC_CHECK_HEADERS([sys/conf.h])
fi
#
# Output
#
AC_OUTPUT([Makefile
           Dist/Makefile
           Garlic/Makefile Garlic/s-gaplsp.ads
           Garlic/s-gaprco.adb Garlic/s-garser.adb
           Examples/check-config
           Examples/Makefile
           Examples/Bank/Makefile
           Examples/Eratho/Makefile
           Examples/Eratho/absolute/Makefile
           Examples/Eratho/cycle/Makefile
           Examples/Eratho/dynamic/Makefile
           Examples/Eratho/spiral/Makefile
           Examples/Messages/Makefile
           Examples/LightBank/Makefile])
