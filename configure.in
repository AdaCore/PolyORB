#
# $Id$
#
AC_INIT([Dist/xe.ads])
#
# Package description
#
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE
#
# Various programs
#
AC_CHECK_PROGS(AWK, [gnuawk gawk awk])
AC_PROG_CC
AM_CYGWIN32
AC_PROG_RANLIB
AC_CHECK_PROGS(SED, [gnused gsed sed])
AC_CHECK_PROGS(TAR, [gtar tar])
AC_CHECK_PROGS(UNZIP, [gunzip])
#
# Check for maintainer mode
#
AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging options],
[GNATFLAGS="-g -gnata -gnato"],
[GNATFLAGS="-O2 -gnatn"])
AC_SUBST(GNATFLAGS)
#
# Include or not launching facilities
#
AC_ARG_WITH(launching,
[  --without-launching     Don't include launching facilities],
[
  AC_MSG_CHECKING([launching facilities])
  case ${withval} in
  yes)
     LAUNCHINGSOURCES="\$(LAUNCHINGSOURCES)";
     LAUNCHINGOBJECTS="\$(LAUNCHINGOBJECTS)";
     LAUNCHING_INCLUDED="";
     AC_MSG_RESULT([yes]);;
  *)
     LAUNCHINGSOURCES="";
     LAUNCHINGOBJECTS="";
     LAUNCHING_INCLUDED="--  ";
     AC_MSG_RESULT([no]);;
  esac;
],
[
AC_MSG_CHECKING([launching facilities])
LAUNCHINGSOURCES="\$(LAUNCHINGSOURCES)";
LAUNCHINGOBJECTS="\$(LAUNCHINGOBJECTS)";
LAUNCHING_INCLUDED="";
AC_MSG_RESULT([yes])
])
AC_SUBST(LAUNCHINGSOURCES)
AC_SUBST(LAUNCHINGOBJECTS)
AC_SUBST(LAUNCHING_INCLUDED)
#
# Find GNAT sources
#
AC_DEFUN([AC_GNAT_SOURCE],
[
  AC_MSG_CHECKING([for GNAT sources])
  if test -f gnat/osint.ads; then
    GNAT_SOURCE=../gnat
    AC_MSG_RESULT(gnat)
  elif test -f ada/osint.ads; then
    GNAT_SOURCE=../ada
    AC_MSG_RESULT(ada)
  elif test -f $srcdir/gnat/osint.ads; then
    GNAT_SOURCE=[\${top_srcdir}/gnat]
    AC_MSG_RESULT($srcdir/gnat)
  elif test -f $srcdir/ada/osint.ads; then
    GNAT_SOURCE=[\${top_srcdir}/ada]
    AC_MSG_RESULT($srcdir/ada)
  else
    AC_MSG_ERROR([no sources found])
  fi
  AC_SUBST(GNAT_SOURCE)
])
AC_GNAT_SOURCE
#
# Platform specific
#
AC_MSG_CHECKING(which platform-specific variant to use)
AC_ARG_WITH(platform,
 [  --with-platform=letter  Select another platform's specific files (debug)],
 [PLATFORM_SPECIFIC="${withval}"],
[case "${target}" in
  sparc-sun-solaris2*) PLATFORM_SPECIFIC=s;;
  sparc-sun-sunos4*)   PLATFORM_SPECIFIC=u;;
  i?86-*-linux*)       PLATFORM_SPECIFIC=a;;
  i?86-*-cygwin32)     PLATFORM_SPECIFIC=w;;
  mips-sgi-irix*)      PLATFORM_SPECIFIC=g;;
  mips-sni-sysv4)      PLATFORM_SPECIFIC=x;;
  hppa*-hp-hpux*)      PLATFORM_SPECIFIC=h;;
  *)                   ]AC_MSG_ERROR([Unsupported platform "${target}"])[;;
esac])
AC_SUBST(PLATFORM_SPECIFIC)
[case "${PLATFORM_SPECIFIC}" in
   s) PSNAME="Solaris";;
   u) PSNAME="SunOS";;
   a) PSNAME="Linux";;
   w) PSNAME="Windows NT";;
   g) PSNAME="SGI";;
   x) PSNAME="SNI";;
   h) PSNAME="HP";;
   e) PSNAME="Empty";;
   *) PSNAME="Unknown (${PLATFORM_SPECIFIC})";;
esac]
AC_MSG_RESULT($PSNAME)
#
# Platform specific
#
AC_MSG_CHECKING(which remote shell to use)
AC_ARG_WITH(remsh,
 [  --with-remsh=command    Select a remote shell command],
 [RSH="${withval}"],
 [case "${target}" in
   hppa*-hp-hpux*)      RSH=remsh;;
   *)                   RSH=rsh;;
  esac])
AC_SUBST(RSH)
AC_MSG_RESULT($RSH)
#
# Filter list
#
AC_ARG_WITH(filters,
[  --with-filters=list     Enumerate filter list (default=none+zip)],
[
  FILTERLIST="${withval}";
],
[
  FILTERLIST="zip"
])
AC_MSG_CHECKING([default filters])
[
if test -d Garlic; then
  :
else
  mkdir Garlic
fi
FILTERFILE=Garlic/Makefile.fil;
rm -f ${FILTERFILE}
for F in ${FILTERLIST}; do
  if test -f ${srcdir}/Garlic/Makefile.${F}; then
    cat ${srcdir}/Garlic/Makefile.${F} >>${FILTERFILE}
    echo "" >>${FILTERFILE}
  else
    ]AC_MSG_ERROR([unknown filter ${F}])[
  fi;
done
]
AC_MSG_RESULT([${FILTERLIST}])
AC_SUBST_FILE(FILTERFILE)
#
# Protocol list
#
AC_ARG_WITH(protocols,
[  --with-protocols=list   Enumerate protocol list],
[
  AC_MSG_CHECKING([default protocols])
  LIST="";
  PROTOCOLSSOURCES="";
  PROTOCOLSOBJECTS="";
  TCP_INCLUDED="--  ";
  for P in ${withval}; do
     case ${P} in
     TCP|tcp) 
        LIST="${LIST} tcp";
        PROTOCOLSSOURCES="${PROTOCOLSSOURCES} \$(TCPSOURCES)";
        PROTOCOLSOBJECTS="${PROTOCOLSOBJECTS} \$(TCPOBJECTS)";
        TCP_INCLUDED="";;
     no)
        LIST="none";
        ;;
      *) 
        AC_MSG_ERROR([unknown protocol ${P}])
        ;;
      esac;
  done
  AC_MSG_RESULT([${LIST}])
],
[
AC_MSG_CHECKING([default protocols])
PROTOCOLSSOURCES="\$(TCPSOURCES)";
PROTOCOLSOBJECTS="\$(TCPOBJECTS)";
TCP_INCLUDED=""
AC_MSG_RESULT([tcp])
])
if test "$TCP_INCLUDED" = ""; then
  AC_MSG_CHECKING([thread-blocking I/O])
    if grep Non_Blocking $srcdir/Garlic/2${PLATFORM_SPECIFIC}gtplsp.ads \
      > /dev/null 2>&1; then
	AC_MSG_RESULT([no])
	PROTOCOLSOURCES="${PROTOCOLSOURCES} \$(NOBLTCPSOURCES)"
	PROTOCOLSOBJECTS="${PROTOCOLSOBJECTS} \$(NOBLTCPOBJECTS)"
    else
	AC_MSG_RESULT([yes])
    fi
fi
AC_SUBST(PROTOCOLSSOURCES)
AC_SUBST(PROTOCOLSOBJECTS)
AC_SUBST(TCP_INCLUDED)
#
# Find get_errno or __get_errno
#
AC_CHECK_LIB(gnat, get_errno, [CERRNO=get_errno], [CERRNO=__get_errno])
AC_SUBST([CERRNO])
#
# Extra libraries
#
AC_ARG_WITH(extra-libs,
 [  --with-extra-libs=libs  Add extra libraries when building a program],
 [EXTRA_LIBS="${withval}"])
AC_SUBST(EXTRA_LIBS)
#
# Check if gnatmake -s is ok (smart recompilation)
#
AC_MSG_CHECKING(if gnatmake supports -s)
if gnatmake -s -a -gnatg -gnatdj ada > /dev/null 2>&1; then
   GNATMAKE="gnatmake -s"
   AC_MSG_RESULT(yes)
else
   GNATMAKE="gnatmake"
   AC_MSG_RESULT(no)
fi
AC_SUBST(GNATMAKE)
#
# Output
#
AC_OUTPUT([Makefile
           Dist/Makefile Dist/xe-gcc
           Garlic/Makefile Garlic/s-gaprco.adb Garlic/s-garser.adb
           Garlic/s-gaosli.ads
           Examples/check-config
           Examples/Makefile
           Examples/Bank/Makefile
           Examples/Eratho/Makefile
           Examples/Eratho/absolute/Makefile
           Examples/Eratho/cycle/Makefile
           Examples/Eratho/dynamic/Makefile
           Examples/Eratho/spiral/Makefile
           Examples/Messages/Makefile
           Examples/LightBank/Makefile])
