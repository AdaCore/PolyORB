AC_INIT(src/polyorb.ads)
AC_CONFIG_AUX_DIR(support)

#
# Initialization.
#

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(polyorb,0.1)
LIBVERSIONINFO=0:0:0
AC_SUBST(LIBVERSIONINFO)

POLYORB_MAJOR_VERSION=0
POLYORB_MINOR_VERSION=1
AC_SUBST(POLYORB_MAJOR_VERSION)
AC_SUBST(POLYORB_MINOR_VERSION)

#
# Various programs.
#

AC_PROG_CC
AC_PROG_INSTALL
AC_CHECK_PROG(RM, rm, rm)
AC_CHECK_PROGS(AWK, [gnuawk gawk awk])
AM_PROG_WORKING_ADA
AM_CROSS_PROG_WORKING_ADA
AC_EXEEXT
AM_PROG_GNATMAKE
AM_CROSS_PROG_GNATMAKE
AM_CROSS_PROG_CC
AC_CHECK_PROG(GNATCHOP, gnatchop, gnatchop)
AC_CHECK_PROG(PYTHON, python, python)
AM_ENABLE_SHARED(no)
AM_ENABLE_STATIC(yes)

#
# Protocol personality list
#

AC_MSG_CHECKING([default protocol personalities])
AC_ARG_WITH(proto-perso,
[  --with-proto-perso=x    Enumerate protocol personalities],
[
  PROTO_LIST=""
  for P in ${withval}
  do
     if test -f src/${P}/polyorb-binding_data-*.ads
     then
        PROTO_LIST="${PROTO_LIST} $P "
     else
        AC_MSG_ERROR([unknown protocol personality ${P}])
     fi
  done
],
[
  PROTO_LIST=" giop "
])
AC_MSG_RESULT(${PROTO_LIST})

PROTO_DIRS=""
PROTO_CLIENT_WITHS=${srcdir}/proto_client_withs.adb
${RM} ${PROTO_CLIENT_WITHS}
PROTO_SERVER_WITHS=${srcdir}/proto_server_withs.adb
${RM} ${PROTO_SERVER_WITHS}

for P in ${PROTO_LIST}
do
   PROTO_DIRS="${PROTO_DIRS} "'$'"(${P}_dir)"

   U=`${AWK} '/^package/{print $2}' src/${P}/polyorb-binding_data-*.ads`
   cat >>${PROTO_CLIENT_WITHS} <<EOF
-- ${P} --
with ${U};
pragma Elaborate_All (${U});
pragma Warnings (Off, ${U});

EOF

   U=`${AWK} '/^package/{print $2}' src/${P}/polyorb-setup-tcp_access_points-*.ads`
   cat >>${PROTO_SERVER_WITHS} <<EOF
-- ${P} --
with ${U};
pragma Elaborate_All (${U});
pragma Warnings (Off, ${U});

EOF
done

AC_SUBST(PROTO_DIRS)
AC_SUBST_FILE(PROTO_CLIENT_WITHS)
AC_SUBST_FILE(PROTO_SERVER_WITHS)

#
# Application personality list
#

AC_MSG_CHECKING([default application personalities])
AC_ARG_WITH(appli-perso,
[  --with-appli-perso=x    Enumerate application personalities],
[
  APPLI_LIST=""
  for P in ${withval}
  do
     if test -d src/${P}
     then
        APPLI_LIST="${APPLI_LIST} $P "
     else
        AC_MSG_ERROR([unknown application personality ${P}])
     fi
  done
],
[
   APPLI_LIST=" corba "
])
AC_MSG_RESULT(${APPLI_LIST})

APPLI_DIRS=""
for P in ${APPLI_LIST}
do
   APPLI_DIRS="${APPLI_DIRS} "'$'"(${P}_dir)"
done
AC_SUBST(APPLI_DIRS)

#
# Preserve previous mechanisms.
# Remove them as soon as examples are re-organized.
#

corba_enabled=`echo "${APPLI_LIST}" | ${AWK} '/ corba /{print "yes"}'`
AM_CONDITIONAL(ENABLE_CORBA, test x$corba_enabled = xyes)

dsa_enabled=`echo "${APPLI_LIST}" | ${AWK} '/ dsa /{print "yes"}'`
AM_CONDITIONAL(ENABLE_DSA, test x$dsa_enabled = xyes)

moma_enabled=`echo "${APPLI_LIST}" | ${AWK} '/ moma /{print "yes"}'`
AM_CONDITIONAL(ENABLE_MOMA, test x$moma_enabled = xyes)

giop_enabled=`echo "${PROTO_LIST}" | ${AWK} '/ giop /{print "yes"}'`
AM_CONDITIONAL(ENABLE_GIOP, test x$giop_enabled = xyes)

soap_enabled=`echo "${PROTO_LIST}" | ${AWK} '/ soap /{print "yes"}'`
AM_CONDITIONAL(ENABLE_SOAP, test x$soap_enabled = xyes)

srp_enabled=`echo "${PROTO_LIST}" | ${AWK} '/ srp /{print "yes"}'`
AM_CONDITIONAL(ENABLE_SRP, test x$srp_enabled = xyes)

#
# Check SOAP consistency. Need XmlAda
#

XMLADA_INCS=""
XMLADA_LIBS=""
has_xmlada=no

AC_MSG_CHECKING([XmlAda])
if xmlada-config --version 2>&1 | grep "^XmlAda" > /dev/null 2>&1; then
   XMLADA_INCS="`xmlada-config --cflags`"
   XMLADA_LIBS="`xmlada-config --libs`"
   has_xmlada=yes
else
   has_xmlada=no
fi
AC_MSG_RESULT($has_xmlada)

AM_CONDITIONAL(HAS_XMLADA, test x"$has_xmlada" = xyes)
AC_SUBST(XMLADA_INCS)
AC_SUBST(XMLADA_LIBS)

soap_enabled=`echo ${PROTO_LIST} | ${AWK} '/ soap /{print "yes"}'`
if test x"$soap_enabled" = xyes -a x"$has_xmlada" != xyes
then
   AC_MSG_ERROR("Protocol personality soap requires XmlAda")
fi

#
# CORBA Interface Repository
#

ir_enabled=no
AC_MSG_CHECKING([whether to build the CORBA Interface Repository])
AC_ARG_ENABLE(ir,
[  --enable-ir             Build the Interface Repository (requires CORBA) (no)],
[ir_enabled=${enableval}])
AC_MSG_RESULT($ir_enabled)

AM_CONDITIONAL(ENABLE_IR, test x$ir_enabled = xyes)

#
# Check CORBA IR consistency
#

corba_enabled=`echo ${APPLI_LIST} | ${AWK} '/ corba /{print "yes"}'`
if test x"$ir_enabled" = xyes -a x"$corba_enabled" != xyes
then
   AC_MSG_ERROR("Interface Repository requires CORBA application personality")
fi

#
# Check for maintainer (debug) mode.
#

AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging options],
[GNATFLAGS="-g -O2 -gnatfa -fstack-check -gnatoy -gnatwae -Wall"
 BARGS=-E
 debug=true],
[GNATFLAGS="-g -O2"
 BARGS=
 debug=false])
AC_SUBST(GNATFLAGS)
AC_SUBST(BARGS)
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

#
# Extra tools like IR
#

if test x"$ir_enabled" = xyes
then
   TOOLS_DIR="${TOOLS_DIR} ir_dir"
fi

AC_SUBST(TOOLS_DIR)

#
# We change $host in order to force the generation of a libtool for the
# target, and not for the host.
# XXX if someone knows a clean way to do that, be my guest...
#

host_tmp=$host
host=$target
AM_PROG_LIBTOOL
host=$host_tmp

#
# Check that the GNAT version is recent enough for this version of PolyORB.
#

AM_ADA_PREREQ(20010503, 3.14a1)

#
# Output
#

AC_OUTPUT([Makefile
	   compilers/Makefile compilers/gnatprfh/Makefile
	   compilers/ciao/Makefile compilers/idlac/Makefile
	   compilers/idlac/testsuite/Makefile
	   compilers/idlac/platform.ads
	   src/Makefile src/corba/Makefile src/giop/Makefile 
           src/moma/Makefile src/soap/Makefile src/srp/Makefile
           src/polyorb-setup-client.adb src/polyorb-setup-server.adb
	   idls/Makefile idls/cos/Makefile idls/cos/event/Makefile
	   idls/cos/naming/Makefile idls/cos/time/Makefile
	   cos/Makefile cos/event/Makefile cos/naming/Makefile
	   cos/time/Makefile cos/ir/Makefile
	   examples/Makefile examples/echo/Makefile
	   examples/all_types/Makefile examples/all_functions/Makefile
	   examples/dsa/Makefile examples/moma/Makefile
	   support/adacompiler support/native-adacompiler
           support/linker polyorb-config])

# src/polyorb-config
#
# Some files need to be copied verbatim from the source tree to the
# build directory (only necessary when source dir != build dir).
#
# XXX Should we add src/soap/gnat.adc ?

for a in src/gnat.adc src/corba/gnat.adc src/moma/gnat.adc
do
  if test ! -f "$a"
  then
    echo "creating $a"
    cp $srcdir/$a $a
  fi
done
for a in linker adacompiler
do
  chmod a+x support/$a
done

