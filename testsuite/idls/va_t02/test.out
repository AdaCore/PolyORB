valuetype ShortValue short;
valuetype LongValue long;
typedef ShortValue TestType;
abstract valuetype ValA {
 void op1(in TestType p);
};
abstract valuetype ValB {
 typedef LongValue TestType;
 void op2(in ValB::TestType p);
};
valuetype ValC {
 typedef string TestType;
 public ValC::TestType Mbr3;
 void op3(in ValC::TestType p);
};
valuetype ValD : ValC {
 public ValC::TestType Mbr4;
 void op4(in ValC::TestType p);
};
valuetype ValE : ValD, ValB, ValA {
 typedef TestType ShortType;
 typedef ValB::TestType LongType;
 typedef ValC::TestType StringType;
 typedef ValC::TestType StringType2;
 void op5(in ValE::ShortType p);
 void op6(in ValE::LongType p);
 void op7(in ValE::StringType p);
 void op8(in ValE::StringType2 p);
};
