//
// Copyright (c) 1997 X/Open Company Ltd., A member of The Open Group.
//
// All rights reserved. No part of this source code may be reproduced,
// stored in a retrieval system, or transmitted, in any form or by any
// means, electronic, mechanical, photocopying, recording or otherwise,
// except as stated in the end-user licence agreement, without the prior
// permission of the copyright owners.
//
// Developed for X/Open by ApTest Ireland Limited.
//
// Project: CORVAL2
//


typedef struct HazelNut114{
  struct CrabApple114{
    struct Lentil114{
      sequence<sequence<sequence<sequence<char,18> > ,18> >  GoldenDelicous114[13];
    } Fig114;
  } RedOnion114;
} Cinnamon114;

typedef struct Plum115{
  struct Onion115{
    struct Tofu115{
      sequence<sequence<sequence<sequence<char,15> ,11> ,7> >  Runnerbean115;
    } Sweetcorn115[10];
  } Shallots115;
} KidneyBean115;

typedef struct Tangarine116{
  struct BrazilNut116{
    struct Brocoli116{
      sequence<sequence<sequence<sequence<boolean> > ,19> >  Prunes116;
    } GrannySmith116;
  } SweetPotato116;
} Billberries116;

typedef struct Almonds117{
  struct Oregano117{
    struct Asparagus117{
      sequence<sequence<sequence<sequence<boolean> ,12> > ,6>  GardenPeas117[9];
    } Dill117[7];
  } Beansprout117;
} Guava117;

typedef struct Parsnip118{
  struct Orange118{
    struct Sultana118{
      sequence<sequence<sequence<sequence<boolean,4> > > ,2>  GaliaMelon118[5];
    } Turnip118;
  } LoganBerry118;
} Celery118;

typedef struct BlackEyedBeans119{
  struct Ginger119{
    struct Starfruit119{
      sequence<sequence<sequence<sequence<boolean,3> ,9> > ,3>  BlackCherry119;
    } Cucumber119[17];
  } Apricots119;
} Leek119;

typedef struct Lime120{
  struct Mango120{
    struct PassionFruit120{
      sequence<sequence<sequence<sequence<octet> > > ,6>  Rhubarb120;
    } Pumpkin120;
  } WaterMelon120;
} Dates120;

typedef struct Banana121{
  struct PentlandDell120{
    struct Homeguard120{
      sequence<sequence<sequence<sequence<octet> ,6> > >  Record120[18];
    } KingEdward120[15];
  } Apple121;
} Carrots121;

typedef struct Pimpernel121{
  struct KerrsPinks121{
    struct Wilja121{
      sequence<sequence<sequence<sequence<octet,11> > > >  BritishQueens121[7];
    } Balmoral121;
  } GoldenWonder121;
} Cultra121;

interface idlServer {

  exception Cinnamon114Excpt{
    ::Cinnamon114 ex1;
  };

  attribute ::Cinnamon114 Cinnamon114Attr;

  ::Cinnamon114 Cinnamon114Op(
    in    ::Cinnamon114 p1,
    out   ::Cinnamon114 p2,
    inout ::Cinnamon114 p3
  ) raises (Cinnamon114Excpt);

  exception HazelNut114Excpt{
    ::HazelNut114 ex1;
  };

  attribute ::HazelNut114 HazelNut114Attr;

  ::HazelNut114 HazelNut114Op(
    in    ::HazelNut114 p1,
    out   ::HazelNut114 p2,
    inout ::HazelNut114 p3
  ) raises (HazelNut114Excpt);

  exception CrabApple114Excpt{
    ::HazelNut114::CrabApple114 ex1;
  };

  attribute ::HazelNut114::CrabApple114 CrabApple114Attr;

  ::HazelNut114::CrabApple114 CrabApple114Op(
    in    ::HazelNut114::CrabApple114 p1,
    out   ::HazelNut114::CrabApple114 p2,
    inout ::HazelNut114::CrabApple114 p3
  ) raises (CrabApple114Excpt);

  exception Lentil114Excpt{
    ::HazelNut114::CrabApple114::Lentil114 ex1;
  };

  attribute ::HazelNut114::CrabApple114::Lentil114 Lentil114Attr;

  ::HazelNut114::CrabApple114::Lentil114 Lentil114Op(
    in    ::HazelNut114::CrabApple114::Lentil114 p1,
    out   ::HazelNut114::CrabApple114::Lentil114 p2,
    inout ::HazelNut114::CrabApple114::Lentil114 p3
  ) raises (Lentil114Excpt);

  exception KidneyBean115Excpt{
    ::KidneyBean115 ex1;
  };

  attribute ::KidneyBean115 KidneyBean115Attr;

  ::KidneyBean115 KidneyBean115Op(
    in    ::KidneyBean115 p1,
    out   ::KidneyBean115 p2,
    inout ::KidneyBean115 p3
  ) raises (KidneyBean115Excpt);

  exception Plum115Excpt{
    ::Plum115 ex1;
  };

  attribute ::Plum115 Plum115Attr;

  ::Plum115 Plum115Op(
    in    ::Plum115 p1,
    out   ::Plum115 p2,
    inout ::Plum115 p3
  ) raises (Plum115Excpt);

  exception Onion115Excpt{
    ::Plum115::Onion115 ex1;
  };

  attribute ::Plum115::Onion115 Onion115Attr;

  ::Plum115::Onion115 Onion115Op(
    in    ::Plum115::Onion115 p1,
    out   ::Plum115::Onion115 p2,
    inout ::Plum115::Onion115 p3
  ) raises (Onion115Excpt);

  exception Tofu115Excpt{
    ::Plum115::Onion115::Tofu115 ex1;
  };

  attribute ::Plum115::Onion115::Tofu115 Tofu115Attr;

  ::Plum115::Onion115::Tofu115 Tofu115Op(
    in    ::Plum115::Onion115::Tofu115 p1,
    out   ::Plum115::Onion115::Tofu115 p2,
    inout ::Plum115::Onion115::Tofu115 p3
  ) raises (Tofu115Excpt);

  exception Billberries116Excpt{
    ::Billberries116 ex1;
  };

  attribute ::Billberries116 Billberries116Attr;

  ::Billberries116 Billberries116Op(
    in    ::Billberries116 p1,
    out   ::Billberries116 p2,
    inout ::Billberries116 p3
  ) raises (Billberries116Excpt);

};

