with Droopi.POA_Types;     use Droopi.POA_Types;

package CORBA.Policy.Id_Assignment_Policy is

   type IdAssignmentPolicy is abstract new Policy with null record;
   subtype Id_Assignment_Policy is IdAssignmentPolicy;
   type IdAssignmentPolicy_Access is access all IdAssignmentPolicy'Class;
   subtype Id_Assignment_Policy_Access is IdAssignmentPolicy_Access;

   function Create return IdAssignmentPolicy_Access is abstract;
   --  The real creation function that has to be implemented for each
   --  possible Policy

   function Is_System (P : IdAssignmentPolicy) return Boolean
      is abstract;
   --  Checks if the current policy is able to create ObjectIds
   --  (System_Id policy)

   function Activate_Object
     (Self   : IdAssignmentPolicy;
      OA     : Droopi.POA_Types.Obj_Adapter_Access;
      Object : Servant_Access) return Object_Id_Access
      is abstract;
   --  Add an object to the Active Object Map, and return a new
   --  Object_Id

   procedure Activate_Object_With_Id
     (Self   : IdAssignmentPolicy;
      OA     : Droopi.POA_Types.Obj_Adapter_Access;
      Object : Servant_Access;
      Oid    : Object_Id)
      is abstract;
   --  Add an object to the Active Object Map, and return a new
   --  Object_Id

   procedure Ensure_Oid_Origin
     (Self  : IdAssignmentPolicy;
      U_Oid : Unmarshalled_Oid_Access)
      is abstract;
   --  Checks if the given Oid has been generated by the system
   --  Case SYSTEM_ID:
   --    raise the Bad_Param exception is the Object_Id has been generated
   --    by the user
   --  Case USER_ID:
   --    does nothing;

   procedure Ensure_Oid_Uniqueness
     (Self  : IdAssignmentPolicy;
      OA    : Droopi.POA_Types.Obj_Adapter_Access;
      U_Oid : Unmarshalled_Oid_Access)
      is abstract;
   --  Checks if the Object_Id is not yet in use.
   --  Case SYSTEM_ID:
   --    Checks that the element in the map whose index is the Id
   --    is free.
   --  Case USER_ID:
   --    Loop through the map to check that the U_Oid is not yet used

   procedure Remove_Entry
     (Self  : IdAssignmentPolicy;
      OA    : Droopi.POA_Types.Obj_Adapter_Access;
      U_Oid : Unmarshalled_Oid_Access)
      is abstract;
   --  Removes an entry from the Active Object Map

   function Id_To_Servant (Self  : IdAssignmentPolicy;
                           OA    : Droopi.POA_Types.Obj_Adapter_Access;
                           U_Oid : Unmarshalled_Oid_Access)
                          return Servant_Access
      is abstract;
   --  Look in the Active Object Map for the given U_Oid. If found,
   --  returns the associated Servant. Otherwise, returns null.

   procedure Free
     (P   : in     IdAssignmentPolicy;
      Ptr : in out Policy_Access) is abstract;

end CORBA.Policy.Id_Assignment_Policy;
