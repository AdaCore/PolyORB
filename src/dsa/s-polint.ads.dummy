------------------------------------------------------------------------------
--                                                                          --
--                           POLYORB COMPONENTS                             --
--                                                                          --
--             S Y S T E M . P O L Y O R B _ I N T E R F A C E              --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--             Copyright (C) 1999-2003 Free Software Fundation              --
--                                                                          --
-- PolyORB is free software; you  can  redistribute  it and/or modify it    --
-- under terms of the  GNU General Public License as published by the  Free --
-- Software Foundation;  either version 2,  or (at your option)  any  later --
-- version. PolyORB is distributed  in the hope that it will be  useful,    --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details.  You should have received  a copy of the GNU  --
-- General Public License distributed with PolyORB; see file COPYING. If    --
-- not, write to the Free Software Foundation, 59 Temple Place - Suite 330, --
-- Boston, MA 02111-1307, USA.                                              --
--                                                                          --
-- As a special exception,  if other files  instantiate  generics from this --
-- unit, or you link  this unit with other files  to produce an executable, --
-- this  unit  does not  by itself cause  the resulting  executable  to  be --
-- covered  by the  GNU  General  Public  License.  This exception does not --
-- however invalidate  any other reasons why  the executable file  might be --
-- covered by the  GNU Public License.                                      --
--                                                                          --
--              PolyORB is maintained by ENST Paris University.             --
--                                                                          --
------------------------------------------------------------------------------

--  Dummy version of System.PolyORB_Interface that does not reference
--  any PolyORB unit. This version is to be used when compiling
--  Remote_Types units for use in a non-distributed application.

--  $Id$

with System.RPC;
with System.Unsigned_Types;
with Interfaces;
with PolyORB.Any;

package System.PolyORB_Interface is

   type Object_Ref is private;

   ---------------------------
   -- Partition identifiers --
   ---------------------------

   function Get_Active_Partition_ID (Name : String) return RPC.Partition_ID;
   --  Get the Partition_ID of the partition where remote call interface
   --  unit Name resides.

   function Get_Local_Partition_ID return RPC.Partition_ID;
   --  Return the Partition_ID of the current partition

   ---------------------
   -- RCI information --
   ---------------------

   --  Calling stubs need a cache of the object reference
   --  associated with each RCI unit.

   generic
      RCI_Name : String;
   package RCI_Locator is
      function Get_RCI_Package_Ref
        return Object_Ref;
   end RCI_Locator;

   --  Receiving stubs contain a table of all subprograms
   --  exported by the unit.

   type RCI_Subp_Info is record
      Name        : System.Address;
      Name_Length : Integer;
      --  Subprogram distribution identifier

      Addr : System.Address;
      --  Local address of the actual subprogram
   end record;

   type RCI_Subp_Info_Array is array (Integer range <>)
     of RCI_Subp_Info;

   ---------------------------------------
   -- Remote access-to-subprogram types --
   ---------------------------------------

   procedure Get_RAS_Ref
     (Pkg_Name        :     String;
      Subprogram_Name :     String;
      Subp_Ref        : out Object_Ref);
   --  Return the RAS object reference associated with the
   --  named subprogram.

   --------------------------
   -- RPC receiver objects --
   --------------------------

   --  One RPC receiver is created for each supported interface,
   --  i.e. one for each RCI library unit, and one for each
   --  type that is the designated type of one or more RACW type.

   function Caseless_String_Eq (S1, S2 : String) return Boolean;
   --  Case-less equality of S1 and S2.

   type Identifier is private;
   type Request is record
      Target : Object_Ref;
      Operation : Identifier;
   end record;
   type Request_Access is access all Request;

   type Request_Handler_Access is access
     procedure (R : Request_Access);

   type Private_Info is abstract tagged null record;
   type Private_Info_Access is access all Private_Info'Class;

   type Obj_Adapter_Access is private;
   --  type TypeCode_Object is private;
   subtype TypeCode_Object is PolyORB.Any.TypeCode.Object;

   type Servant is tagged record
      Handler        : Request_Handler_Access;
      --  The dispatching routine.

      Object_Adapter : Obj_Adapter_Access;
      --  Null for RCI servants (the root POA will be used in
      --  this case.)

      Obj_TypeCode   : TypeCode_Object;
      --  The TypeCode to be used for references to objects
      --  of this type.

      Impl_Info      : Private_Info_Access;
   end record;
   type Servant_Access is access all Servant'Class;

   procedure Register_Obj_Receiving_Stub
     (Name          : in String;
      Handler       : in Request_Handler_Access;
      Receiver      : in Servant_Access);
   --  Register Receiver as the RPC servant for distributed objects
   --  of type Name, at elaboration time.

   procedure Register_Pkg_Receiving_Stub
     (Name                : String;
      Version             : String;
      Handler             : Request_Handler_Access;
      Receiver            : Servant_Access;
      Subp_Info           : System.Address;
      Subp_Info_Len       : Integer;
      Is_All_Calls_Remote : Boolean);
   --  Register the fact that the Name receiving stub is now elaborated.
   --  Register the access value to the package RPC_Receiver procedure.
   --  Subp_Info is the address of an array of a statically subtype
   --  of RCI_Subp_Info_Array with a range of 0 .. Subp_Info_Len - 1.

   --------------------------------------------
   -- Support for RACWs as object references --
   --------------------------------------------

   type Entity_Ptr is private;

   procedure Inc_Usage (E : Entity_Ptr);
   --  In stubs for remote objects, the object reference
   --  information is stored as a naked Entity_Ptr. We therefore
   --  need to account for this reference by hand.

   procedure Set_Ref
     (The_Ref    : in out Object_Ref;
      The_Entity :        Entity_Ptr);

   function Entity_Of
     (R : Object_Ref)
      return Entity_Ptr;

   --  Conversion from Entity_Ptr to Ref and reverse

   type RACW_Stub_Type is tagged limited record
      Origin       : System.RPC.Partition_ID;
      Receiver     : Interfaces.Unsigned_64;
      --  XXX the 2 fields above are placeholders and must not
      --  be used (they are kept here only while Exp_Dist is
      --  not completely updated for PolyORB).

      Target       : Entity_Ptr;
      --  Target cannot be a References.Ref (a controlled type)
      --  because that would pollute RACW_Stub_Type's dispatch
      --  table (which must be exactly identical to that of
      --  the designated tagged type).
      --  Target must be a pointer to References.Reference_Info.

      Addr         : System.Address := System.Null_Address;
      --  If this stub is for a remote access-to-subprogram type
      --  that designates a local subprogram, then this field
      --  is set to that subprogram's address, else it is
      --  Null_Address.

      Asynchronous : Boolean;
   end record;
   type RACW_Stub_Type_Access is access RACW_Stub_Type;
   --  This type is used by the expansion to implement distributed objects.
   --  Do not change its definition or its layout without updating
   --  exp_dist.adb.

   procedure Get_Unique_Remote_Pointer
     (Handler : in out RACW_Stub_Type_Access);
   --  Get a unique pointer on a remote object

   function To_PolyORB_String (S : String)
     return Identifier;

   function To_Standard_String (S : Identifier)
     return String;

   function Is_Nil (R : Object_Ref) return Boolean;

   type Configuration_Access is private;
   RACW_POA_Config : constant Configuration_Access;

   procedure Get_Local_Address
     (Ref      : Object_Ref;
      Is_Local : out Boolean;
      Addr     : out System.Address);
   --  If Ref denotes a local object, Is_Local is set to True,
   --  and Addr is set to the object's actual address, else
   --  Is_Local is set to False and Addr is set to Null_Address.

   procedure Get_Reference
     (Addr     :        System.Address;
      Typ      :        String;
      Receiver : access Servant;
      Ref      :    out Object_Ref);
   --  Create a reference that can be used to desginate the
   --  object whose address is Addr, whose type is the designated
   --  type of a RACW type associated with Servant.

   ------------------------------
   -- Any and associated types --
   ------------------------------

   Result_Name : constant Identifier;

   --  type Any is private;
   subtype Any is PolyORB.Any.Any;
   type Flags is new Integer;
   Mode_In    : Flags;
   Mode_Out   : Flags;
   Mode_Inout : Flags;
   type NamedValue is record
      Name : Identifier;
      Argument : Any;
      Arg_Modes : Flags;
   end record;
   subtype TypeCode is TypeCode_Object;
   procedure Set_TC
     (A : in out Any;
      T : TypeCode_Object);

   function Get_Empty_Any
     (Tc : PolyORB.Any.TypeCode.Object)
      return PolyORB.Any.Any renames Polyorb.Any.Get_Empty_Any;

   function Get_Empty_Any_Aggregate
     (Tc : TypeCode_Object)
      return Any;

   type NVList_Ref is private;
   procedure NVList_Create (NVList : out NVList_Ref);

   procedure NVList_Add_Item
     (Self       :    NVList_Ref;
      Item_Name  : in Identifier;
      Item       : in Any;
      Item_Flags : in Flags);

   --  Elementary From_Any and To_Any operations

   subtype Unsigned is System.Unsigned_Types.Unsigned;
   subtype Long_Unsigned is
     System.Unsigned_Types.Long_Unsigned;
   subtype Long_Long_Unsigned is
     System.Unsigned_Types.Long_Long_Unsigned;
   subtype Short_Unsigned is
     System.Unsigned_Types.Short_Unsigned;
   subtype Short_Short_Unsigned is
     System.Unsigned_Types.Short_Short_Unsigned;

--       function FA_AD (Item : Any) return X;
--       function FA_AS (Item : Any) return X;
   function FA_B (Item : Any) return Boolean;
   function FA_C (Item : Any) return Character;
   function FA_F (Item : Any) return Float;
   function FA_I (Item : Any) return Integer;
   function FA_U (Item : Any) return Unsigned;

   function FA_LF (Item : Any) return Long_Float;
   function FA_LI (Item : Any) return Long_Integer;
   function FA_LU (Item : Any) return Long_Unsigned;

   function FA_LLF (Item : Any) return Long_Long_Float;
   function FA_LLI (Item : Any) return Long_Long_Integer;
   function FA_LLU (Item : Any) return Long_Long_Unsigned;

   function FA_SF (Item : Any) return Short_Float;
   function FA_SI (Item : Any) return Short_Integer;
   function FA_SU (Item : Any) return Short_Unsigned;

   function FA_SSI (Item : Any) return Short_Short_Integer;
   function FA_SSU (Item : Any) return Short_Short_Unsigned;
   function FA_WC (Item : Any) return Wide_Character;

   function FA_String (Item : Any) return String;

   function FA_ObjRef
     (Item : Any)
      return Object_Ref;

--     function TA_AD (X) return Any;
--     function TA_AS (X) return Any;
   function TA_B (Item : Boolean) return Any;
   function TA_C (Item : Character) return Any;
   function TA_F (Item : Float) return Any;
   function TA_I (Item : Integer) return Any;
   function TA_U (Item : Unsigned) return Any;
   function TA_LF (Item : Long_Float) return Any;
   function TA_LI (Item : Long_Integer) return Any;
   function TA_LU (Item : Long_Unsigned) return Any;
   function TA_LLF (Item : Long_Long_Float) return Any;
   function TA_LLI (Item : Long_Long_Integer) return Any;
   function TA_LLU (Item : Long_Long_Unsigned) return Any;
   function TA_SF (Item : Short_Float) return Any;
   function TA_SI (Item : Short_Integer) return Any;
   function TA_SU (Item : Short_Unsigned) return Any;
   function TA_SSI (Item : Short_Short_Integer) return Any;
   function TA_SSU (Item : Short_Short_Unsigned) return Any;
   function TA_WC (Item : Wide_Character) return Any;

   function TA_String (S : String) return Any;

   function TA_ObjRef (R : Object_Ref)
     return Any;

   function TA_TC (TC : TypeCode_Object) return Any;
   --       function TC_AD return TypeCode_Object
   --       renames PolyORB.Any.TC_X;
   --       function TC_AS return TypeCode_Object
   --       renames PolyORB.Any.TC_X;

   --  The typecodes below define the mapping of Ada elementary
   --  types onto PolyORB types.

   function TC_B return TypeCode_Object;
   function TC_C return TypeCode_Object;
   function TC_F return TypeCode_Object;

   --  Warning! Ada numeric types have platform dependant sizes,
   --  PolyORB types are fixed size: this mapping may need to
   --  be changed for other platforms (or the biggest PolyORB
   --  type for each Ada type should be selected, if cross-platform
   --  interoperability is desired.

   function TC_I return TypeCode_Object;
   function TC_LF return TypeCode_Object;
   function TC_LI return TypeCode_Object;
   function TC_LLF return TypeCode_Object;
   function TC_LLI return TypeCode_Object;
   function TC_LLU return TypeCode_Object;
   function TC_LU return TypeCode_Object;
   function TC_SF return TypeCode_Object;

   function TC_SI return TypeCode_Object;
   function TC_SSI return TypeCode_Object;
   function TC_SSU return TypeCode_Object;
   function TC_SU return TypeCode_Object;
   function TC_U return TypeCode_Object;
   function TC_WC return TypeCode_Object;

   function TC_String return TypeCode_Object;
   function TC_Void return TypeCode_Object;

   function TC_Alias return TypeCode_Object;
   --  Empty Tk_Alias typecode.
   function TC_Array return TypeCode_Object;
   --  Empty Tk_Array typecode.
   function TC_Struct return TypeCode_Object;
   --  Empty Tk_Struct typecode.

   type Any_Array is array (Natural range <>) of Any;

   function TC_Build
     (Base       : TypeCode_Object;
      Parameters : Any_Array)
      return TypeCode_Object;

   procedure Copy_Any_Value (Dest, Src : Any);

   function Any_Aggregate_Build
     (TypeCode : TypeCode_Object;
      Contents : Any_Array)
      return Any;

   procedure Add_Aggregate_Element
     (Value   : in out Any;
      Element : in     Any);

   function Get_Aggregate_Element
     (Value : Any;
      Tc    : TypeCode_Object;
      Index : System.Unsigned_Types.Long_Unsigned)
      return Any;

   --------------
   -- Requests --
   --------------

   type Exc_List_Ref is private;
   Nil_Exc_List : constant Exc_List_Ref;
   type Component is private;
   type Component_Access is access all Component;

   procedure Request_Create
     (Target    : in     Object_Ref;
      Operation : in     String;
      Arg_List  : in     NVList_Ref;
      Result    : in out NamedValue;
      Exc_List  : in     Exc_List_Ref
        := Nil_Exc_List;
      Req       :    out Request_Access;
      Req_Flags : in     Flags := 0;
      Deferred_Arguments_Session :
        in Component_Access := null
     );

   procedure Request_Invoke
     (R            : Request_Access;
      Invoke_Flags : Flags          := 0);

   procedure Request_Arguments
     (R    :        Request_Access;
      Args : in out NVList_Ref);

   procedure Request_Set_Out
     (R : Request_Access);

   procedure Set_Result
     (Self : Request_Access;
      Val  : Any);

   Asynchronous_P_To_Sync_Scope : constant array (Boolean)
     of Flags
     := (others => 0);

   procedure Request_Raise_Occurrence (R : Request_Access);
   --  If R terminated with an exception, raise that exception,
   --  otherwise do noting.

private

   type Identifier is null record;
   type Object_Ref is null record;
   type Entity_Ptr is null record;
   type Configuration_Access is null record;
   type Obj_Adapter_Access is null record;
   --  type TypeCode_Object is null record;
   type NVList_Ref is null record;
   --  type Any is null record;
   type Exc_List_Ref is null record;
   type Component is null record;

   RACW_POA_Config : constant Configuration_Access := (null record);
   Result_Name : constant Identifier := (null record);
   Nil_Exc_List : constant Exc_List_Ref := (null record);

end System.PolyORB_Interface;
