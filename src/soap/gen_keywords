#! /bin/sh

# Generate a perfect hash function and Ada body from a specially
# formatted Ada spec that defines an enumerated type and a string
# list.

# $Id$

if [ $# != 1 ]
then
  exit 1
fi

ads=$1
adb=`echo $ads | sed 's/\.ads$/.adb/'`
aux=`echo $ads | sed 's/\.ads$/.aux/'`
trap "rm -f $aux" 0
cfile=`echo $ads | sed 's/\.ads$/_gperf.c/'`
ofile=`echo $cfile | sed 's/\.c$/.o/'`
unit=`echo $ads | sed -e 's/\.ads$//' -e 's/-/__/g'`
matchfun="$unit"_IN_WORD_SET

awk 'BEGIN { i = 0; st = 0; print "%{\nenum kwids {"; }
     /^package / {
        match ($0, /^package ([^ ]*) is/, m);
        print "pkg=" m[1] > "'$aux'";
     }
     /^[ 	]*type .* is/ {
        match ($0, /type ([^ ]*) is/, m);
        print "ent=" m[1] >> "'$aux'";
     }
     st == 0 && /<ENUM>/ { st = 1; next; }
     st == 1 && /--  >>/ {
        match ($0, /^[ 	]*([^ 	,]*),?[ 	]*--  >> "([^"]*)"/, m)
        print "  " m[1] ", /* " m[2] " */";
        print "key:" m[1] >> "'$aux'";
        print "str:" m[2] >> "'$aux'";
        enum_val[i] = m[1];
        str_val[i++] = m[2]; }
     st == 1 && /<\/ENUM>/ {
        st = 0; print "};\n%}";
        print "struct kwinfo { char *name; enum kwids id; };"
        print "%%";
        for (j = 0; j < i; j++) {
          print str_val[j] ", " enum_val[j];
        }
        next; }' < $ads > $ads.perf

gperf -N $matchfun -t $ads.perf > $cfile

eval `grep "^...=" $aux`

cat > $adb <<EOF
with Interfaces.C;
with Interfaces.C.Strings;
package body $pkg is

   use Interfaces.C;
   use Interfaces.C.Strings;

   type Keyword_Info is record
      Name : Interfaces.C.Strings.chars_ptr;
      Id   : $ent;
   end record;
   type Keyword_Info_Access is access all Keyword_Info;
   pragma Convention (C, Keyword_Info);
   pragma Convention (C, Keyword_Info_Access);

   function C_In_Word_Set (S : chars_ptr) return Keyword_Info_Access;
   pragma Import (C, C_In_Word_Set, "$matchfun");
   pragma Linker_Options ("$ofile");

   function In_Word_Set (S : String) return $ent
   is
      Chars : aliased char_array := To_C (S);
      Info : constant Keyword_Info_Access
        := C_In_Word_Set (To_Chars_Ptr (Chars'Unchecked_Access));
   begin
      if Info /= null then
         return Info.Id;
      end if;
      raise Constraint_Error;
   end In_Word_Set;

   function To_String (Id : $ent) return String is
   begin
      case Id is
EOF

sed -n -e '/^key:\(.*\)/s//         when \1 =>/p' \
       -e '/^str:\(.*\)/s//            return "\1";/p' < $aux >> $adb

cat >> $adb <<EOF
      end case;
   end To_String;

end $pkg;
EOF
