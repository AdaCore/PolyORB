##################################################################################
###########modification nécessaire pour passer de adabroker à polyorb#############
##################################################################################




###########with Broca.Server_Tools; use  Broca.Server_Tools;#####################

transformé en

with PolyORB.CORBA_P.Server_Tools; use  PolyORB.CORBA_P.Server_Tools;




##########with Broca.Soft_Links;    use  Broca.Soft_Links;#######################

transformé en

with PolyORB.Tasking.Soft_Links; use PolyORB.Tasking.Soft_Links;




##########with Broca.Debug remplacé par :

--d'abord on utilise le fichier avec un with PolyORB.Log avant le packaga du fichier en cours

 with PolyORB.Log;
 
 
-- on enlève le pragma Elaborate_All (Broca.Debug);
-- on met le use au début du package
 
 use  PolyORB.Log;

--ensuite on instancie un package (ie : on crée un package, notion spécifique à ADA
--pour signifier en ensemble de fonctions. En très gros, c'est un objet pour d'autres langages).
 
 package L is new PolyORB.Log.Facility_Log ("pullconsumer");
 
--et on redéfinit la fonction L.Output pour qu'elle s'appelle également O (ce qui était le nom
--fonction utilisé dans AdaBroker, ce qui évite de devoir tout modifier...). Il faut donc
--faire ces modifications avant toutes appel à O
 
 procedure O (Message : in Standard.String; Level : Log_Level := Debug)
     renames L.Output;
     
-- et on enlève les définitions utilisant Broca.Debug, à savoir:
-- Flag : constant Natural := Broca.Debug.Is_Active ("pullconsumer");
-- procedure O is new Broca.Debug.Output (Flag);
-- 
-- Ce qui se trouve après le Is_Active, ici "pullconsumer", il faut le mettre
-- dans la ligne d'instanciation du package PolyORB.Log.Facility_Log (cf ci dessus).


-- autres modifications parfois nécessaires:

with PolyORB.Tasking.Watchers; use PolyORB.Tasking.Watchers;
with Corba.Sequences.*; remplacé par with PolyORB.Sequences.*;

