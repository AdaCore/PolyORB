module Nodes {

    /******************/
    /* Internal types */
    /******************/

  typedef long Name_Id;

    /******************/
    /* Internal nodes */
    /******************/

  interface Node_Id {
    Node_Id    Next_Node;
    // Link nodes together
  };

  interface List_Id {
    Node_Id    First_Node;
    Node_Id    Last_Node;
  };

  interface Identifier : Node_Id {
    Name_Id    Name;
  };

  interface Identifiers_List : List_Id { };

    /***********************/
    /* AADL Specifications */
    /***********************/

    // AADL_specification ::= { AADL_declaration } +

  interface AADL_Specification : Node_Id {
    List_Id    Declarations;
  };

    // AADL_declaration ::= component_classifier | package_spec | 
    //                      port_group_type | port_group_type_extension |
    //                      system_instance | property_set

  interface AADL_Declaration : Node_Id {};
  interface AADL_Declaration_List : List_Id {};

    // component_classifier ::= component_type | component_type_extension | 
    //                          component_implementation |
    //                          component_implementation_extension


    /************/
    /* Packages */
    /************/

    // package_items ::=
    //   { component_type | component_type_extension | component_implementation
    //     | component_implementation_extension | port_group_type
    //     | port_group_type_extension | annex_specification } +
    //   [ properties
    //     ( property_association { property_association } | none_statement ) ]

  interface Package_Items : Node_Id {
    List_Id    Items;
    List_Id    Properties;
  };

    // package_name ::= { package_identifier . } * package_identifier

  interface Package_Name : List_Id { };

    // package_spec ::= 
    //    package defining_package_name 
    //     ( public package_items [ private package_items ]
    //        | private package_items )
    //    end defining_package_name;

  interface Package_Spec : Node_Id {
    List_Id    Package_Name;
    Node_Id    Public_Package_Items;
    Node_Id    Private_Package_Items;
  };

    /*******************/
    /* Component Types */
    /*******************/

    // component_type ::= 
    //    component_category defining_component_type_identifier 
    //    [ provides ( { feature } + | none_statement ) ]
    //    [ requires ( { required_subcomponent_access } + | none_statement ) ]
    //    [ parameters ( { parameter } + | none_statement ) ]
    //    [ properties ( { component_type_property_association } +
    //                   | none_statement ) ]
    //    { annex_subclause } *
    // end defining_component_type_identifier ;

    // component_type_extension ::= 
    //    component_category defining_component_type_identifier 
    //    extends unique_component_type_identifier
    //    [ provides ( { feature | feature_refinement } + | none_statement ) ]
    //    [ requires ( { required_subcomponent_access 
    //                 | required_subcomponent_access_refinement } +
    //               | none_statement ) ]
    //    [ parameters ( { parameter | parameter_refinement } +
    //               | none_statement ) ]
    //    [ properties ( { component_type_property_association } +
    //               | none_statement ) ]
    //    { annex_subclause } *
    //  end defining_component_type_identifier ;

  typedef octet Component_Category;

  interface Unique_Component_Name : Node_Id {
    List_Id  Package_Name;
    Node_Id  Identifier;
  };

  interface Component_Type : Node_Id {
    Node_Id  Identifier;
    octet    Category;
    List_Id  Provides;
    List_Id  Requires;
    List_Id  Parameters;
    List_Id  Properties;
    List_Id  Annexes;
    Node_Id  Parent;
  };

    // feature ::= port_spec | port_group_spec
    //             | clientserver_subprogram | data_subprogram_spec
    //             | provided_data_or_bus_subcomponent_access

    // feature_refinement ::= port_refinement | port_group_refinement
    //                        | clientserver_subprogram_refinement
    //                        | data_subprogram_refinement
    //                  | provided_data_or_bus_subcomponent_access_refinement

  interface Refinable : Node_Id {
    boolean Is_Refinement;
  };

  interface Feature : Refinable {
    List_Id Identifiers_List;
  };

    // port_spec ::=  
    //    defining_port_identifier_list : ( in | out | in out ) port_type 
    //    [ { { port_property_association } + } ] ;

    // port_refinement ::=  
    //    defining_port_identifier_list : refined to
    //    ( in | out | in out ) port_type 
    //    [ { { port_property_association } + } ] ;

    // port_type ::=   ( data port data_classifier_reference  )
    //               | ( event data port data_classifier_reference )
    //               | ( event port )

    // classifier_reference ::=
    //     [ unique_component_type_name [ . component_implementation_name ] ]

  interface Classifier_Ref : Node_Id {
    Node_Id Comp_Type;
    Node_Id Comp_Impl;
  };

  interface Port_Type : Node_Id {
    boolean Is_Event;
    Node_Id Data_Ref;   // Data_Ref = No_Node ---> event port
  };

  interface Port_Spec : Feature {
    boolean  Is_In;
    boolean  Is_Out;
    Node_Id  Port_Type;
    List_Id  Properties;
  };

    // component_implementation ::= 
    //    component_category implementation
    //    component_type_identifier . defining_component_implementation_name
    //    [ refines type 
    //     ( { feature_refinement | required_subcomponent_access_refinement } +
    //       | none_statement ) ]
    //    [ subcomponents ( { subcomponent } +  | none_statement ) ]
    //    [ connections ( { connection } + | none_statement ) ]
    //    [ calls ( { subprogram_call_sequence } +  | none_statement ) ]   
    //    [ modes ( mode_subclause | none_statement ) ]
    //    [ properties ( { property_association } + | none_statement ) ]
    //    { annex_subclause } *
    // end component_type_identifier.defining_component_implementation_name ;

    // component_implementation_extension ::= 
    //    component_category implementation
    //    component_type_identifier . defining_component_implementation_name
    //    extends unique_component_implementation_name 
    //    [ refines type 
    //     ( { feature_refinement | required_subcomponent_access_refinement } +
    //       | none_statement ) ]
    //    [ subcomponents 
    //     ( { subcomponent | subcomponent_refinement } +  | none_statement ) ]
    //    [ connections 
    //     ( { connection | connection_refinement } +  | none_statement ) ]
    //    [ calls ( { subprogram_call_sequence } +  | none_statement ) ]   
    //    [ modes ( mode_subclause | none_statement ) ]
    //    [ properties ( { property_association } + | none_statement ) ]
    //    { annex_subclause } *
    // end component_type_identifier.defining_component_implementation_name ;

  interface Component_Implementation : Node_Id {
    Node_Id Identifier;
    octet Category;
    // TODO ...
  };

};
