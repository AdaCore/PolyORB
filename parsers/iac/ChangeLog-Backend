2004-06-08  Saber Souli <souli@enst.fr>
	* backend-be_ada.adb:
	  -  Add Visit_Enumeration_Type function : Handle Enemurated
	  Type declaration. 
	  -  Add Visit_Constant_Declaration function : Not implemented
	  yet; it only ignore constants generated by iac
	  frontend for enumerators.
	* backend-be_ada-nutils.adb : 
	  -  Add Mk_Node_Enumeration_Type function :  create
	  Enumerate_Type node.     
	  -  Add Mk_Node_Type_Declaration function : Create
	  Type_Declaration node. 
	* backend-be_ada-files_generation.adb : 
	  -  Add Generate_Enumeration_Type procedure : output the
	  source code for Enumeration_Type declaration.
	  -  Add Generate_Identifier procedure : Output Identifier
	  Name. 
	    
2004-06-07  Saber Souli <souli@enst.fr>
	* Backend-be_ada.adb : 
	  -  Handle interface operations and generate the appropriate
	  Ada function or Ada procedure.
	  -  Handle the List of Declarators in attribute declarations. 
	  -  Handle Simple Type Declaration (function
	  Visite_Type_Declaration ). 
	* backend-be_ada-nutils.adb :   
	  -  Add function Mk_Node_Simple_Derived_Type_Def : Create a
	  simple derived type declaration. 
	* backend-be_ada-debug.adb:      
	  -  Add procedure W_Small_Indents : Write a small indent for
	  making the IAC source code output identical to the output of
	  IDLAC. And so making the tests easier.
	* backend-be_ada-files_generation.adb : 
	  -  Using W_Small_Indents. 
	* nodes.idl : 
	  - Add Ada_Node to manage Scoped Name reference in Type
	  Declaration. 
	* be-adatree-design.txt : Ada tree production design
	document "Draft".  
	* be-design.txt : Ada Backend Architecture"Draft". 
   
	* USAGE : 
	  - Use "-ada" Flag to produce ada source code. 
	  - Use "-ada -t" Flag to dump the Ada tree.          
	       
2004-05-31  Saber Souli <souli@enst.fr>
	* backend-be_ada.adb : This package Visit IDL tree nodes, and
	generate the appropriate Ada node following the ADA Language
	Specification. Actually I didn't take in consideration specific
	mapping introduced by using PolyORB, I let this in later stage,
	after completing all the OMG mappings specification. 
	Here are the actual mapping implemented : Module, Interface (only
	attribute setter and getter generation is completed),
	typedef (Not completed yet), Base type mapping.  
	* backend-be_ada-nutils.ad[s,b] : Contain several routines to
	simplify the creation of ada tree nodes. 
	* backend-be_ada-nodes.idl : added Derived_Type_Spec in
	order to make the representation of this kind of declaration
	possible. Added Record_Type_Spec to manage record specification.
	Added Ada_Function_Spec and Ada_Procedure_Spec to manage
	subprogram prototype declaration. 
	* backend-be_ada-debug.adb : simplify  debug of the Ada tree.
	* backend-be_ada-file-generation : Generate ada file
	source. Now the generated source is printed in the user screen.  

	* USAGE : 
	- Before Building IAC, you must change backend-be_ada-nodes.adb by
	replacing "with Nodes; use Nodes;" with "with
	Backend.BE_Ada-Debug; use Backend.BE_Ada.Debug;".   
	- To activate the ada source generation, you must execute
	IAC with "-x ada" flag.
	- The Idl file must contain only Module, interface, and attribute
	declarations. 
 

