-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package module is

   --  Module m11

   Repository_Id : constant Standard.String
     := "IDL:module:1.0";

end module;

-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
pragma Elaborate_All (CORBA);
with CORBA.Object;

package module.m11.I111 is

   type Ref
     is new CORBA.Object.Ref with null record;

   value_Repository_Id : constant Standard.String
     := "IDL:module/m11/I111/value:1.0";

   function Get_value
     (Self : in Ref)
     return CORBA.Float;

   procedure Set_value
     (Self : in Ref;
      To : in CORBA.Float);

   Repository_Id : constant Standard.String
     := "IDL:module/m11/I111:1.0";

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

private

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

end module.m11.I111;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Object;
with PolyORB.Types;
with PolyORB.Requests;
with PolyORB.Any.NVList;
with PolyORB.CORBA_P.Exceptions;
with CORBA;
 use CORBA;
pragma Elaborate_All (CORBA);

package body module.m11.I111 is

   function Get_value
     (Self : Ref)
     return CORBA.Float
   is

      Operation_Name_U : constant Standard.String
        := "_get_value";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (CORBA.TC_Float),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.

      --  Retrieve return value.
      return CORBA.From_Any
        (Result_U.Argument);
   end Get_value;

   procedure Set_value
     (Self : Ref;
      To : in CORBA.Float)
   is
      Arg_Name_U_To : PolyORB.Types.Identifier
        := PolyORB.Types.To_PolyORB_String ("To");
      Argument_U_To : CORBA.Any
        := CORBA.To_Any
        (To);

      Operation_Name_U : constant Standard.String
        := "_set_value";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      PolyORB.Any.NVList.Add_Item
        (Arg_List_U,
         Arg_Name_U_To,
         Argument_U_To,
         PolyORB.Any.ARG_IN);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (CORBA.TC_Void),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.
   end Set_value;

   --  The visible Is_A object reference
   --  operation (a dispatching operation
   --  of all object reference types).

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return False

        or else Is_A (Logical_Type_Id)
         --  Locally check class membership for this interface

        or else CORBA.Object.Is_A
                 (CORBA.Object.Ref (Self), Logical_Type_Id);
         --  Fall back to a remote membership check (may involve
         --  an actual request invocation on Self).

   end Is_A;

   --  The internal Is_A implementation for
   --  this interface.

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return CORBA.Is_Equivalent
        (Logical_Type_Id,
         module.m11.I111.Repository_Id)
        or else CORBA.Is_Equivalent
          (Logical_Type_Id,
           "IDL:omg.org/CORBA/Object:1.0")
        or else False;

   end Is_A;

end module.m11.I111;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
with CORBA.Object;
with PolyORB.Any;
pragma Elaborate_All (PolyORB.Any);
pragma Warnings (Off, PolyORB.Any);

package module.m11.I111.Helper is

   pragma Elaborate_Body;

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return module.m11.I111.Ref;
   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return module.m11.I111.Ref;

   TC_I111 : CORBA.TypeCode.Object
     := PolyORB.Any.TypeCode.TC_Object;

   function From_Any (Item : in CORBA.Any)
      return module.m11.I111.Ref;

   function To_Any
     (Item : in module.m11.I111.Ref)
     return CORBA.Any;

end module.m11.I111.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with CORBA;
with CORBA.Object.Helper;
with CORBA.Object;

package body module.m11.I111.Helper is

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return module.m11.I111.Ref
   is
      Result : module.m11.I111.Ref;
   begin
      Set (Result,
           CORBA.Object.Object_Of (The_Ref));
      return Result;
   end Unchecked_To_Ref;

   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return module.m11.I111.Ref
   is
      use CORBA;
   begin
      if CORBA.Object.Is_Nil (The_Ref)
        or else CORBA.Object.Is_A (The_Ref, Repository_Id) then
         return Unchecked_To_Ref (The_Ref);
      end if;
      CORBA.Raise_Bad_Param (Default_Sys_Member);
   end To_Ref;

   function From_Any (Item : in CORBA.Any)
      return module.m11.I111.Ref is
   begin
      return To_Ref (CORBA.Object.Helper.From_Any (Item));
   end From_Any;

   function To_Any
     (Item : in module.m11.I111.Ref)
     return CORBA.Any is
      A : CORBA.Any := CORBA.Object.Helper.To_Any
        (CORBA.Object.Ref (Item));
   begin
      CORBA.Set_Type (A, TC_I111);
      return A;
   end To_Any;
   procedure Deferred_Initialization is
   begin
      null;
   
      declare
         Name : CORBA.String := CORBA.To_CORBA_String ("I111");
         Id : CORBA.String := CORBA.To_CORBA_String ("IDL:module/m11/I111:1.0");
      begin
         CORBA.TypeCode.Add_Parameter (TC_I111, CORBA.To_Any (Name));
         CORBA.TypeCode.Add_Parameter (TC_I111, CORBA.To_Any (Id));
      end;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.m11.I111.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.m11.I111.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package module.m11.I111.IR_Info is

   procedure Register_IR_Info;

   function IR_value
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_I111
     return CORBA.Repository_Root.IRObject.Ref;

end module.m11.I111.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with module.m11.IR_Info;
with CORBA.Repository_Root.Repository;
with CORBA.Repository_Root.InterfaceDef.Helper;
with CORBA.Object;
with CORBA.Repository_Root.IRObject.Helper;
with CORBA.Repository_Root.Container.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body module.m11.I111.IR_Info is


   Cached_IR_value :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_value
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (module.m11.I111.IR_Info.IR_I111);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_value)
      then
         return Cached_IR_value;
      end if;

      Cached_IR_value :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("value")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_value)
      then
         return Cached_IR_value;
      end if;
      Cached_IR_value
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.InterfaceDef.Create_Attribute
        (CORBA.Repository_Root.InterfaceDef.Helper.To_Ref
         (Container_Ref),
         id => CORBA.To_CORBA_String
           (value_Repository_Id),
         name => CORBA.To_CORBA_String
           ("value"),
         version => CORBA.Repository_Root.To_CORBA_String
           ("1.0"),
         IDL_type =>
         IDLType.Helper.To_Ref
         (CORBA.Repository_Root.Repository.Get_Primitive
           (Get_IR_Root, CORBA.Repository_Root.pk_float)),
         mode => ATTR_NORMAL));
      return Cached_IR_value;
   end IR_value;

   Cached_IR_I111 :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_I111
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (module.m11.IR_Info.IR_m11);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_I111)
      then
         return Cached_IR_I111;
      end if;

      Cached_IR_I111 :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("I111")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_I111)
      then
         return Cached_IR_I111;
      end if;

      declare
         Base_Ifs : InterfaceDefSeq;
      begin
         Cached_IR_I111
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.Container.Create_Interface
           (Container_Ref,
            CORBA.To_CORBA_String
              (Repository_Id),
            CORBA.To_CORBA_String
              ("I111"),
            To_CORBA_String ("1.0"),
            Base_Ifs,
            FALSE));

         return Cached_IR_I111;
      end;
   end IR_I111;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_value;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_I111;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end module.m11.I111.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package module.m11.I111.Skel is

   pragma Elaborate_Body;

end module.m11.I111.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with CORBA.ORB;
with CORBA.NVList;
with CORBA.ServerRequest;
with module.m11.I111.Impl;
with CORBA;
pragma Elaborate_All (CORBA);
with PortableServer;
pragma Elaborate_All (PortableServer);
with PolyORB.CORBA_P.Exceptions;

package body module.m11.I111.Skel is

   --  Skeleton subprograms

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean;

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean is
   begin
      return Obj.all in module.m11.I111.Impl.Object'Class;
   end Servant_Is_A;

   procedure Invoke
     (Self : PortableServer.Servant;
      Request : in CORBA.ServerRequest.Object_ptr)
   is
      Operation : constant Standard.String
         := CORBA.To_Standard_String
              (CORBA.ServerRequest.Operation
               (Request.all));
      Arg_List_U : CORBA.NVList.Ref;
   begin
      CORBA.ORB.Create_List (0, Arg_List_U);
      if Operation = "_is_a" then
         declare
            Type_Id            : CORBA.String;
            Arg_Name_U_Type_Id : constant CORBA.Identifier
            := CORBA.To_CORBA_String ("Type_Id");
            Argument_U_Type_Id : CORBA.Any := CORBA.To_Any (Type_Id);
            
            Result_U           : CORBA.Boolean;
         begin
            CORBA.NVList.Add_Item
            (Arg_List_U,
            Arg_Name_U_Type_Id,
            Argument_U_Type_Id,
            CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               Type_Id :=
                 CORBA.From_Any (Argument_U_Type_Id);

               --  Call implementation
               Result_U := module.m11.I111.Is_A
                 (CORBA.To_Standard_String (Type_Id));
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
            (Request,
            CORBA.To_Any (
            Result_U));
            return;
         end;

      elsif Operation = "_get_value" then

         declare
            Result_U      : CORBA.Float;
         begin

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any


               --  Call implementation
               Result_U := module.m11.I111.Impl.get_value
                 (module.m11.I111.Impl.Object'Class (Self.all)'Access);
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
              (Request, 
               CORBA.To_Any (
               Result_U));
            return;
         end;

      elsif Operation = "_set_value" then

         declare
            To            : CORBA.Float;
            Arg_Name_U_To : constant CORBA.Identifier
              := CORBA.To_CORBA_String ("To");
            Argument_U_To : CORBA.Any := CORBA.Get_Empty_Any
              (CORBA.TC_Float);

         begin
            CORBA.NVList.Add_Item
              (Arg_List_U,
               Arg_Name_U_To,
               Argument_U_To,
               CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               To :=
                 CORBA.From_Any (Argument_U_To);

               --  Call implementation
               module.m11.I111.Impl.set_value
                 (module.m11.I111.Impl.Object'Class (Self.all)'Access,
                  To);
            end;
            return;
         end;

      else
         CORBA.Raise_Bad_Operation (CORBA.Default_Sys_Member);
      end if;
   exception
      when E : others =>
         begin
            CORBA.ServerRequest.Set_Exception
              (Request,
               PolyORB.CORBA_P.Exceptions.System_Exception_To_Any (E));
            return;
         end;
   end Invoke;
   procedure Deferred_Initialization is
   begin
      null;
      PortableServer.Register_Skeleton
        (CORBA.To_CORBA_String (module.m11.I111.Repository_Id),
         Servant_Is_A'Access,
         Invoke'Access);
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.m11.I111.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.m11.I111.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package module.m11 is

   --  Interface I111

   Repository_Id : constant Standard.String
     := "IDL:module/m11:1.0";

end module.m11;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body module.m11.Helper is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.m11.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.m11.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package module.m11.IR_Info is

   procedure Register_IR_Info;

   function IR_m11
     return CORBA.Repository_Root.IRObject.Ref;

end module.m11.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Object;
with module.IR_Info;
with CORBA.Repository_Root.IRObject.Helper;
with CORBA.Repository_Root.Container.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body module.m11.IR_Info is


   Cached_IR_m11 :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_m11
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (module.IR_Info.IR_module);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_m11)
      then
         return Cached_IR_m11;
      end if;

      Cached_IR_m11 :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("m11")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_m11)
      then
         return Cached_IR_m11;
      end if;
      Cached_IR_m11
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Create_Module
        (Container_Ref,
         CORBA.To_CORBA_String
           (Repository_Id),
         CORBA.To_CORBA_String
           ("m11"),
         CORBA.Repository_Root.To_CORBA_String
           ("1.0")));

      return Cached_IR_m11;
   end IR_m11;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_m11;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end module.m11.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body module.m11.Skel is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.m11.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.m11.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body module.Helper is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package module.IR_Info is

   procedure Register_IR_Info;

   function IR_module
     return CORBA.Repository_Root.IRObject.Ref;

end module.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Object;
with CORBA.Repository_Root.IRObject.Helper;
with CORBA.Repository_Root.Container.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body module.IR_Info is


   Cached_IR_module :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_module
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref (Get_IR_Root);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_module)
      then
         return Cached_IR_module;
      end if;

      Cached_IR_module :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("module")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_module)
      then
         return Cached_IR_module;
      end if;
      Cached_IR_module
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Create_Module
        (Container_Ref,
         CORBA.To_CORBA_String
           (Repository_Id),
         CORBA.To_CORBA_String
           ("module"),
         CORBA.Repository_Root.To_CORBA_String
           ("1.0")));

      return Cached_IR_module;
   end IR_module;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_module;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end module.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body module.Skel is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"module.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end module.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package m2 is

   --  Interface I21

   Repository_Id : constant Standard.String
     := "IDL:m2:1.0";

end m2;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
pragma Elaborate_All (CORBA);
with CORBA.Object;

package m2.I21 is

   type Ref is
     new CORBA.Object.Ref with null record;

   type new_bool is
     new CORBA.Boolean;

   new_bool_Repository_Id : constant Standard.String
     := "IDL:m2/I21/new_bool:1.0";

   function is_greater
     (Self : in Ref;
      f1 : in CORBA.Float;
      f2 : in CORBA.Float)
     return m2.I21.new_bool;

   is_greater_Repository_Id : constant Standard.String
     := "IDL:m2/I21/is_greater:1.0";

   Repository_Id : constant Standard.String
     := "IDL:m2/I21:1.0";

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

private

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

end m2.I21;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with m2.I21.Helper;
with CORBA.Object;
with PolyORB.Types;
with PolyORB.Requests;
with PolyORB.Any.NVList;
with PolyORB.CORBA_P.Exceptions;
with CORBA;
 use CORBA;
pragma Elaborate_All (CORBA);

package body m2.I21 is

   function is_greater
     (Self : Ref;
      f1 : in CORBA.Float;
      f2 : in CORBA.Float)
     return m2.I21.new_bool
   is
      Arg_Name_U_f1 : PolyORB.Types.Identifier
        := PolyORB.Types.To_PolyORB_String ("f1");
      Argument_U_f1 : CORBA.Any
        := CORBA.To_Any
        (f1);
      Arg_Name_U_f2 : PolyORB.Types.Identifier
        := PolyORB.Types.To_PolyORB_String ("f2");
      Argument_U_f2 : CORBA.Any
        := CORBA.To_Any
        (f2);

      Operation_Name_U : constant Standard.String
        := "is_greater";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      PolyORB.Any.NVList.Add_Item
        (Arg_List_U,
         Arg_Name_U_f1,
         Argument_U_f1,
         PolyORB.Any.ARG_IN);
      PolyORB.Any.NVList.Add_Item
        (Arg_List_U,
         Arg_Name_U_f2,
         Argument_U_f2,
         PolyORB.Any.ARG_IN);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (m2.I21.Helper.TC_new_bool),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.

      --  Retrieve return value.
      return m2.I21.Helper.From_Any
        (Result_U.Argument);
   end is_greater;

   --  The visible Is_A object reference
   --  operation (a dispatching operation
   --  of all object reference types).

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return False

        or else Is_A (Logical_Type_Id)
         --  Locally check class membership for this interface

        or else CORBA.Object.Is_A
                 (CORBA.Object.Ref (Self), Logical_Type_Id);
         --  Fall back to a remote membership check (may involve
         --  an actual request invocation on Self).

   end Is_A;

   --  The internal Is_A implementation for
   --  this interface.

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return CORBA.Is_Equivalent
        (Logical_Type_Id,
         m2.I21.Repository_Id)
        or else CORBA.Is_Equivalent
          (Logical_Type_Id,
           "IDL:omg.org/CORBA/Object:1.0")
        or else False;

   end Is_A;

end m2.I21;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
pragma Elaborate_All (CORBA);
with CORBA.Object;
with PolyORB.Any;
pragma Elaborate_All (PolyORB.Any);
pragma Warnings (Off, PolyORB.Any);

package m2.I21.Helper is

   pragma Elaborate_Body;

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return m2.I21.Ref;
   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return m2.I21.Ref;

   TC_I21 : CORBA.TypeCode.Object
     := PolyORB.Any.TypeCode.TC_Object;

   function From_Any (Item : in CORBA.Any)
      return m2.I21.Ref;

   function To_Any
     (Item : in m2.I21.Ref)
     return CORBA.Any;

   TC_new_bool : CORBA.TypeCode.Object := CORBA.TypeCode.TC_Alias;

   function From_Any (Item : in CORBA.Any)
      return m2.I21.new_bool;

   function To_Any
     (Item : in m2.I21.new_bool)
     return CORBA.Any;

end m2.I21.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with CORBA;
with CORBA.Object.Helper;
with CORBA.Object;

package body m2.I21.Helper is

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return m2.I21.Ref
   is
      Result : m2.I21.Ref;
   begin
      Set (Result,
           CORBA.Object.Object_Of (The_Ref));
      return Result;
   end Unchecked_To_Ref;

   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return m2.I21.Ref
   is
      use CORBA;
   begin
      if CORBA.Object.Is_Nil (The_Ref)
        or else CORBA.Object.Is_A (The_Ref, Repository_Id) then
         return Unchecked_To_Ref (The_Ref);
      end if;
      CORBA.Raise_Bad_Param (Default_Sys_Member);
   end To_Ref;

   function From_Any (Item : in CORBA.Any)
      return m2.I21.Ref is
   begin
      return To_Ref (CORBA.Object.Helper.From_Any (Item));
   end From_Any;

   function To_Any
     (Item : in m2.I21.Ref)
     return CORBA.Any is
      A : CORBA.Any := CORBA.Object.Helper.To_Any
        (CORBA.Object.Ref (Item));
   begin
      CORBA.Set_Type (A, TC_I21);
      return A;
   end To_Any;

   function From_Any (Item : in CORBA.Any)
      return m2.I21.new_bool is
      Result : constant CORBA.Boolean := CORBA.From_Any (Item);
   begin
      return m2.I21.new_bool (Result);
   end From_Any;

   function To_Any
     (Item : in m2.I21.new_bool)
     return CORBA.Any is
      Result : CORBA.Any := CORBA.To_Any (CORBA.Boolean (Item));
   begin
      CORBA.Set_Type (Result, TC_new_bool);
      return Result;
   end To_Any;
   procedure Deferred_Initialization is
   begin
      null;
   
      declare
         Name : CORBA.String := CORBA.To_CORBA_String ("I21");
         Id : CORBA.String := CORBA.To_CORBA_String ("IDL:m2/I21:1.0");
      begin
         CORBA.TypeCode.Add_Parameter (TC_I21, CORBA.To_Any (Name));
         CORBA.TypeCode.Add_Parameter (TC_I21, CORBA.To_Any (Id));
      end;
   
      declare
         Name : CORBA.String := CORBA.To_CORBA_String ("new_bool");
         Id : CORBA.String := CORBA.To_CORBA_String ("IDL:m2/I21/new_bool:1.0");
      begin
         CORBA.TypeCode.Add_Parameter (TC_new_bool, CORBA.To_Any (Name));
         CORBA.TypeCode.Add_Parameter (TC_new_bool, CORBA.To_Any (Id));
         CORBA.TypeCode.Add_Parameter (TC_new_bool, CORBA.To_Any (CORBA.TC_Boolean));
      end;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"m2.I21.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end m2.I21.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package m2.I21.IR_Info is

   procedure Register_IR_Info;

   function IR_new_bool
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_is_greater
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_I21
     return CORBA.Repository_Root.IRObject.Ref;

end m2.I21.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with m2.IR_Info;
with CORBA.Repository_Root.InterfaceDef.Helper;
with CORBA;
with CORBA.Repository_Root.Repository;
with CORBA.Repository_Root.IDLType.Helper;
with CORBA.Repository_Root.IDLType;
with CORBA.Object;
with CORBA.Repository_Root.Container.Helper;
with CORBA.Repository_Root.IRObject.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body m2.I21.IR_Info is


   Cached_IR_new_bool :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_new_bool
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (m2.I21.IR_Info.IR_I21);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_new_bool)
      then
         return Cached_IR_new_bool;
      end if;

      Cached_IR_new_bool :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("new_bool")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_new_bool)
      then
         return Cached_IR_new_bool;
      end if;

      Cached_IR_new_bool
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Create_Alias
         (Container_Ref,
         id => CORBA.To_CORBA_String
           (new_bool_Repository_Id),
         name => CORBA.To_CORBA_String
           ("new_bool"),
         version => CORBA.Repository_Root.To_CORBA_String
           ("1.0"),
         original_type => IDLType.Convert_Forward.To_Forward
           (IDLType.Helper.To_Ref
            (CORBA.Repository_Root.Repository.Get_Primitive
              (Get_IR_Root, CORBA.Repository_Root.pk_boolean)))));
      return Cached_IR_new_bool;
   end IR_new_bool;

   Cached_IR_is_greater :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_is_greater
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (m2.I21.IR_Info.IR_I21);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_is_greater)
      then
         return Cached_IR_is_greater;
      end if;

      Cached_IR_is_greater :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("is_greater")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_is_greater)
      then
         return Cached_IR_is_greater;
      end if;

      declare
         Params : ParDescriptionSeq;
         Exceptions : ExceptionDefSeq;
         Contexts : ContextIdSeq;
      begin
         CORBA.Repository_Root.Append
           (Params,
            ParameterDescription'
            (name => CORBA.To_CORBA_String ("f1"),
             IDL_type =>
               CORBA.TC_Float,
             type_def => IDLType.Convert_Forward.To_Forward
               (IDLType.Helper.To_Ref
               (CORBA.Repository_Root.Repository.Get_Primitive
                 (Get_IR_Root, CORBA.Repository_Root.pk_float))),
             mode => PARAM_IN));
         CORBA.Repository_Root.Append
           (Params,
            ParameterDescription'
            (name => CORBA.To_CORBA_String ("f2"),
             IDL_type =>
               CORBA.TC_Float,
             type_def => IDLType.Convert_Forward.To_Forward
               (IDLType.Helper.To_Ref
               (CORBA.Repository_Root.Repository.Get_Primitive
                 (Get_IR_Root, CORBA.Repository_Root.pk_float))),
             mode => PARAM_IN));
         Cached_IR_is_greater
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.InterfaceDef.Create_Operation
           (CORBA.Repository_Root.InterfaceDef.Helper.To_Ref
            (Container_Ref),
            id => CORBA.To_CORBA_String
              (is_greater_Repository_Id),
            name => CORBA.To_CORBA_String
              ("is_greater"),
            version => CORBA.Repository_Root.To_CORBA_String
              ("1.0"),
            IDL_result => IDLType.Helper.To_Ref
              (m2.I21.IR_Info.IR_new_bool),
            mode => OP_NORMAL,
            params => Params,
            exceptions => Exceptions,
            contexts => Contexts));
      end;
      return Cached_IR_is_greater;
   end IR_is_greater;

   Cached_IR_I21 :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_I21
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (m2.IR_Info.IR_m2);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_I21)
      then
         return Cached_IR_I21;
      end if;

      Cached_IR_I21 :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("I21")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_I21)
      then
         return Cached_IR_I21;
      end if;

      declare
         Base_Ifs : InterfaceDefSeq;
      begin
         Cached_IR_I21
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.Container.Create_Interface
           (Container_Ref,
            CORBA.To_CORBA_String
              (Repository_Id),
            CORBA.To_CORBA_String
              ("I21"),
            To_CORBA_String ("1.0"),
            Base_Ifs,
            FALSE));

         return Cached_IR_I21;
      end;
   end IR_I21;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_new_bool;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_is_greater;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_I21;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end m2.I21.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package m2.I21.Skel is

   pragma Elaborate_Body;

end m2.I21.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with m2.I21.Helper;
with CORBA.ORB;
with CORBA.NVList;
with CORBA.ServerRequest;
with m2.I21.Impl;
with CORBA;
pragma Elaborate_All (CORBA);
with PortableServer;
pragma Elaborate_All (PortableServer);
with PolyORB.CORBA_P.Exceptions;

package body m2.I21.Skel is

   --  Skeleton subprograms

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean;

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean is
   begin
      return Obj.all in m2.I21.Impl.Object'Class;
   end Servant_Is_A;

   procedure Invoke
     (Self : PortableServer.Servant;
      Request : in CORBA.ServerRequest.Object_ptr)
   is
      Operation : constant Standard.String
         := CORBA.To_Standard_String
              (CORBA.ServerRequest.Operation
               (Request.all));
      Arg_List_U : CORBA.NVList.Ref;
   begin
      CORBA.ORB.Create_List (0, Arg_List_U);
      if Operation = "_is_a" then
         declare
            Type_Id            : CORBA.String;
            Arg_Name_U_Type_Id : constant CORBA.Identifier
            := CORBA.To_CORBA_String ("Type_Id");
            Argument_U_Type_Id : CORBA.Any := CORBA.To_Any (Type_Id);
            
            Result_U           : CORBA.Boolean;
         begin
            CORBA.NVList.Add_Item
            (Arg_List_U,
            Arg_Name_U_Type_Id,
            Argument_U_Type_Id,
            CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               Type_Id :=
                 CORBA.From_Any (Argument_U_Type_Id);

               --  Call implementation
               Result_U := m2.I21.Is_A
                 (CORBA.To_Standard_String (Type_Id));
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
            (Request,
            CORBA.To_Any (
            Result_U));
            return;
         end;

      elsif Operation = "is_greater" then

         declare
            f1            : CORBA.Float;
            Arg_Name_U_f1 : constant CORBA.Identifier
              := CORBA.To_CORBA_String ("f1");
            Argument_U_f1 : CORBA.Any := CORBA.Get_Empty_Any
              (CORBA.TC_Float);

            f2            : CORBA.Float;
            Arg_Name_U_f2 : constant CORBA.Identifier
              := CORBA.To_CORBA_String ("f2");
            Argument_U_f2 : CORBA.Any := CORBA.Get_Empty_Any
              (CORBA.TC_Float);

            Result_U      : m2.I21.new_bool;
         begin
            CORBA.NVList.Add_Item
              (Arg_List_U,
               Arg_Name_U_f1,
               Argument_U_f1,
               CORBA.ARG_IN);
            CORBA.NVList.Add_Item
              (Arg_List_U,
               Arg_Name_U_f2,
               Argument_U_f2,
               CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               f1 :=
                 CORBA.From_Any (Argument_U_f1);
               f2 :=
                 CORBA.From_Any (Argument_U_f2);

               --  Call implementation
               Result_U := m2.I21.Impl.is_greater
                 (m2.I21.Impl.Object'Class (Self.all)'Access,
                  f1,
                  f2);
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
              (Request, 
               m2.I21.Helper.To_Any (
               Result_U));
            return;
         end;

      else
         CORBA.Raise_Bad_Operation (CORBA.Default_Sys_Member);
      end if;
   exception
      when E : others =>
         begin
            CORBA.ServerRequest.Set_Exception
              (Request,
               PolyORB.CORBA_P.Exceptions.System_Exception_To_Any (E));
            return;
         end;
   end Invoke;
   procedure Deferred_Initialization is
   begin
      null;
      PortableServer.Register_Skeleton
        (CORBA.To_CORBA_String (m2.I21.Repository_Id),
         Servant_Is_A'Access,
         Invoke'Access);
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"m2.I21.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end m2.I21.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body m2.Helper is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"m2.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end m2.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package m2.IR_Info is

   procedure Register_IR_Info;

   function IR_m2
     return CORBA.Repository_Root.IRObject.Ref;

end m2.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Object;
with CORBA.Repository_Root.IRObject.Helper;
with CORBA.Repository_Root.Container.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body m2.IR_Info is


   Cached_IR_m2 :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_m2
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref (Get_IR_Root);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_m2)
      then
         return Cached_IR_m2;
      end if;

      Cached_IR_m2 :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("m2")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_m2)
      then
         return Cached_IR_m2;
      end if;
      Cached_IR_m2
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Create_Module
        (Container_Ref,
         CORBA.To_CORBA_String
           (Repository_Id),
         CORBA.To_CORBA_String
           ("m2"),
         CORBA.Repository_Root.To_CORBA_String
           ("1.0")));

      return Cached_IR_m2;
   end IR_m2;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_m2;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end m2.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body m2.Skel is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"m2.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end m2.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package tin_IDL_File is

   --  Module module

   --  Module m2

end tin_IDL_File;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body tin_IDL_File.Helper is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"tin_IDL_File.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end tin_IDL_File.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package tin_IDL_File.IR_Info is

   procedure Register_IR_Info;

end tin_IDL_File.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body tin_IDL_File.IR_Info is

   
   procedure Register_IR_Info is
   begin
      null;
   end Register_IR_Info;

end tin_IDL_File.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body tin_IDL_File.Skel is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"tin_IDL_File.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end tin_IDL_File.Skel;
