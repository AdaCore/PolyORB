-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
pragma Elaborate_All (CORBA);
with CORBA.Object;

package EnumTests is

   type Ref is
     new CORBA.Object.Ref with null record;

   type Color is
     (Red,
      Blue,
      Green);

   Color_Repository_Id : constant Standard.String
     := "IDL:EnumTests/Color:1.0";

   use type EnumTests.Color;
   Rouge : constant EnumTests.Color
     := EnumTests.Red;

   attr_enum_Repository_Id : constant Standard.String
     := "IDL:EnumTests/attr_enum:1.0";

   function Get_attr_enum
     (Self : in Ref)
     return EnumTests.Color;

   procedure Set_attr_enum
     (Self : in Ref;
      To : in EnumTests.Color);

   procedure modif_enum
     (Self : in Ref;
      C : in out EnumTests.Color);

   modif_enum_Repository_Id : constant Standard.String
     := "IDL:EnumTests/modif_enum:1.0";

   Repository_Id : constant Standard.String
     := "IDL:EnumTests:1.0";

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

private

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean;

end EnumTests;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with EnumTests.Helper;
with CORBA.Object;
with PolyORB.Types;
with PolyORB.Requests;
with PolyORB.Any.NVList;
with PolyORB.CORBA_P.Exceptions;
with CORBA;
 use CORBA;
pragma Elaborate_All (CORBA);

package body EnumTests is

   function Get_attr_enum
     (Self : Ref)
     return EnumTests.Color
   is

      Operation_Name_U : constant Standard.String
        := "_get_attr_enum";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (EnumTests.Helper.TC_Color),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.

      --  Retrieve return value.
      return EnumTests.Helper.From_Any
        (Result_U.Argument);
   end Get_attr_enum;

   procedure Set_attr_enum
     (Self : Ref;
      To : in EnumTests.Color)
   is
      Arg_Name_U_To : PolyORB.Types.Identifier
        := PolyORB.Types.To_PolyORB_String ("To");
      Argument_U_To : CORBA.Any
        := EnumTests.Helper.To_Any
        (To);

      Operation_Name_U : constant Standard.String
        := "_set_attr_enum";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      PolyORB.Any.NVList.Add_Item
        (Arg_List_U,
         Arg_Name_U_To,
         Argument_U_To,
         PolyORB.Any.ARG_IN);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (CORBA.TC_Void),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.
   end Set_attr_enum;

   procedure modif_enum
     (Self : Ref;
      C : in out EnumTests.Color)
   is
      Arg_Name_U_C : PolyORB.Types.Identifier
        := PolyORB.Types.To_PolyORB_String ("C");
      Argument_U_C : CORBA.Any
        := EnumTests.Helper.To_Any
        (C);

      Operation_Name_U : constant Standard.String
        := "modif_enum";
      Self_Ref_U : CORBA.Object.Ref
        := CORBA.Object.Ref (Self);

      Request_U : PolyORB.Requests.Request_Access;
      Arg_List_U : PolyORB.Any.NVList.Ref;
      Result_U : PolyORB.Any.NamedValue;
      Result_Name_U : CORBA.String := To_CORBA_String ("Result");
   begin

      if CORBA.Object.Is_Nil (Self_Ref_U) then
         CORBA.Raise_Inv_Objref (Default_Sys_Member);
      end if;

      --  Create argument list
      PolyORB.Any.NVList.Create
        (Arg_List_U);
      PolyORB.Any.NVList.Add_Item
        (Arg_List_U,
         Arg_Name_U_C,
         Argument_U_C,
         PolyORB.Any.ARG_INOUT);
      --  Set result type (maybe void)
      Result_U
        := (Name => PolyORB.Types.Identifier (Result_Name_U),
            Argument => Get_Empty_Any
        (CORBA.TC_Void),
         Arg_Modes => 0);

      PolyORB.Requests.Create_Request
        (Target    => CORBA.Object.To_PolyORB_Ref
         (CORBA.Object.Ref (Self)),
         Operation => Operation_Name_U,
         Arg_List  => Arg_List_U,
         Result    => Result_U,
         Req       => Request_U);

      PolyORB.Requests.Invoke (Request_U);
      if not Is_Empty (Request_U.Exception_Info) then
         Result_U.Argument := Request_U.Exception_Info;
         PolyORB.Requests.Destroy_Request
           (Request_U);
         PolyORB.CORBA_P.Exceptions.Raise_From_Any
           (Result_U.Argument);
      end if;
      PolyORB.Requests.Destroy_Request
        (Request_U);

      --  Request has been synchronously invoked.

      --  Retrieve 'out' argument values.

      C := EnumTests.Helper.From_Any
        (Argument_U_C);
   end modif_enum;

   --  The visible Is_A object reference
   --  operation (a dispatching operation
   --  of all object reference types).

   function Is_A
     (Self : Ref;
      Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return False

        or else Is_A (Logical_Type_Id)
         --  Locally check class membership for this interface

        or else CORBA.Object.Is_A
                 (CORBA.Object.Ref (Self), Logical_Type_Id);
         --  Fall back to a remote membership check (may involve
         --  an actual request invocation on Self).

   end Is_A;

   --  The internal Is_A implementation for
   --  this interface.

   function Is_A
     (Logical_Type_Id : Standard.String)
     return CORBA.Boolean
   is
   begin
      return CORBA.Is_Equivalent
        (Logical_Type_Id,
         EnumTests.Repository_Id)
        or else CORBA.Is_Equivalent
          (Logical_Type_Id,
           "IDL:omg.org/CORBA/Object:1.0")
        or else False;

   end Is_A;

end EnumTests;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA;
with CORBA.Object;
with PolyORB.Any;
pragma Elaborate_All (PolyORB.Any);
pragma Warnings (Off, PolyORB.Any);

package EnumTests.Helper is

   pragma Elaborate_Body;

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return EnumTests.Ref;
   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return EnumTests.Ref;

   TC_EnumTests : CORBA.TypeCode.Object
     := PolyORB.Any.TypeCode.TC_Object;

   function From_Any (Item : in CORBA.Any)
      return EnumTests.Ref;

   function To_Any
     (Item : in EnumTests.Ref)
     return CORBA.Any;

   TC_Color : CORBA.TypeCode.Object :=
      CORBA.TypeCode.TC_Enum;

   function From_Any (Item : in CORBA.Any)
      return EnumTests.Color;

   function To_Any
     (Item : in EnumTests.Color)
     return CORBA.Any;

end EnumTests.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with CORBA;
with CORBA.Object.Helper;
with CORBA.Object;

package body EnumTests.Helper is

   function Unchecked_To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return EnumTests.Ref
   is
      Result : EnumTests.Ref;
   begin
      Set (Result,
           CORBA.Object.Object_Of (The_Ref));
      return Result;
   end Unchecked_To_Ref;

   function To_Ref
     (The_Ref : in CORBA.Object.Ref'Class)
     return EnumTests.Ref
   is
      use CORBA;
   begin
      if CORBA.Object.Is_Nil (The_Ref)
        or else CORBA.Object.Is_A (The_Ref, Repository_Id) then
         return Unchecked_To_Ref (The_Ref);
      end if;
      CORBA.Raise_Bad_Param (Default_Sys_Member);
   end To_Ref;

   function From_Any (Item : in CORBA.Any)
      return EnumTests.Ref is
   begin
      return To_Ref (CORBA.Object.Helper.From_Any (Item));
   end From_Any;

   function To_Any
     (Item : in EnumTests.Ref)
     return CORBA.Any is
      A : CORBA.Any := CORBA.Object.Helper.To_Any
        (CORBA.Object.Ref (Item));
   begin
      CORBA.Set_Type (A, TC_EnumTests);
      return A;
   end To_Any;

   function From_Any (Item : in CORBA.Any)
      return EnumTests.Color is
      Index : CORBA.Any :=
         CORBA.Get_Aggregate_Element (Item,
                                      CORBA.TC_Unsigned_Long,
                                      CORBA.Unsigned_Long (0));
      Position : constant CORBA.Unsigned_Long := CORBA.From_Any (Index);
   begin
      return Color'Val (Position);
   end From_Any;

   function To_Any
     (Item : in EnumTests.Color)
     return CORBA.Any is
      Result : CORBA.Any :=
         CORBA.Get_Empty_Any_Aggregate (TC_Color);
   begin
      CORBA.Add_Aggregate_Element
         (Result,
          CORBA.To_Any (CORBA.Unsigned_Long (Color'Pos (Item))));
      return Result;
   end To_Any;
   procedure Deferred_Initialization is
   begin
      null;
   
      declare
         Name : CORBA.String := CORBA.To_CORBA_String ("EnumTests");
         Id : CORBA.String := CORBA.To_CORBA_String ("IDL:EnumTests:1.0");
      begin
         CORBA.TypeCode.Add_Parameter (TC_EnumTests, CORBA.To_Any (Name));
         CORBA.TypeCode.Add_Parameter (TC_EnumTests, CORBA.To_Any (Id));
      end;
      declare
         Name : CORBA.String := CORBA.To_CORBA_String ("Color");
         Id : CORBA.String := CORBA.To_CORBA_String ("IDL:EnumTests/Color:1.0");
         Red_Name : CORBA.String := CORBA.To_CORBA_String ("Red");
         Blue_Name : CORBA.String := CORBA.To_CORBA_String ("Blue");
         Green_Name : CORBA.String := CORBA.To_CORBA_String ("Green");
      begin
         CORBA.TypeCode.Add_Parameter (TC_Color, CORBA.To_Any (Name));
         CORBA.TypeCode.Add_Parameter (TC_Color, CORBA.To_Any (Id));
         CORBA.TypeCode.Add_Parameter (TC_Color, CORBA.To_Any (Red_Name));
         CORBA.TypeCode.Add_Parameter (TC_Color, CORBA.To_Any (Blue_Name));
         CORBA.TypeCode.Add_Parameter (TC_Color, CORBA.To_Any (Green_Name));
      end;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"EnumTests.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end EnumTests.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IRObject;

package EnumTests.IR_Info is

   procedure Register_IR_Info;

   function IR_Color
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_attr_enum
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_modif_enum
     return CORBA.Repository_Root.IRObject.Ref;

   function IR_EnumTests
     return CORBA.Repository_Root.IRObject.Ref;

end EnumTests.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with CORBA.Repository_Root.IDLType.Helper;
with CORBA.Repository_Root.Repository;
with CORBA.Repository_Root.IDLType;
with EnumTests.Helper;
with CORBA.Repository_Root.InterfaceDef.Helper;
with CORBA.Object;
with CORBA.Repository_Root.IRObject.Helper;
with CORBA.Repository_Root.Container.Helper;
with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body EnumTests.IR_Info is


   Cached_IR_Color :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_Color
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (EnumTests.IR_Info.IR_EnumTests);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_Color)
      then
         return Cached_IR_Color;
      end if;

      Cached_IR_Color :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("Color")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_Color)
      then
         return Cached_IR_Color;
      end if;

      declare
         Members : EnumMemberSeq;
      begin
         CORBA.Repository_Root.Append
           (Members,
            CORBA.To_CORBA_String ("Red"));
         CORBA.Repository_Root.Append
           (Members,
            CORBA.To_CORBA_String ("Blue"));
         CORBA.Repository_Root.Append
           (Members,
            CORBA.To_CORBA_String ("Green"));
         Cached_IR_Color
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.Container.Create_Enum
           (Container_Ref,
            CORBA.To_CORBA_String
              (Color_Repository_Id),
            CORBA.To_CORBA_String
              ("Color"),
            CORBA.Repository_Root.To_CORBA_String
              ("1.0"),
            Members));
      end;

      return Cached_IR_Color;
   end IR_Color;

   Cached_IR_attr_enum :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_attr_enum
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (EnumTests.IR_Info.IR_EnumTests);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_attr_enum)
      then
         return Cached_IR_attr_enum;
      end if;

      Cached_IR_attr_enum :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("attr_enum")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_attr_enum)
      then
         return Cached_IR_attr_enum;
      end if;
      Cached_IR_attr_enum
        := CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.InterfaceDef.Create_Attribute
        (CORBA.Repository_Root.InterfaceDef.Helper.To_Ref
         (Container_Ref),
         id => CORBA.To_CORBA_String
           (attr_enum_Repository_Id),
         name => CORBA.To_CORBA_String
           ("attr_enum"),
         version => CORBA.Repository_Root.To_CORBA_String
           ("1.0"),
         IDL_type =>
         IDLType.Helper.To_Ref
         (EnumTests.IR_Info.IR_Color),
         mode => ATTR_NORMAL));
      return Cached_IR_attr_enum;
   end IR_attr_enum;

   Cached_IR_modif_enum :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_modif_enum
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref
        (EnumTests.IR_Info.IR_EnumTests);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_modif_enum)
      then
         return Cached_IR_modif_enum;
      end if;

      Cached_IR_modif_enum :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("modif_enum")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_modif_enum)
      then
         return Cached_IR_modif_enum;
      end if;

      declare
         Params : ParDescriptionSeq;
         Exceptions : ExceptionDefSeq;
         Contexts : ContextIdSeq;
      begin
         CORBA.Repository_Root.Append
           (Params,
            ParameterDescription'
            (name => CORBA.To_CORBA_String ("C"),
             IDL_type =>
               EnumTests.Helper.TC_Color,
             type_def => IDLType.Convert_Forward.To_Forward
               (IDLType.Helper.To_Ref
               (EnumTests.IR_Info.IR_Color)),
             mode => PARAM_INOUT));
         Cached_IR_modif_enum
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.InterfaceDef.Create_Operation
           (CORBA.Repository_Root.InterfaceDef.Helper.To_Ref
            (Container_Ref),
            id => CORBA.To_CORBA_String
              (modif_enum_Repository_Id),
            name => CORBA.To_CORBA_String
              ("modif_enum"),
            version => CORBA.Repository_Root.To_CORBA_String
              ("1.0"),
            IDL_result => IDLType.Helper.To_Ref
              (CORBA.Repository_Root.Repository.Get_Primitive
              (Get_IR_Root, CORBA.Repository_Root.pk_void)),
            mode => OP_NORMAL,
            params => Params,
            exceptions => Exceptions,
            contexts => Contexts));
      end;
      return Cached_IR_modif_enum;
   end IR_modif_enum;

   Cached_IR_EnumTests :
     CORBA.Repository_Root.IRObject.Ref;

   function IR_EnumTests
     return CORBA.Repository_Root.IRObject.Ref
   is
      Container_Ref : constant CORBA.Repository_Root.Container.Ref
        := CORBA.Repository_Root.Container.Helper.To_Ref (Get_IR_Root);
   begin
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_EnumTests)
      then
         return Cached_IR_EnumTests;
      end if;

      Cached_IR_EnumTests :=
        CORBA.Repository_Root.IRObject.Helper.To_Ref
        (CORBA.Repository_Root.Container.Lookup
         (Container_Ref,
          CORBA.To_CORBA_String ("EnumTests")));
      if not CORBA.Repository_Root.IRObject.Is_Nil
        (Cached_IR_EnumTests)
      then
         return Cached_IR_EnumTests;
      end if;

      declare
         Base_Ifs : InterfaceDefSeq;
      begin
         Cached_IR_EnumTests
           := CORBA.Repository_Root.IRObject.Helper.To_Ref
           (CORBA.Repository_Root.Container.Create_Interface
           (Container_Ref,
            CORBA.To_CORBA_String
              (Repository_Id),
            CORBA.To_CORBA_String
              ("EnumTests"),
            To_CORBA_String ("1.0"),
            Base_Ifs,
            FALSE));

         return Cached_IR_EnumTests;
      end;
   end IR_EnumTests;
   
   procedure Register_IR_Info is
   begin
      null;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_Color;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_attr_enum;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_modif_enum;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
      declare
         pragma Warnings (Off); --  WAG:3.15
         Dummy : CORBA.Object.Ref'Class
           := IR_EnumTests;
         pragma Warnings (On);  --  WAG:3.15
         pragma Warnings (Off); --  WAG:3.14
         pragma Unreferenced (Dummy);
         pragma Warnings (On);  --  WAG:3.14
      begin
         null;
      end;
   end Register_IR_Info;

end EnumTests.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package EnumTests.Skel is

   pragma Elaborate_Body;

end EnumTests.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);
with PolyORB.Any;
with EnumTests.Helper;
with CORBA.ORB;
with CORBA.NVList;
with CORBA.ServerRequest;
with EnumTests.Impl;
with CORBA;
pragma Elaborate_All (CORBA);
with PortableServer;
pragma Elaborate_All (PortableServer);
with PolyORB.CORBA_P.Exceptions;

package body EnumTests.Skel is

   --  Skeleton subprograms

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean;

   function Servant_Is_A
     (Obj : PortableServer.Servant)
     return Boolean is
   begin
      return Obj.all in EnumTests.Impl.Object'Class;
   end Servant_Is_A;

   procedure Invoke
     (Self : PortableServer.Servant;
      Request : in CORBA.ServerRequest.Object_ptr)
   is
      Operation : constant Standard.String
         := CORBA.To_Standard_String
              (CORBA.ServerRequest.Operation
               (Request.all));
      Arg_List_U : CORBA.NVList.Ref;
   begin
      CORBA.ORB.Create_List (0, Arg_List_U);
      if Operation = "_is_a" then
         declare
            Type_Id            : CORBA.String;
            Arg_Name_U_Type_Id : constant CORBA.Identifier
            := CORBA.To_CORBA_String ("Type_Id");
            Argument_U_Type_Id : CORBA.Any := CORBA.To_Any (Type_Id);
            
            Result_U           : CORBA.Boolean;
         begin
            CORBA.NVList.Add_Item
            (Arg_List_U,
            Arg_Name_U_Type_Id,
            Argument_U_Type_Id,
            CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               Type_Id :=
                 CORBA.From_Any (Argument_U_Type_Id);

               --  Call implementation
               Result_U := EnumTests.Is_A
                 (CORBA.To_Standard_String (Type_Id));
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
            (Request,
            CORBA.To_Any (
            Result_U));
            return;
         end;

      elsif Operation = "_get_attr_enum" then

         declare
            Result_U      : EnumTests.Color;
         begin

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any


               --  Call implementation
               Result_U := EnumTests.Impl.get_attr_enum
                 (EnumTests.Impl.Object'Class (Self.all)'Access);
            end;

            -- Set Result

            CORBA.ServerRequest.Set_Result
              (Request, 
               EnumTests.Helper.To_Any (
               Result_U));
            return;
         end;

      elsif Operation = "_set_attr_enum" then

         declare
            To            : EnumTests.Color;
            Arg_Name_U_To : constant CORBA.Identifier
              := CORBA.To_CORBA_String ("To");
            Argument_U_To : CORBA.Any := CORBA.Get_Empty_Any
              (EnumTests.Helper.TC_Color);

         begin
            CORBA.NVList.Add_Item
              (Arg_List_U,
               Arg_Name_U_To,
               Argument_U_To,
               CORBA.ARG_IN);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               To :=
                 EnumTests.Helper.From_Any (Argument_U_To);

               --  Call implementation
               EnumTests.Impl.set_attr_enum
                 (EnumTests.Impl.Object'Class (Self.all)'Access,
                  To);
            end;
            return;
         end;

      elsif Operation = "modif_enum" then

         declare
            C             : EnumTests.Color;
            Arg_Name_U_C  : constant CORBA.Identifier
              := CORBA.To_CORBA_String ("C");
            Argument_U_C  : CORBA.Any := CORBA.Get_Empty_Any
              (EnumTests.Helper.TC_Color);

         begin
            CORBA.NVList.Add_Item
              (Arg_List_U,
               Arg_Name_U_C,
               Argument_U_C,
               CORBA.ARG_INOUT);

            CORBA.ServerRequest.Arguments (Request, Arg_List_U);

            begin
               --  Convert arguments from their Any

               C :=
                 EnumTests.Helper.From_Any (Argument_U_C);

               --  Call implementation
               EnumTests.Impl.modif_enum
                 (EnumTests.Impl.Object'Class (Self.all)'Access,
                  C);
            end;

            --  Set out arguments.

            PolyORB.Any.Copy_Any_Value
              (Argument_U_C,
               EnumTests.Helper.To_Any
                 (C));

            return;
         end;

      else
         CORBA.Raise_Bad_Operation (CORBA.Default_Sys_Member);
      end if;
   exception
      when E : others =>
         begin
            CORBA.ServerRequest.Set_Exception
              (Request,
               PolyORB.CORBA_P.Exceptions.System_Exception_To_Any (E));
            return;
         end;
   end Invoke;
   procedure Deferred_Initialization is
   begin
      null;
      PortableServer.Register_Skeleton
        (CORBA.To_CORBA_String (EnumTests.Repository_Id),
         Servant_Is_A'Access,
         Invoke'Access);
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"EnumTests.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end EnumTests.Skel;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package tin_IDL_File is

   --  Interface EnumTests

end tin_IDL_File;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body tin_IDL_File.Helper is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"tin_IDL_File.Helper",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end tin_IDL_File.Helper;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

package tin_IDL_File.IR_Info is

   procedure Register_IR_Info;

end tin_IDL_File.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.CORBA_P.IR_Tools;
 use PolyORB.CORBA_P.IR_Tools;
with CORBA.Repository_Root;
 use CORBA.Repository_Root;

package body tin_IDL_File.IR_Info is

   
   procedure Register_IR_Info is
   begin
      null;
   end Register_IR_Info;

end tin_IDL_File.IR_Info;
-------------------------------------------------
--  This file has been generated automatically
--  by IDLAC (http://libre.act-europe.fr/polyorb/)
--
--  Do NOT hand-modify this file, as your
--  changes will be lost when you re-run the
--  IDL to Ada compiler.
-------------------------------------------------
pragma Style_Checks (Off);

with PolyORB.Utils.Strings;
with PolyORB.Initialization;
pragma Elaborate_All (PolyORB.Initialization);

package body tin_IDL_File.Skel is
   procedure Deferred_Initialization is
   begin
      null;
   end Deferred_Initialization;

begin
   declare
      use PolyORB.Initialization;
      use PolyORB.Initialization.String_Lists;
      use PolyORB.Utils.Strings;
   begin
      Register_Module
        (Module_Info'
         (Name      => +"tin_IDL_File.Skel",
          Conflicts => Empty,
          Depends   =>
                  Empty
          ,
          Provides  => Empty,
          Implicit  => False,
          Init      => Deferred_Initialization'Access));
   end;

end tin_IDL_File.Skel;
