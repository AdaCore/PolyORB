module Backend::BE_Ada::Nodes {

  /******************/
  /* Internal types */
  /******************/

  typedef octet   Mode_Id;
  typedef octet   Operator_Id;
  typedef long    Name_Id;
  typedef long    Value_Id;


  /******************/
  /* Internal nodes */
  /******************/

  interface Node_Id {
    Node_Id    Next_Node;
    Node_Id    FE_Node;
  };

  interface Definition : Node_Id {
    Node_Id    Defining_Identifier;
    Node_Id    Parent; 
  };

  interface List_Id {
    Node_Id    First_Node;
    Node_Id    Last_Node;
  };

  interface Defining_Identifier : Node_Id {
    Name_Id    Name;
    Node_Id    Corresponding_Node;
    Node_Id    Parent_Unit_Name;
  };

  interface Designator : Node_Id {
    boolean    Is_All;
    Node_Id    Defining_Identifier;
    Node_Id    Parent_Unit_Name;
  };

  interface Attribute_Designator : Defining_Identifier {
    Node_Id    Prefix; 
  }; 

  /*****************/
  /* Package nodes */
  /*****************/

  interface Declaration_List : List_Id {
  };

  interface Statement_List : List_Id {
  };

  interface Withed_Package : Definition {
    boolean    Used;
    boolean    Elaborated;
  };

  interface Withed_Packages : List_Id {
  };

  interface Package_Specification : Node_Id {
    Node_Id    Package_Declaration;
    List_Id    Withed_Packages;
    List_Id    Visible_Part;
    List_Id    Private_Part;
    boolean    Is_Runtime_Package;
    boolean    Is_Subunit_Package;
  };

  interface Package_Implementation : Node_Id {
    Node_Id    Package_Declaration;
    List_Id    Withed_Packages;
    List_Id    Declarations;
    List_Id    Statements;
    List_Id    Package_Initialization;  
  };

  interface Package_Declaration : Definition {
    Node_Id    IDL_Unit;
    Node_Id    Package_Specification;
    Node_Id    Package_Implementation;
  };

  interface Packages : List_Id {};
  interface IDL_Unit : Node_Id {
    Node_Id    Main_Package;
    Node_Id    Skeleton_Package;
    Node_Id    Implementation_Package;
    Node_Id    Helper_Package;
    List_Id    Packages;
  };

  interface Package_Instanciation : Definition {
    Node_Id    Original_Package;
    boolean    Is_Subunit_Package;
  };

  /********************/
  /* Subprogram nodes */
  /********************/

  interface Parameter_Specification : Definition {
    Mode_Id    Parameter_Mode;
    Node_Id    Parameter_Type;
  };

  interface Parameter_Profile : List_Id {};
  interface Subprogram_Specification : Definition {
    List_Id    Parameter_Profile;
    Node_Id    Return_Type;
    Node_Id    Renamed_Subprogram;
  };

  /* Subprogram Body */

  interface Subprogram_Implementation : Node_Id {
    Node_Id    Specification;
    List_Id    Declarations;
    List_Id    Statements;
  };

  interface Subprogram_Call : Definition {
    List_Id    Actual_Parameter_Part; 
  };
  
  interface Parameter_Association : Node_Id{
    Node_Id    Selector_Name; 
    Node_Id    Actual_Parameter; 
  };  

  interface Full_Type_Declaration : Definition {
    Node_Id    Type_Definition;
    Node_Id    Discriminant_Spec;
    boolean    Is_Subtype;
  };

  interface Enumeration_Literals : List_Id {};

  interface Enumeration_Type_Definition : Node_Id {
    List_Id    Enumeration_Literals;
  };

  interface Decimal_Type_Definition : Node_Id {
    Node_Id    Scale;
    Value_Id   Total;
  };
  
  /**************/
  /* Aggregates */
  /**************/

  interface Record_Aggregate : Node_Id {
    List_Id    Component_Association_List;
  };

  interface Component_Association : Definition {
    Node_Id    Expression; 
  };


  /****************/
  /* Statetements */
  /****************/

   /* block_statement ::= 
       [ statement_identifier ":" ] 
         [ "declare" declarative_part ] 
         "begin" 
         handled_sequence_of_statements 
         "end" [ statement_identifier ] ";"   */

  interface Block_Statement : Definition {
    List_Id    Declarative_Part; 
    List_Id    Statements;
    List_Id    Exception_Handler;
  };

  interface Elsif_Statement : Node_Id {
    Node_Id    Condition; 
    List_Id    Then_Statements;
  };

  interface If_Statement : Node_Id {
    Node_Id    Condition;
    List_Id    Then_Statements; 
    List_Id    Elsif_Statements; 
    List_Id    Else_Statements; 
  };

  interface Assignment_Statement : Definition {
    Node_Id    Expression;  
  };

  interface Return_Statement : Node_Id {
    Node_Id    Expression; 
  };

  interface For_Statement : Definition {
    Node_Id    Range_Constraint; 
    List_Id    Statements; 
  };

  interface Case_Statement_Alternative : Node_Id {
    List_Id    Discret_Choice_List; 
    List_Id    Statements; 
  };

  interface Case_Statement : Node_Id {
    Node_Id    Expression; 
    List_Id    Case_Statement_Alternatives; 
  };

  interface Case_Label : Node_Id {
    Node_Id    Expression; 
    Value_Id   Value; 
  };

  interface Pragma_Statement : Node_Id {
    Node_Id   Expression; 
  };

  interface Null_Statement : Node_Id {};

  /***************/
  /* Other nodes */
  /***************/

  interface Package_Instantiation : Definition {
    Node_Id      Generic_Package;
    List_Id      Parameter_List;  
  };


  interface Ada_Comment : Definition {
  };


  /**************/
  /* Type nodes */
  /**************/

  interface Access_Type_Definition : Node_Id {
    boolean    Is_All; 
    boolean    Is_Constant; 
    Node_Id    Subtype_Indication;
  };  

  interface Derived_Type_Definition : Definition {
    boolean    Is_Private_Extention; 
    boolean    Is_Abstract_Type;
    Node_Id    Subtype_Indication;
    Node_Id    Record_Extension_Part;
    boolean    Is_Subtype;
  };

  interface Record_Type_Definition : Node_Id{
    boolean    Is_Abstract_Type; 
    boolean    Is_Tagged_Type;
    boolean    Is_Limited_Type; 
    Node_Id    Record_Definition;
  };

  interface Component_Declaration : Definition {
    Node_Id    Subtype_Indication;
    Node_Id    Expression;
  };

  interface Component_List : List_Id {};
  interface Record_Definition : Node_Id {
    List_Id    Component_List;
  };

  interface Range_Constraints : List_Id {};
  interface Array_Type_Definition : Node_Id {
    List_Id    Range_Constraints;
    Node_Id    Component_Definition;
  };

  interface Range_Constraint : Node_Id {
    Value_Id   First;
    Value_Id   Last;
  };

  interface Variant_List : List_Id {};
  interface Variant_Part : Node_Id {
    List_Id    Variants;
    Node_Id    Discriminant;
  };

  interface Discrete_Choice_List : List_Id {};
  interface Variant : Node_Id {
    List_Id    Discrete_Choices;
    Node_Id    Component;
  };


  /********************/
  /* Enumeration type */
  /********************/

  interface Enumeration_Type : Definition {
    List_Id    Enumeration_Literals;
  };
  
  /***************/
  /* Array nodes */
  /***************/

  interface Array_Size_List : List_Id {};
  interface Array_Type : Node_Id {
    Node_Id    Index_Type;
    Node_Id    Component_Type;
    List_Id    Array_Sizes;
  };


  /****************/
  /* Object nodes */
  /****************/

  interface Object_Declaration: Definition {
    boolean    Constant_Present;
    Node_Id    Object_Definition;
    Node_Id    Expression;
  };

  interface Literal : Node_Id {
    Value_Id   Value;
    Node_Id    Parent_Designator;
  };

  interface Exception_Declaration : Definition {
  };

  interface BE_Ada_Instanciations : Node_Id {
    Node_Id    Stub_Package_Node;
    Node_Id    Stub_Type_Node;
    Node_Id    Helper_Package_Node;
    Node_Id    TC_Node;
    Node_Id    From_Any_Node;
    Node_Id    To_Any_Node;
  };
  
  interface BE_Ada : Node_Id {
    Node_Id    Stub_Node;
    Node_Id    Helper_Node;
    Node_Id    Skel_Node;
    Node_Id    Impl_Node;
    Node_Id    TC_Node;
    Node_Id    From_Any_Node;
    Node_Id    To_Any_Node;
    Node_Id    Type_Def_Node;
    Node_Id    BE_Ada_Instanciations;    
  };

  interface Expression : Node_Id {
    Operator_Id Operator;
    Node_Id    Left_Expr;
    Node_Id    Right_Expr;
  };

  interface Qualified_Expression : Node_Id {
    Node_Id    Subtype_Mark;
    Node_Id    Expression; 
    Node_Id    Aggregate; 
  };

  /**************/
  /* Base types */
  /**************/

  interface Base_Type {
    Name_Id    Image; 
  };
  interface _Float : Base_Type {};
  interface _Double : Base_Type {};
  interface Long_Double : Base_Type {};
  interface _Short : Base_Type {};
  interface _Long : Base_Type {};
  interface Long_Long : Base_Type {};
  interface Unsigned_Short : Base_Type {};
  interface Unsigned_Long : Base_Type {};
  interface Unsigned_Long_Long : Base_Type {};
  interface _Char : Base_Type {};
  interface Wide_Char : Base_Type {};
  interface _String : Base_Type {};
  interface Wide_String : Base_Type {};
  interface _Boolean : Base_Type {};
  interface _Octet : Base_Type {};
  interface _Object : Base_Type {};
  interface _Any : Base_Type {};
};
