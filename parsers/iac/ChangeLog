2004-06-29  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada-generator.adb: Remove junk code
	(Generate_Enumeration_Type and Generate_Type_Spec not
	used). Establish some generation rules. The enclosing entity
	decides for the first indentation and the last semi-colon +
	end-of-line sequence. What is generated in between is the business
	of the enclosed entity. Use parameter Offset of new
	Write_Indentation procedure. Allow to fix the longest variable
	name length in order to align all variables and parameters.

	* backend-be_ada-debug.ads, frontend-debug.ads: Reformating.

	* backend-be_ada-generator.ads: Var_Name_Len to set the maximum
	length of a variable name. Zero means that no trailing space is
	added during a variable or parameter output.

	* backend-be_ada.adb: Get Var_Name_Len value. Capitalize variables
	and parameters.

2004-06-28  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada.adb: Use the RTE mechanism for parameters and
	variables.

2004-06-28  Saber Souli  <souli@enst.fr>
	
	* iac.adb : Fix bug introduced when the path name of the IDL file
	contain a leading dot.

	* backend-be_ada.adb : Using backend-be_ada-rutime, and all the
	useless variables are deleted.

	* backend-be_ada-generator.adb : Minor change in the generated
	code, to generate exactly the same output as idlac.  
	
2004-06-28  Saber Souli   <souli@enst.fr>

	* backend-be_ada.adb: Declare PolyORB and CORBA objects. Generate
	marshaller declaration code. Use Copy_Designator in object
	declaration in order to auto insert packages used in the withed
	list. Generate Marshaller Body (not Completed yet). Generate If
	statements. Add Bind_FE_To_BE a subprogram that cross link FE node
	with the correspanding BE node.    
	
	* backend-be_ada-nutils.adb, backend-be_ada-nutils.ads: generate
	functions call. Generate If statement. 
	
	* backend-be_ada-generator.adb : generate functions call, and
	subprograms body. generate if statements.  

2004-06-28  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada-runtime.ads, backend-be_ada-runtime.adb: New
	files to deal with various API.

	* scopes.adb, values.adb, backend-be_ada-generator.adb,
	frontend-nutils.adb, mknodes.adb, lexer.adb : Reordering.

	* backend-be_ada-nutils.adb, backend-be_ada-nutils.ads: Avoid
	duplication of withed packages. Use rtsfind-like mechanism from
	backend-be_ada-runtime.

	* backend-be_ada.adb: Use rtsfind-like mechanism from
	backend-be_ada-runtime. In particular concerning Designator
	creations. Fix implementation of repository_id production since
	their values were plain wrong.
	
	* backend-be_a (all): Removed.

	* MANIFEST: Updated.

	* Makefile: Check that subprograms are still sorted.

2004-06-26  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada-generator.adb: Generate object declaration and in
	particular constant declaration. Fix few typos output in subrogram
	body.
	
	* backend-be_ada-nutils.adb, backend-be_ada-nutils.ads: Generate
	object declaration and in particular constant declaration. Fix
	automatic "with" for designator (no replication, less
	bugs). Define a function Copy_Designator which copies a designator
	like CORBA.Object.Ref and also with the parent unit of designator
	like CORBA.Object.
	
	* backend-be_ada.adb: Generate object declaration and in
	particular constant declaration. Generate
	repository_id. Reorganize Getter and Setter subprograms.
	
	* backend-be_ada-nodes.idl: Generate object declaration and in
	particular constant declaration.
	

2004-06-26  Laurent Pautet  <pautet@dorine.enst.fr>
	
	* backend-be_ada-nutils.adb: Add Make_Array_Type_Definition and
	Make_Range_Constraints in order to map complex declarators.

	* backend-be_ada-generator.adb: Replace Write_Token with Write.
	Generate array type definition. Fix several missing end of line.

	* backend-be_ada-nodes.idl: Add Range_Constraints and
	Range_Constraint to handle complex declarators.

	* backend-be_ada-debug.adb, backend-be_ada-debug.ads: Output
	values.

	* scopes.adb: When re-entering a module, re-introduce all
	the scoped identifiers in the new scope, in their homonyms chain
	and make them visible.

	* backend-be_ada.adb: When visiting a scoped name which designates
	a constant, output its value instead of the scoped name. Map
	complex declarators for type definition and structure
	members. Comment Visit_Operation_Declaration.

	* backend-be_idl.adb: Remove space between array sizes and
	declarator in a complex declarator to match omniorb output. Output
	properly empty exception. Output literals and string types.

2004-06-24  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada-generator.adb: Do invoke specific Generate, use
	dispatching one instead. Remove Generate_Qualified_Identifier
	since Generate_Defining_Identifier does the job.

	* backend-be_ada-nutils.adb, backend-be_ada.adb: Fix
	Make_Fully_Qualified_Identifier in order not to have specification
	identifier as a prefix.

2004-06-23  Saber Souli   <souli@enst.fr>
	* backend-be_ada.adb : Fixed void operation handling bug.
	Add an empty body for subprograms. Handle nested blocs. 

	* backend-be_ada-generator.adb : Add Token_Type to handle ada
	keyword and graphic characters. add  Generate_Qualified_Name (N :
	Node_Id) to a full qualified name. Add
	Generate_Subprogram_Implementation  : generate a subprogram
	body. Add  Image function : returns the image of a Token_Type. Add
	Write_Token : a procedure that print the image of a given
	Token_Type. 

2004-06-24  Laurent Pautet  <pautet@dorine.enst.fr>

	* lexer.adb, lexer.ads: Add CORBA 3.0 keywords.

	* frontend-nodes.idl, frontend-nutils.ads, frontend-nutils.adb:
	Add function Length.

	* Makefile: Invoke run-test right from the Makefile.

2004-06-23  Laurent Pautet  <pautet@dorine.enst.fr>

	* values.adb: Format float image in such a way that we do not have
	useless zeros.

	* frontend-debug.adb: Use Parameter_Mode.

	* backend-be_ada.adb: Handle inout and out parameters in
	functions.

	* analyzer.adb: Handle forward entities when resolving types.

	* backend-be_ada-nutils.adb, backend-be_ada-nutils.ads,
	backend-be_ada-nodes.idl: Replace subprogram_specification with
	specification to match GNAT tree.

	* scopes.adb: Do not reset scope to No_Node for forward entities
	as they can be visited mater on and need to have a scope anyway.


2004-06-22  Laurent Pautet  <pautet@dorine.enst.fr>

	* frontend-nutils.adb, frontend-nutils.ads, backend-be_idl.adb:
	Define a new converter function for parameters to fix output bug.

	* backend-be_ada*: Merge be_a into be_ada.

	* backend-be_a-generator.adb, backend-be_a-nutils.adb,
	backend-be_a-nutils.adb, backend-be_a-nutils.ads,
	backend-be_a-nodes.idl, backend-be_a.adb: Implement designator,
	structure type, with clause (automatically added but should not be
	replicated), operation declaration,

	* analyzer.adb, scopes.adb, scopes.ads, parser.adb,
	backend-be_ada.adb, backend-be_idl.adb, frontend-nutils.adb,
	frontend-nodes.idl, frontend-nutils.ads, frontend-debug.adb,
	backend-be_ada-nutils.adb, backend-be_ada-nutils.ads, mknodes.adb:
	Clarification between nodes and entities. Clarification of
	Mode_Id.

2004-06-21  Saber Souli <souli@enst.fr>
	* backend-be_ada.adb : Handle complex declarator. Now the backend
	map all the list of declarators. Generate library file (IDL). Add
	append_type_to_package_spec (T:Node_Id ; P : node_id): a function
	that add the type <T> in the specification part of the package P.  
	    
2004-06-21  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_a.adb, backend-be_a-nutils.adb: Clarification between
	nodes and entities. Start implementing type declaration and
	designator and module.

	* backend-be_a-generator.adb: Fix output problem on
	Record_Extension_Part.

	* scopes.adb, parser.adb, backend-be_idl.adb, frontend-nodes.idl:
	Clarification between nodes and entities.

2004-06-15  Saber Souli   <souli@enst.fr>
  	* output.ads, output.adb 
	Add procedure Set_Space_Increment (Value : Natural); to change the
	Space_Increment and so enable dealling with different
	indentations. 
	
2004-06-15  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada-nutils.adb, backend-be_ada-generator.adb,
	backend-be_ada-nutils.adb, backend-be_ada-nodes.idl,
	backend-be_ada.adb: Rename nodes and atributes for better
	understanding.

2004-06-13  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_ada.adb, backend-be_ada-nodes.idl,
	frontend-debug.adb, backend-be_ada-debug.adb: Move Ada_Node into
	BE_Node. Define FE_Node in Ada tree.

2004-06-12  Laurent Pautet  <pautet@dorine.enst.fr>

	* nodes.idl, nutils.ads, nutils.adb, debug.adb, debug.ads: Remove
	and replace by child units with Frontend as prefix.
	
	* frontend-nodes.idl, frontend-nutils.ads, frontend-nutils.adb,
	frontend-debug.adb, frontend-debug.ads: See above.

	* scopes.adb, parser.adb, backend-be_idl.adb, values.ads,
	backend-be_ada-debug.ads, Makefile, iac.adb, backend-be_ada.adb,
	analyzer.adb: Replace unit names above.

	* names.ads, names.adb: Move entities to Frontend.Nutils.

	* backend-be_ada-debug.adb, backend-be_ada-debug.ads: Duplicate
	debugs.adb and debugs.ads and then adapt them. Rename wni into wbi
	(write ada backend info).
	
	* backend-be_ada-generator.adb, backend-be_ada-generator.ads,
	backend-be_ada-nodes.idl: Rename
	backend-be_ada-files_generation.adb,
	backend-be_ada-files_generation.ads. Huge clean up.

	* backend-be_ada-nutils.adb, backend-be_ada-nutils.adb: Rename
	Mk_<X> into Make_<X>. Add subprograms to deal with parameter
	mode. Huge clean up.
	
	* debug.adb, debug.ads: Change wni into wfi (write frontend info).

	* lexer.ads, lexer.adb: Move Write for token from BE_IDL.

	* backend-be_idl.adb: Move Write for token to Lexer.

	* backend-be_ada.ads: Remove blank line.

	* analyzer.adb: Minor reformating.

2004-06-11  Laurent Pautet  <pautet@dorine.enst.fr>

	* analyzer.adb: Check oneway operation rules.

2004-06-10  Laurent Pautet  <pautet@dorine.enst.fr>

	* backend-be_idl.adb: Generate idl code for union type. Fix bug in
	sequence type generation (most keywords missing). Add Generate
	procedure for values (used both for constant declaration and case
	label).

	* values.adb, values.ads: Add a comparison function between two
	values. This is used to sort labels in a union type and to detect
	duplications. Add an enumerator as a value for union type as well.
 
	* analyzer.adb: Provide two subprograms Resolve_Type and
	Resolve_Expr. Resolve_Type returns the root type. A case which is
	not well handled concerns array type as this info is in the
	declarator and not in the type spec itself (C
	syntax). Resolve_Expr is a renaming of the previous Resolve
	procedure. Analyze union type that is : analyze all the enclosed
	entities, check labels are in the switch type, check they are not
	duplicated, heck elements are not duplicated.

	* parser.adb: Do not represent enumerator with only their position
	and add their image instead. Handle union type and in particular
	set the Declaration attributes of all the nodes implied in the
	union type definition. Improve error handling for union type.

	* nodes.idl: Add node Case_Label to handle union type. Add also an
	attribute Declaration for Switch_Alternative and Case_Label in
	order to retrieve respectively the Union_Type and the
	Switch_Alternative of these entities.

2004-06-08  Saber Souli <souli@enst.fr>
	
	* backend-be_ada.adb: Add Visit_Enumeration_Type function and
	handle Enumeration_Type declaration. Add
	Visit_Constant_Declaration function. It only ignore constant
	declaration expanded by iac frontend for enumerators.

	* backend-be_ada-nutils.adb: Add Mk_Node_Enumeration_Type function
	in order to create Enumeration_Type node. Add
	Mk_Node_Type_Declaration function in order to create
	Type_Declaration node.

	* backend-be_ada-files_generation.adb: - Add
	Generate_Enumeration_Type procedure : output the source code for
	Enumeration_Type declaration.  - Add Generate_Identifier procedure
	: Output Identifier Name.
	    
2004-06-07  Saber Souli <souli@enst.fr>
	
	* backend-be_ada.adb: Handle interface operations and generate
	the appropriate Ada function or procedure. Handle the Declarators
	list in Attribute_Declaration. Handle simple Type_Declaration
	(function Visite_Type_Declaration).

	* backend-be_ada-nutils.adb: Add function
	Mk_Node_Simple_Derived_Type_Def and create a simple derived type
	declaration.
	
	* backend-be_ada-debug.adb: Add procedure W_Small_Indents in order
	to write a small indentation for making the IAC source code output
	identical to the output of IDLAC.
	
	* backend-be_ada-files_generation.adb: Use W_Small_Indents. 
	
	* nodes.idl: Add Ada_Node to manage scoped name reference in
	Type_Declaration.
	
	* be-adatree-design.txt : Ada tree production design
	document.
	
	* be-design.txt : Ada Backend Architecture"Draft". 
   
2004-06-01  Laurent Pautet  <pautet@dorine.enst.fr>

	* mknodes.adb: Debug is now a sibling from Nodes.

	* usage.adb, backend.adb, backend.ads, backend-config.adb: Adapt
	to new organization that is a usage per backend.

	* backend-be_idl.adb, backend-be_idl.ads: Provide flag -b to set
	base to output integer literal. Provide a usage procedure.

	* backend-be_ada.adb, backend-be_ada.ads: Provide flag -t to dump
	Ada tree. Provide a usage procedure.

	* flags.adb: Scan command line in two phases. First, detect the
	backend language if there is one. Second, use Getopt by setting
	cpparg and backend language as sections (see GNAT.Command_Line).
	In command like 'iac -ds tin.idl -idl -b 8', '-ds' is considered
	as a general flag and '-b 8' is considered as an IDL backend flag.

	* backend-be_idl.adb, backend-be_idl.ads: Add Configure
	procedure. Fix generation of members (readonly missing),
	operations (oneway missing), of values (base to use). Start
	generating union type.
	
	* backend-be_ada.adb, backend-be_ada.ads: Add Configure procedure.

	* backend.adb, backend.ads: Define Configure procedure for
	backends and add it as Register parameter. This configure
	procedure is supposed to read flags specific to backend using
	GNAT.Command_Line.Getopt.

	* backend-config.adb: Initialize configure procedure for backends
	IDL and Ada.

2004-05-31  Saber Souli <souli@enst.fr>
	
	* backend-be_ada.adb : This package Visit IDL tree nodes, and
	generate the appropriate Ada node following the ADA Language
	Specification. Actually I didn't take in consideration specific
	mapping introduced by using PolyORB, I let this in later stage,
	after completing all the OMG mappings specification. 
	Here are the actual mapping implemented : Module, Interface (only
	attribute setter and getter generation is completed),
	typedef (Not completed yet), Base type mapping.  
	
	* backend-be_ada-nutils.ads,backend-be_ada-nutils.adb: Contain
	several routines to simplify the creation of ada tree nodes.
	
	* backend-be_ada-nodes.idl: Add Derived_Type_Spec in order to
	declare derived types. Same for Record_Type_Spec. Add
	Ada_Function_Spec and Ada_Procedure_Spec to manage subprogram
	declarations.
	
	* backend-be_ada-debug.adb: ease debug of the Ada tree.
	
	* backend-be_ada-file_generation: Output ada file source.

2004-05-31  Laurent Pautet  <pautet@dorine.enst.fr>

	* analyzer.adb: Do not try to analyze predefined types. Add
	location to error message when invalid constant type
	detected. Expand enumerators as constants and do not cause new
	errors when enumeration type is incorrect. Re-implement attributes
	and operations inheritance and other inherited entities visibility
	as overloading declarations were not properly detected. Skip
	scoped name analyzis when attribute Reference is already set.
  
	* scopes.adb, scopes.ads: Clarify some routines and add
	comments. Fix bugs in special scoping of type names due to a
	misunderstanding of the document. Re-implement scoping.

	* debug.adb: Filter new attributes.

	* parser.adb: Adapt code to new scoped name and identifier
	constructors signature.

	* nutils.adb, nutils.ads: Add a function to detect a non module
	entity (different from specification or module). Enrich scoped
	name and identifier constructors with new attributes (needed for
	expansion).

	* nodes.idl: Add Potential_Scope to deal with type names. Make
	nodes Simple_Declarator and Complex_Declarator contiguous.

2004-05-30  Laurent Pautet  <pautet@dorine.enst.fr>

	* debug.adb: Filter some more attributes.

	* backend-be_idl.adb: Fix output for raises clause in an operation
	declaration and for no-parameter operation declaration.

2004-05-26  Laurent Pautet  <pautet@dorine.enst.fr>

	* lexer.adb: Scan properly identifier. Do not return a token
	T_Error when identifier is not well-formed. Display error, accept
	identifier and proceed in parsing. In case of invalid character,
	try to rescue lexer and progress up to a possible terminal.

2004-05-24  Laurent Pautet  <pautet@dorine.enst.fr>

	* utils.adb: Protect To_Lower against No_Name.
	
	* nodes.idl: Replace immediately with explicitely and potentially
	with implicitely. Define specification as a definition to follow
	CORBA 2.6 3.15.1.

	* backend-be_idl.adb: Inherited interface specification starts
	with a colon and not colon colon.

	* nodes.idl: Reorder Scoped_Name attributes from debug
	readibility.

	* scopes.ads: Rename functions for readibility. Add comments.
	Replace immediately with explicitely and potentially with
	implicitely.

	* scopes.adb: Same as above. Fix also name resolution bugs.

	* nutils.adb, nutils.ads: Add expansion routines to build scoped
	name, identifier and constant declaration. Used to declare
	enumerator as constant.

	* backend-be_idl.adb: Fix constant declaration output to take
	enumeration types into account. Try to reproduce omniORB IDL
	output for testing purpose.

	* debug.adb, debug.ads: Simplify debug primitives.

	* analyzer.adb: Allow enumeration type in constant
	declaration. Analyze properly enumeration type and create one
	constant declaration per enumerator. Fix Resolve operation to
	compute constant expression in case of enumeration type. Analyze
	union type.

	* parser.adb: Use Make_Identifier.
 
2004-05-22  Laurent Pautet  <pautet@dorine.enst.fr>

	* debug.adb, mknodes.adb: Remove parameter I (for number of
	indentations) in all output procedures.

	* Makefile: Force backend.be_ada.nodes generation when mknodes
	updated.
 
2004-05-21  Laurent Pautet  <pautet@dorine.enst.fr>

	* lexer.adb: Do not adjust base when the integer literal base has
	already been set to 16 (in particular a leading zero is not
	meaningful - for instance 0x01).

	* values.adb: Reorder the normalization steps for fixed point
	values (reduce precision, remove trailing zero, remove leading
	zero, recompute total digits). Set result base to the left operand
	base for shift left and shift right operations. Execute operation
	"not" as an unsigned long operation "not" for types octet, signed
	and unsigned short, signed and unsigned long.

2004-05-17  Laurent Pautet  <pautet@dorine.enst.fr>

	* nodes.idl: Remove left and right values in an expression
	node. Instead define an expression value in order to store
	the evaluation of the expression in the node.

	* parser.adb: Remove an useless conversion.

	* values.adb, values.ads: Use node kind as a discriminant for
	values (and not token kind anymore). Subtyping is different for
	constant declaration and expression and operation precision is
	different for (signed and unsigned) long long and other integer
	types for instance. Same for floating and fixed point values.

	* types.ads, lexer.ads: Define CORBA types and use them.

	* errors.adb, iac.adb: Remove blank after digit in order to
	output notations and formats like "fixed<$,$>".

	* analyzer.adb, backend-be_idl.adb: Handle constant declarations,
	expressions and literals. Handle fixed point types in particular.

	* MANIFEST: Add values.ads and values.adb.
  
2004-05-14  Laurent Pautet  <pautet@dorine.enst.fr>

	* parser.adb: Avoid to output twice an error message in
	P_Type_Spec and in P_Declarator.

	* lexer.adb: Improve error detection and fixed literal
	parsing. Fix few bugs (08D was incorrectly interpreted as
	formatted in octal).

	* errors.adb: Define '|' as a character to escape a
	meta-character. This character is not frequently used.

2004-05-13  Laurent Pautet  <pautet@dorine.enst.fr>

	* iac-cpp: read env. variable CPPEXEC to redirect command either
	to cpp or mico-cpp. Note that cpp (GNU CPP) removes all
	unnecessary blanks and makes iac to incorrectly locate errors.

	* lexer.adb, lexer.ads: Scan string literals but on minor errors
	like having a string which appears to be a wide string, do not
	produce token T_Error. Instead, produce token T_String with
	Token_Name or String_Literal_Value set to Incorrect_String. Same
	for characters.

	* parser.adb: produce a null node when an incorrect string is
	parsed in order not to analyze it later on.

	* values.adb: do not crash when dumping an empty string value.

	* analyze.adb: properly detect type mismatch for floats,
	characters, strings.

