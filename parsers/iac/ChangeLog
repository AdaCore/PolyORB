2004-06-01  Laurent Pautet  <pautet@dorine.enst.fr>

	* flags.adb: Scan command line in two phases. First, detect the
	backend language if there is one. Second, use Getopt by setting
	cpparg and backend language as sections (see GNAT.Command_Line).
	In command like 'iac -ds tin.idl -idl -b 8', '-ds' is considered
	as a general flag and '-b 8' is considered as an IDL backend flag.

	* backend-be_idl.adb, backend-be_idl.ads: Add Configure
	procedure. Fix generation of members (readonly missing),
	operations (oneway missing), of values (base to use). Start
	generating union type.
	
	* backend-be_ada.adb, backend-be_ada.ads: Add Configure procedure.

	* backend.adb, backend.ads: Define Configure procedure for
	backends and add it as Register parameter. This configure
	procedure is supposed to read flags specific to backend using
	GNAT.Command_Line.Getopt.

	* backend-config.adb: Initialize configure procedure for backends
	IDL and Ada.

	

2004-05-31  Laurent Pautet  <pautet@dorine.enst.fr>

	* analyzer.adb: Do not try to analyze predefined types. Add
	location to error message when invalid constant type
	detected. Expand enumerators as constants and do not cause new
	errors when enumeration type is incorrect. Re-implement attributes
	and operations inheritance and other inherited entities visibility
	as overloading declarations were not properly detected. Skip
	scoped name analyzis when attribute Reference is already set.
  
	* scopes.adb, scopes.ads: Clarify some routines and add
	comments. Fix bugs in special scoping of type names due to a
	misunderstanding of the document. Re-implement scoping.

	* debug.adb: Filter new attributes.

	* parser.adb: Adapt code to new scoped name and identifier
	constructors signature.

	* nutils.adb, nutils.ads: Add a function to detect a non module
	entity (different from specification or module). Enrich scoped
	name and identifier constructors with new attributes (needed for
	expansion).

	* nodes.idl: Add Potential_Scope to deal with type names. Make
	nodes Simple_Declarator and Complex_Declarator contiguous.

2004-05-30  Laurent Pautet  <pautet@dorine.enst.fr>

	* debug.adb: Filter some more attributes.

	* backend-be_idl.adb: Fix output for raises clause in an operation
	declaration and for no-parameter operation declaration.

2004-05-26  Laurent Pautet  <pautet@dorine.enst.fr>

	* lexer.adb: Scan properly identifier. Do not return a token
	T_Error when identifier is not well-formed. Display error, accept
	identifier and proceed in parsing. In case of invalid character,
	try to rescue lexer and progress up to a possible terminal.

2004-05-24  Laurent Pautet  <pautet@dorine.enst.fr>

	* utils.adb: Protect To_Lower against No_Name.
	
	* nodes.idl: Replace immediately with explicitely and potentially
	with implicitely. Define specification as a definition to follow
	CORBA 2.6 3.15.1.

	* backend-be_idl.adb: Inherited interface specification starts
	with a colon and not colon colon.

	* nodes.idl: Reorder Scoped_Name attributes from debug
	readibility.

	* scopes.ads: Rename functions for readibility. Add comments.
	Replace immediately with explicitely and potentially with
	implicitely.

	* scopes.adb: Same as above. Fix also name resolution bugs.

	* nutils.adb, nutils.ads: Add expansion routines to build scoped
	name, identifier and constant declaration. Used to declare
	enumerator as constant.

	* backend-be_idl.adb: Fix constant declaration output to take
	enumeration types into account. Try to reproduce omniORB IDL
	output for testing purpose.

	* debug.adb, debug.ads: Simplify debug primitives.

	* analyzer.adb: Allow enumeration type in constant
	declaration. Analyze properly enumeration type and create one
	constant declaration per enumerator. Fix Resolve operation to
	compute constant expression in case of enumeration type. Analyze
	union type.

	* parser.adb: Use Make_Identifier.
 
2004-05-22  Laurent Pautet  <pautet@dorine.enst.fr>

	* debug.adb, mknodes.adb: Remove parameter I (for number of
	indentations) in all output procedures.

	* Makefile: Force backend.be_ada.nodes generation when mknodes
	updated.
 
2004-05-21  Laurent Pautet  <pautet@dorine.enst.fr>

	* lexer.adb: Do not adjust base when the integer literal base has
	already been set to 16 (in particular a leading zero is not
	meaningful - for instance 0x01).

	* values.adb: Reorder the normalization steps for fixed point
	values (reduce precision, remove trailing zero, remove leading
	zero, recompute total digits). Set result base to the left operand
	base for shift left and shift right operations. Execute operation
	"not" as an unsigned long operation "not" for types octet, signed
	and unsigned short, signed and unsigned long.

2004-05-17  Laurent Pautet  <pautet@dorine.enst.fr>

	* nodes.idl: Remove left and right values in an expression
	node. Instead define an expression value in order to store
	the evaluation of the expression in the node.

	* parser.adb: Remove an useless conversion.

	* values.adb, values.ads: Use node kind as a discriminant for
	values (and not token kind anymore). Subtyping is different for
	constant declaration and expression and operation precision is
	different for (signed and unsigned) long long and other integer
	types for instance. Same for floating and fixed point values.

	* types.ads, lexer.ads: Define CORBA types and use them.

	* errors.adb, iac.adb: Remove blank after digit in order to
	output notations and formats like "fixed<$,$>".

	* analyzer.adb, backend-be_idl.adb: Handle constant declarations,
	expressions and literals. Handle fixed point types in particular.

	* MANIFEST: Add values.ads and values.adb.
  
2004-05-14  Laurent Pautet  <pautet@dorine.enst.fr>

	* parser.adb: Avoid to output twice an error message in
	P_Type_Spec and in P_Declarator.

	* lexer.adb: Improve error detection and fixed literal
	parsing. Fix few bugs (08D was incorrectly interpreted as
	formatted in octal).

	* errors.adb: Define '|' as a character to escape a
	meta-character. This character is not frequently used.

2004-05-13  Laurent Pautet  <pautet@dorine.enst.fr>

	* iac-cpp: read env. variable CPPEXEC to redirect command either
	to cpp or mico-cpp. Note that cpp (GNU CPP) removes all
	unnecessary blanks and makes iac to incorrectly locate errors.

	* lexer.adb, lexer.ads: Scan string literals but on minor errors
	like having a string which appears to be a wide string, do not
	produce token T_Error. Instead, produce token T_String with
	Token_Name or String_Literal_Value set to Incorrect_String. Same
	for characters.

	* parser.adb: produce a null node when an incorrect string is
	parsed in order not to analyze it later on.

	* values.adb: do not crash when dumping an empty string value.

	* analyze.adb: properly detect type mismatch for floats,
	characters, strings.

