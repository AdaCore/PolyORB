Optimisation : 

1. Optimisation du stub : 
1.1. Factoriser le code (Les donnees constantes en lectures): 

Chaque sous-programme genere par idlac, contient des variables locales
allouees dynamiquement est initialisees par la meme valeur. L'idee est
de les rendre constantes et  globales.
Exemple : 
	function get_Attr1
	 (Self : Ref)
	 return CORBA.Float
        is

	  Operation_Name_U : constant Standard.String
              := "_get_Attr1";
          Self_Ref_U : CORBA.Object.Ref
              := CORBA.Object.Ref (Self);

          Request_U : PolyORB.Requests.Request_Access;
          Arg_List_U : PolyORB.Any.NVList.Ref;
          Result_U : PolyORB.Any.NamedValue;
          Result_Name_U : CORBA.String := To_CORBA_String ("Result");

Operation_Name_U, a la meme valeur pour tous les appels a la fonction
get_Attr1. Donc peux etre declaree globale. Cette optimisation evite
d'allouer une zone memoire dans la pile a chaque appel a la fonction,
et aussi economise le surcout de l'initialisation de la variable. 


1.2.  Les structures avec une partie constante (en ecriture) : 
dans ce cas ya deux solution possible. Allouer une fois pour toute la
structure et en faire une copie de reference, laquelle sera dupliquer
a chaque nouveau appel (solution couteuse si les parametre sont de
grande tailles). La deuxieme solution est d'utiliser un mutex sur la
structure (ideale pour le cas ou les parametres sont de grande
taille).
A etudier (les deux solution a savoire le copie de memoire entre
l'utilisation d'un mutex).    
