//
// Copyright (c) 1997 X/Open Company Ltd., A member of The Open Group.
//
// All rights reserved. No part of this source code may be reproduced,
// stored in a retrieval system, or transmitted, in any form or by any
// means, electronic, mechanical, photocopying, recording or otherwise,
// except as stated in the end-user licence agreement, without the prior
// permission of the copyright owners.
//
// Developed for X/Open by ApTest Ireland Limited.
//
// Project: CORVAL2
//


typedef struct WhiteCabbage163{
  struct Parsnip163{
    struct Orange163{
      struct Sultana163{
        sequence<sequence<octet> ,18>  GaliaMelon163;
      } Turnip163;
    } LoganBerry163;
  } Celery163;
} Aniseed163;

typedef struct Orange164{
  struct Sultana164{
    struct Coconut164{
      struct Wilja163{
        sequence<sequence<octet,18> >  BritishQueens163[13];
      } Dates164[15];
    } GaliaMelon164[11];
  } Turnip164;
} LoganBerry164;

typedef struct Orange165{
  struct Sultana165{
    struct Asparagus165{
      struct PentlandDell164{
        sequence<sequence<sequence<float> > >  KingEdward164[7];
      } GardenPeas165[10];
    } GaliaMelon165;
  } Turnip165;
} LoganBerry165;

typedef struct Sultana166{
  struct Asparagus166{
    struct Lime166{
      struct Mango166{
        sequence<sequence<sequence<float> ,19> >  Pumpkin166[12];
      } WaterMelon166;
    } GardenPeas166[6];
  } GaliaMelon166;
} Turnip166;

typedef struct Sultana167{
  struct Asparagus167{
    struct Mint167{
      struct BlackEyedBeans167{
        sequence<sequence<sequence<float,9> > >  Apricots167[7];
      } Leek167;
    } GardenPeas167;
  } GaliaMelon167;
} Turnip167;

typedef struct Mint168{
  struct BlackEyedBeans168{
    struct PassionFruit168{
      struct ChineseLeaves167{
        sequence<sequence<sequence<float,4> ,2> >  RedCabbage167;
      } Rhubarb168[5];
    } Apricots168[3];
  } Leek168;
} GardenPeas168;

typedef struct Mint169{
  struct BlackEyedBeans169{
    struct Ginger169{
      struct Pimpernel168{
        sequence<sequence<sequence<double> > >  GoldenWonder168;
      } Cucumber169[9];
    } Apricots169;
  } Leek169;
} GardenPeas169;

interface idlServer {

  exception Aniseed163Excpt{
    ::Aniseed163 ex1;
  };

  attribute ::Aniseed163 Aniseed163Attr;

  ::Aniseed163 Aniseed163Op(
    in    ::Aniseed163 p1,
    out   ::Aniseed163 p2,
    inout ::Aniseed163 p3
  ) raises (Aniseed163Excpt);

  exception WhiteCabbage163Excpt{
    ::WhiteCabbage163 ex1;
  };

  attribute ::WhiteCabbage163 WhiteCabbage163Attr;

  ::WhiteCabbage163 WhiteCabbage163Op(
    in    ::WhiteCabbage163 p1,
    out   ::WhiteCabbage163 p2,
    inout ::WhiteCabbage163 p3
  ) raises (WhiteCabbage163Excpt);

  exception Parsnip163Excpt{
    ::WhiteCabbage163::Parsnip163 ex1;
  };

  attribute ::WhiteCabbage163::Parsnip163 Parsnip163Attr;

  ::WhiteCabbage163::Parsnip163 Parsnip163Op(
    in    ::WhiteCabbage163::Parsnip163 p1,
    out   ::WhiteCabbage163::Parsnip163 p2,
    inout ::WhiteCabbage163::Parsnip163 p3
  ) raises (Parsnip163Excpt);

  exception Orange163Excpt{
    ::WhiteCabbage163::Parsnip163::Orange163 ex1;
  };

  attribute ::WhiteCabbage163::Parsnip163::Orange163 Orange163Attr;

  ::WhiteCabbage163::Parsnip163::Orange163 Orange163Op(
    in    ::WhiteCabbage163::Parsnip163::Orange163 p1,
    out   ::WhiteCabbage163::Parsnip163::Orange163 p2,
    inout ::WhiteCabbage163::Parsnip163::Orange163 p3
  ) raises (Orange163Excpt);

  exception Sultana163Excpt{
    ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 ex1;
  };

  attribute ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 Sultana163Attr;

  ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 Sultana163Op(
    in    ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 p1,
    out   ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 p2,
    inout ::WhiteCabbage163::Parsnip163::Orange163::Sultana163 p3
  ) raises (Sultana163Excpt);

  exception LoganBerry164Excpt{
    ::LoganBerry164 ex1;
  };

  attribute ::LoganBerry164 LoganBerry164Attr;

  ::LoganBerry164 LoganBerry164Op(
    in    ::LoganBerry164 p1,
    out   ::LoganBerry164 p2,
    inout ::LoganBerry164 p3
  ) raises (LoganBerry164Excpt);

  exception Orange164Excpt{
    ::Orange164 ex1;
  };

  attribute ::Orange164 Orange164Attr;

  ::Orange164 Orange164Op(
    in    ::Orange164 p1,
    out   ::Orange164 p2,
    inout ::Orange164 p3
  ) raises (Orange164Excpt);

  exception Sultana164Excpt{
    ::Orange164::Sultana164 ex1;
  };

  attribute ::Orange164::Sultana164 Sultana164Attr;

  ::Orange164::Sultana164 Sultana164Op(
    in    ::Orange164::Sultana164 p1,
    out   ::Orange164::Sultana164 p2,
    inout ::Orange164::Sultana164 p3
  ) raises (Sultana164Excpt);

  exception Coconut164Excpt{
    ::Orange164::Sultana164::Coconut164 ex1;
  };

  attribute ::Orange164::Sultana164::Coconut164 Coconut164Attr;

  ::Orange164::Sultana164::Coconut164 Coconut164Op(
    in    ::Orange164::Sultana164::Coconut164 p1,
    out   ::Orange164::Sultana164::Coconut164 p2,
    inout ::Orange164::Sultana164::Coconut164 p3
  ) raises (Coconut164Excpt);

};

