Demo plan for PolyORB features as of 2002-07-26
-----------------------------------------------

$Id$

0. Preparation
--------------

0.0 Prerequisites
-----------------

GNAT 3.15a1 compiler
GNAT 3.16w baseline sources
XmlAda wavefront sources

0.1 Native platforms
--------------------

From the designated PolyORB and GNAT baselines, perform a build of
a native GNAT 3.16w. Install it.

Using that compiler, build XmlAda wavefront and install it.

Using that compiler, build PolyORB with the following options:
  --with-xmlada
  --enable-ir
  --enable-debug
  --disable-shared

Finally, build the examples/dsa directory.

0.2 Cross platform
------------------

XXX TBD (JG)

1. Naming service
-----------------

Launch ir_ab_names. Set naming service IOR on all nodes.

2. DSA server
-------------

Launch DSA server: the server registers itself with naming,
and waits for incoming calls.

3. DSA client
-------------

DEMO-1: native DSA.

Launch DSA client. The client performs various calls onto the
DSA server. Exhibit debug traces, including GIOP messages.

4. Naming client
----------------

Use test_naming to look up DSA server IOR in Naming Service.
(Bonus points if this is done with AdaBroker test_naming.
Extra bonus points if this is done with omniORB or ORBit
naming client).

5. CORBA GIOP client
--------------------

DEMO-2: CORBA/DSA interoperability

Using IOR retrieved in 4, launch examples/echo/dynclient.
Exhibit messages on CORBA dynclient and DSA server.

6. MOMA client
--------------

DEMO-3: MOM/dist. obj. interoperability

Requires : 

- an ORB server, implementing the echoString function found in
the all_types example, also provided by the DSA server.

- a MOMA message pool node, can use examples/moma/server
(by default it is configured as a persistent node => messages
are stored in files, in a binary yet readable format)

The servers output their IOR, we use them to launch
examples/all_types/client_moma, its syntax is

client_moma <IOR_string_from_orb_server> <IOR_string_from_moma_message_pool>

The client sends a MExecute message to its 'destination' (1), since it
is an ORB server this message is altered and a RPC is formated by the
application personality from this message (2) then sent to the DSA
server. The reply (3) sent by the DSA server is intercepted by a call
back component on the MOM client side by the MOMA personality and
formatted and transformed into a MExecute message containing the
answer then bounced to the message pool (4).

Thus, from the MOMA client point of view, a MExecute message has been
processed by a remote node, the answer has been sent to a message pool.
The communication is transparent. Yet, the client must know how
to fill the MExecute message fields, as for every MOM applications.

Here is a transcription of the communications between entities.

MOMA Client         'MOMA Personnality'      DSA Server         Message Pool
  |                            |                 |                  |
  |                            |                 |                  |
  |      MExecute Message (1)  |     RPC (2)     |                  |
  |     -------------------->  |    -------->    |                  |
  |                            |                 |                  |
  |                            |      Reply (3)  |                  |
  |                            |    <----------  |                  |
  |                            |                 |                  | 
  |                            |                                    |
  |                            |        MExecute Message (4)        |       
  |                            |    --------------------------->    |
  |                            |                                    |

7. CORBA SOAP client
--------------------

DEMO-4: SOAP/GIOP interoperability with inline dynamic proxy.

XXX TBD (TQ)