#! /bin/sh

# cobuild: Build something from a checked-out wavefront.

# $Id: //droopi/main/utils/cobuild#23 $

###################################################
# Usage information
###################################################

usage () {
  echo "Usage: $0 -m EMAIL_ADDRESS -i SOURCE_DIR -o OUTPUT_DIR -p PROJECT -r [cvs | p4] [ -c CHANGELIST ]"
  echo "  A notification e-mail will be sent to EMAIL_ADDRESS"
  echo "  Source code is in SOURCE_DIR"
  echo "  Build is done in OUTPUT_DIR/build"
  echo "  Install is done in OUTPUT_DIR/install"
  echo " "
  echo "  PROJECT is the name of the project to be built"
  echo "  cvs : retrieve PROJECT from CVS repository"
  echo "  p4  : retrieve PROJECT from Perforce repository"
  echo "    CHANGELIST indicates Perforce changelist to consider for building"
  exit 1
}

###################################################
# Parse commande line
###################################################

while getopts c:i:o:m:p:r: opt
do
  case $opt in
    c)
      CHANGELIST="$OPTARG"
      ;;
    i)
      SOURCE_DIR=$OPTARG
      ;;
    o)
      OUTPUT_DIR=$OPTARG
      ;;
    m)
      MAILTO=$OPTARG
      ;;
    p)
      PROJECT=$OPTARG  
      ;;
    r)
      USE_REPOSITORY=$OPTARG
      ;;
    *)
      usage
      ;;
   esac
done

if [ "x$OUTPUT_DIR" = "x" ]
then
  usage
fi

if [ "x$SOURCE_DIR" = "x" ]
then
  usage
fi

: ${MAILTO:=root}

###################################################
# Setup environment
###################################################

if [ "x$USE_REPOSITORY" = "xp4" ]
then
    P4CONFIG=.p4
    export P4CONFIG
fi

TMPDIR=/var/tmp
GNUMAKE=gmake

export MAILTO OUTPUT_DIR SOURCE_DIR TMPDIR GNUMAKE

set -e
umask 022

PIDFILE=$OUTPUT_DIR/build.pid
CHGFILE=$OUTPUT_DIR/build.change
LOGFILE=$OUTPUT_DIR/build.log

###################################################
# Prepare build
###################################################

# Take mutex.

lockfile $PIDFILE.lock
trap 'rm -f $PIDFILE.lock' 0

# Determine change level to be built.

cd $SOURCE_DIR

if [ "x$USE_REPOSITORY" = "xp4" -a "x$CHANGELIST" = x ]
then
  CHANGELIST=`p4 changes -m 1 ... | awk '{print \$2}'`
fi
export CHANGELIST

# Kill any previous build.

if [ -f $PIDFILE ]
then
  OLDPID=`cat $PIDFILE`
  if [ "x$OLDPID" != x ] && ps -p $OLDPID > /dev/null
  then
    # Build in progress.

    [ -f "$CHGFILE" ] && OLDCHG=`cat "$CHGFILE"`
    if [ "$OLDCHG" -ge "$CHANGELIST" ]
    then
      # Already building this changelist or a more recent one.
      exit 0
    fi
    kill $OLDPID > /dev/null 2>&1 || true
  fi
fi

# Here comes the hot builder.

exec > $LOGFILE 2>&1

# Prepare execution.

echo "---------- Starting build of ${PROJECT} ch. ${CHANGELIST}: `date`"
echo "---------- Syncing"

###################################################
# Update files
###################################################

if [ "x$USE_REPOSITORY" = "xp4" ]
then
echo "Syncing from Perforce repository"
#p4 sync "#none"
#rm -fr $SOURCE_DIR/*
p4 sync @$CHANGELIST
fi

if [ "x$USE_REPOSITORY" = "xcvs" ]
then
echo "Syncing from CVS repository"
cvs update -d -C
fi

###################################################
# Launch build process
###################################################

/usr/local/bin/rungroup /bin/sh -c '(
  set -e
  sleep 10

  echo "---------- Building"
  [ -x ./support/reconfig ] && ./support/reconfig
  cd $OUTPUT_DIR
  mkdir build > /dev/null 2>&1 || true
  mkdir install > /dev/null 2>&1 || true
  cd build

  if [ -x $SOURCE_DIR/configure ]
  then
    $SOURCE_DIR/configure --disable-shared --enable-debug \
       --with-proto-perso="giop soap srp" --with-appli-perso="corba moma" \
       --with-services="naming ir event time" --prefix=$OUTPUT_DIR/install
  fi && ${GNUMAKE} && ${GNUMAKE} install && cd examples && ${GNUMAKE} \
  && cd ../testsuite && ${GNUMAKE}
  RC=$?
  exit $RC
)' &

# The build is now running in background. Save PID and changelist #,
# and release mutex.

THISPID=$!
echo $THISPID > $PIDFILE
echo $CHANGELIST > $CHGFILE

###################################################
# Analyze build output
###################################################

trap '' 0
rm -f $PIDFILE.lock

set +e
wait $THISPID
RC=$?
set -e

if [ $RC = 0 ]
then
  echo "---------- Build completed successfully: `date`"
  STATUS="completed"
  MSG="Build completed successfully.\\nSee details at $OUTPUT_DIR/build.log"
  SUCCESS=true
elif [ $RC -ge 128 ]
then
  echo "---------- Build aborted by a signal: `date`"
  STATUS="aborted"
  MSG="The build process was interrupted by a signal."
  SUCCESS=true
else
  echo "---------- BUILD FAILED: `date`"
  SUCCESS=false
fi

if $SUCCESS
then
  echo -e "$MSG" | Mail -s "${PROJECT} build $CHANGELIST $STATUS" $MAILTO
else
  cat $OUTPUT_DIR/build.log | Mail -s "${PROJECT} BUILD $CHANGELIST FAILED" $MAILTO
fi

lockfile $PIDFILE.lock
THATPID=`cat $PIDFILE`
if [ "$THATPID" = "$THISPID" ]
then
  rm -f $PIDFILE
fi
rm -f $PIDFILE.lock
