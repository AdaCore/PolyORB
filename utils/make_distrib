#!/bin/sh
#
# $Id: //droopi/main/utils/make_distrib#14 $
#
# This script builds a compressed archive suitable for distribution.
#
# Usage: make_distrib [-s] [-k?|-prcs|-n|-c] tag dir
#
#   -s    : suppress automatic version numbering and get info from VERSION.INFO
#   -k?   : override CVS keywords expansion
#   -prcs : use prcs to extract files
#   -p4   : use Perforce to extract files
#   -n    : assume a checkout has already been done in dir
#   -c    : assume current directory can be used as source
#   tag   : CVS or prcs tag or branch
#   dir   : the distribution will unpack in directory <dir> and will be
#           named <dir>.tar.gz
#
# The VERSION.INFO file will be used to substitute some variables in files
# such as README, etc.
#
# The file MANIFEST contains the list of files to be included in this
# archive, one file per line.
#

prcs=false
perforce=false
kk=
nocheckout=false
s=false

###################################################
# Usage information
###################################################

if [ $# = 0 ]; then
   echo "Usage: $0 [-k|-prcs|-p4|-n|-c] tag dir";
   exit 0;
fi;

set -e

###################################################
# Parse commande line
###################################################

if test "x$1" = "x-s"; then
    s=true
    shift
fi

case $1 in
  -k*)   kk=$1; shift;;
  -prcs) prcs=true; shift;;
  -p4)   perforce=true; shift;;
  -n)    nocheckout=true; shift;;
  -c)    nocheckout=true; use_current=true; shift;;
  *)     ;;
esac

tag=$1
dir=$2

###################################################
# Delete previous temporary files
###################################################

prev=`pwd`
tmp=${TMPDIR-/var/tmp}/make_distrib.$$
mkdir -p ${tmp}/${dir}
trap "rm -fr ${tmp}" 0

###################################################
# Retrieve all files in repository
###################################################

# pcrs

if $prcs; then
  name=`echo *.prj | sed -e 's/\.prj//'`
  echo Extracting module ${name} from prcs using tag ${tag}
  cd ${tmp}/${dir}
  prcs checkout -r${tag} ${name}

# Perforce

elif $perforce; then
  . ./${P4CONFIG:-.p4}
  export P4USER P4PORT P4PASSWD
  view=`p4 files MANIFEST | sed 's,/MANIFEST#.*$,/...,'`
  cd ${tmp}/${dir}
  tmp=`pwd`
  client=make_distrib_$$
  p4 client -i <<__EOF__
Client: $client
Root: ${tmp}
Options: allwrite clobber compress
View: ${view} //${client}/...
__EOF__
  P4CLIENT=${client}; export P4CLIENT
  set +e
  p4 sync ...@${tag}
  rc=$?
  set -e
  p4 client -d ${client}
  if [ $rc != 0 ]; then
    exit $rc
  fi

# Use current directory

elif $usercurrent; then
  tar cf - . | (cd $tmp/$dir && tar xpBf -)
  cd $tmp/$dir

# Do no checkout

elif $nocheckout; then
  cd ${dir}

# CVS

else
  root=`cat CVS/Root`
  trunc_root=`echo ${root} | sed -e 's/^.*://'`
  name=`sed -e "s,${trunc_root}/,," < CVS/Repository`
  echo Extracting module ${name} from ${root} using tag ${tag}
  cd ${tmp}
  cvs -d ${root} co ${kk} -r ${tag} -d ${dir} ${name}
  cd ${dir}
fi

###################################################
# Update VERSION in all files
###################################################

if [ -f utils/VERSION.INFO ]; then
  echo "Calling version file, then deleting it"
  if $s; then
    echo "(with no implicit version information)"
    sh utils/VERSION.INFO
  else
    echo "(with version information derived from ${dir})"
    sh utils/VERSION.INFO ${dir}
  fi
  rm -f utils/VERSION.INFO
else
  echo "WARNING: unable to locate VERSION.INFO in directory utils"
fi

###################################################
# Generating *.in files
###################################################

echo Generating auto-generated files
if [ -f support/reconfig ]
then
  sh support/reconfig -w
fi

###################################################
# Packaging
###################################################

echo "Adapting modes"
chmod -R og=u-w .

echo Packaging
cd ..
for f in `cat ${dir}/MANIFEST`; do
  if [ ! -f ${dir}/${f} ]; then
    echo "FATAL: ${dir}/${f} is not a regular file."
    exit 1
  fi
  echo ${dir}/${f} >> MANIFEST.local
done
tar -cf ${dir}.tar -T MANIFEST.local
gzip --best ${dir}.tar
ls -l ${dir}.tar.gz
mv ${dir}.tar.gz ${prev}
cd ${prev}
rm -rf ${tmp}
