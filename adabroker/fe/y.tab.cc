
/*  A Bison parser, made from idl.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	258
#define	CONST	259
#define	MODULE	260
#define	INTERFACE	261
#define	TYPEDEF	262
#define	LONG	263
#define	SHORT	264
#define	UNSIGNED	265
#define	DOUBLE	266
#define	FLOAT	267
#define	CHAR	268
#define	WCHAR	269
#define	OCTET	270
#define	BOOLEAN	271
#define	ANY	272
#define	STRUCT	273
#define	UNION	274
#define	SWITCH	275
#define	ENUM	276
#define	SEQUENCE	277
#define	STRING	278
#define	WSTRING	279
#define	EXCEPTION	280
#define	CASE	281
#define	DEFAULT	282
#define	READONLY	283
#define	ATTRIBUTE	284
#define	ONEWAY	285
#define	IDEMPOTENT	286
#define	VOID	287
#define	IN	288
#define	OUT	289
#define	INOUT	290
#define	RAISES	291
#define	CONTEXT	292
#define	INTEGER_LITERAL	293
#define	STRING_LITERAL	294
#define	CHARACTER_LITERAL	295
#define	FLOATING_PT_LITERAL	296
#define	TRUETOK	297
#define	FALSETOK	298
#define	SCOPE_DELIMITOR	299
#define	LEFT_SHIFT	300
#define	RIGHT_SHIFT	301
#define	PRAGMA_ID	302
#define	PRAGMA_VERSION	303
#define	PRAGMA_PREFIX	304

#line 71 "idl.yy"

#include <idl.hh>
#include <idl_extern.hh>

#include <fe_private.hh>

#include <stdio.h>

#ifdef __cplusplus
#ifndef __EXTERN_C__
#define __EXTERN_C__
#endif
extern	"C" int yywrap();
extern  "C" void yyerror(const char*);
#endif

extern int yylex();
extern char* yytext;

#ifndef alloca
#define alloca malloc
#endif

#line 99 "idl.yy"
typedef union {
  AST_Decl		*dcval;		/* Decl value		*/
  UTL_StrList		*slval;		/* String list		*/
  UTL_NameList		*nlval;		/* Name list		*/
  UTL_ExprList		*elval;		/* Expression list	*/
  UTL_LabelList		*llval;		/* Label list		*/
  UTL_DeclList		*dlval;		/* Declaration list	*/
  FE_InterfaceHeader	*ihval;		/* Interface header	*/
  AST_Expression	*exval;		/* Expression value	*/
  AST_UnionLabel	*ulval;		/* Union label		*/
  AST_Field		*ffval;		/* Field value		*/
  AST_Expression::ExprType etval;	/* Expression type	*/
  AST_Argument::Direction dival;	/* Argument direction	*/
  AST_Operation::Flags	ofval;		/* Operation flags	*/
  FE_Declarator		*deval;		/* Declarator value	*/
  idl_bool		bval;		/* Boolean value	*/
  long			ival;		/* Long value		*/
  double		dval;		/* Double value		*/
  float			fval;		/* Float value		*/
  char			cval;		/* Char value		*/
  
  String		*sval;		/* String value		*/
  char			*strval;	/* char * value		*/
  Identifier		*idval;		/* Identifier		*/
  UTL_IdList		*idlist;	/* Identifier list	*/
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		410
#define	YYFLAG		-32768
#define	YYNTBASE	71

#define YYTRANSLATE(x) ((unsigned)(x) <= 304 ? yytranslate[x] : 264)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    63,    58,     2,    65,
    66,    61,    59,    54,    60,     2,    62,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    53,    50,    68,
    55,    67,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    69,     2,    70,    57,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    51,    56,    52,    64,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     7,    11,    12,    16,    17,    21,
    22,    26,    27,    31,    32,    36,    38,    40,    42,    43,
    44,    45,    46,    56,    58,    60,    61,    62,    63,    71,
    72,    76,    79,    80,    84,    85,    88,    89,    90,    94,
    95,    99,   100,   104,   105,   109,   110,   114,   115,   119,
   122,   123,   128,   129,   131,   132,   136,   137,   142,   144,
   146,   147,   148,   149,   150,   160,   162,   164,   166,   168,
   170,   172,   174,   176,   178,   180,   182,   186,   188,   192,
   194,   198,   200,   204,   208,   210,   214,   218,   220,   224,
   228,   232,   234,   237,   240,   243,   245,   247,   251,   253,
   255,   257,   259,   261,   263,   265,   266,   270,   272,   274,
   276,   277,   281,   283,   285,   287,   289,   291,   293,   295,
   297,   299,   301,   303,   305,   307,   309,   311,   313,   315,
   317,   319,   321,   324,   325,   330,   331,   333,   335,   338,
   339,   344,   345,   347,   349,   351,   353,   355,   358,   360,
   363,   367,   370,   372,   374,   377,   379,   381,   383,   385,
   387,   388,   389,   390,   391,   401,   404,   407,   408,   409,
   410,   416,   417,   421,   422,   423,   424,   425,   426,   427,
   428,   429,   447,   449,   451,   453,   455,   457,   459,   462,
   465,   466,   467,   468,   474,   475,   479,   482,   485,   486,
   487,   491,   492,   493,   499,   500,   504,   505,   506,   507,
   508,   518,   521,   522,   527,   528,   530,   531,   532,   539,
   542,   543,   544,   550,   551,   552,   559,   561,   563,   564,
   565,   572,   574,   576,   577,   581,   584,   587,   588,   589,
   590,   596,   597,   598,   605,   607,   608,   609,   610,   611,
   612,   622,   623,   624,   625,   626,   637,   639,   641,   642,
   644,   646,   647,   651,   652,   657,   659,   662,   663,   668,
   669,   670,   671,   677,   679,   681,   683,   684,   685,   692,
   693,   694,   695,   702,   703,   706,   707,   712,   713,   714,
   715,   721,   722,   723,   729,   730
};

static const short yyrhs[] = {    72,
     0,    73,    72,     0,     0,     0,   129,    74,    50,     0,
     0,   111,    75,    50,     0,     0,   225,    76,    50,     0,
     0,    85,    77,    50,     0,     0,    80,    78,    50,     0,
     0,     1,    79,    50,     0,   259,     0,   256,     0,   262,
     0,     0,     0,     0,     0,     5,    81,     3,    82,    51,
    83,    72,    84,    52,     0,    86,     0,   110,     0,     0,
     0,     0,    92,    87,    51,    88,    95,    89,    52,     0,
     0,     6,    91,   109,     0,    90,    93,     0,     0,    53,
    94,   103,     0,     0,    95,    96,     0,     0,     0,   129,
    97,    50,     0,     0,   111,    98,    50,     0,     0,   225,
    99,    50,     0,     0,   221,   100,    50,     0,     0,   230,
   101,    50,     0,     0,     1,   102,    50,     0,   106,   104,
     0,     0,   104,    54,   105,   106,     0,     0,   109,     0,
     0,    44,   107,   109,     0,     0,   106,    44,   108,   109,
     0,     3,     0,    90,     0,     0,     0,     0,     0,     4,
   112,   116,   113,   109,   114,    55,   115,   117,     0,   148,
     0,   152,     0,   153,     0,   154,     0,   151,     0,   206,
     0,   210,     0,   106,     0,   118,     0,   119,     0,   120,
     0,   119,    56,   120,     0,   121,     0,   120,    57,   121,
     0,   122,     0,   121,    58,   122,     0,   123,     0,   122,
    45,   123,     0,   122,    46,   123,     0,   124,     0,   123,
    59,   124,     0,   123,    60,   124,     0,   125,     0,   124,
    61,   125,     0,   124,    62,   125,     0,   124,    63,   125,
     0,   126,     0,    59,   126,     0,    60,   126,     0,    64,
   126,     0,   106,     0,   127,     0,    65,   118,    66,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    42,     0,
    43,     0,   118,     0,     0,     7,   130,   131,     0,   156,
     0,   167,     0,   191,     0,     0,   133,   132,   139,     0,
   134,     0,   137,     0,   135,     0,   136,     0,   106,     0,
   148,     0,   151,     0,   152,     0,   154,     0,   153,     0,
   155,     0,   200,     0,   206,     0,   210,     0,   156,     0,
   167,     0,   191,     0,   135,     0,   206,     0,   106,     0,
   142,   140,     0,     0,   140,    54,   141,   142,     0,     0,
   146,     0,   147,     0,   146,   144,     0,     0,   144,    54,
   145,   146,     0,     0,   109,     0,   214,     0,   149,     0,
   150,     0,     8,     0,     8,     8,     0,     9,     0,    10,
     8,     0,    10,     8,     8,     0,    10,     9,     0,    11,
     0,    12,     0,     8,    11,     0,    13,     0,    14,     0,
    15,     0,    16,     0,    17,     0,     0,     0,     0,     0,
    18,   157,   109,   158,    51,   159,   161,   160,    52,     0,
   163,   162,     0,   162,   163,     0,     0,     0,     0,   133,
   164,   139,   165,    50,     0,     0,     1,   166,    50,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    19,   168,
   109,   169,    20,   170,    65,   171,   176,   172,    66,   173,
    51,   174,   177,   175,    52,     0,   148,     0,   152,     0,
   153,     0,   154,     0,   191,     0,   106,     0,   179,   178,
     0,   178,   179,     0,     0,     0,     0,   183,   180,   189,
   181,    50,     0,     0,     1,   182,    50,     0,   185,   184,
     0,   184,   185,     0,     0,     0,    27,   186,    53,     0,
     0,     0,    26,   187,   118,   188,    53,     0,     0,   133,
   190,   142,     0,     0,     0,     0,     0,    21,   192,   109,
   193,    51,   194,   196,   195,    52,     0,   199,   197,     0,
     0,   197,    54,   198,   199,     0,     0,     3,     0,     0,
     0,   203,    54,   201,   128,   202,    67,     0,   203,    67,
     0,     0,     0,    22,   204,    68,   205,   134,     0,     0,
     0,   209,    68,   207,   128,   208,    67,     0,   209,     0,
    23,     0,     0,     0,   213,    68,   211,   128,   212,    67,
     0,   213,     0,    24,     0,     0,   109,   215,   216,     0,
   218,   217,     0,   217,   218,     0,     0,     0,     0,    69,
   219,   128,   220,    70,     0,     0,     0,   224,    29,   222,
   138,   223,   143,     0,    28,     0,     0,     0,     0,     0,
     0,    25,   226,   109,   227,    51,   228,   162,   229,    52,
     0,     0,     0,     0,     0,   235,   236,   231,     3,   232,
   237,   233,   247,   234,   250,     0,    30,     0,    31,     0,
     0,   138,     0,    32,     0,     0,    65,   238,    66,     0,
     0,    65,   239,   240,    66,     0,     1,     0,   243,   241,
     0,     0,   241,    54,   242,   243,     0,     0,     0,     0,
   246,   244,   138,   245,   146,     0,    33,     0,    34,     0,
    35,     0,     0,     0,    36,   248,    65,   249,   103,    66,
     0,     0,     0,     0,    37,   251,    65,   252,   253,    66,
     0,     0,    39,   254,     0,     0,   254,    54,   255,    39,
     0,     0,     0,     0,    48,   257,   106,   258,    41,     0,
     0,     0,    47,   260,   106,   261,    39,     0,     0,    49,
   263,    39,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   237,   240,   241,   245,   250,   253,   258,   261,   266,   269,
   274,   277,   282,   285,   290,   294,   295,   296,   299,   304,
   325,   329,   333,   343,   344,   347,   431,   435,   439,   448,
   454,   460,   475,   480,   483,   490,   491,   495,   500,   503,
   508,   511,   516,   519,   524,   527,   532,   535,   540,   546,
   554,   560,   570,   577,   583,   588,   594,   600,   608,   614,
   634,   640,   644,   648,   652,   677,   678,   679,   680,   681,
   682,   686,   690,   734,   736,   738,   739,   746,   747,   754,
   755,   762,   763,   767,   774,   775,   779,   786,   787,   791,
   795,   802,   803,   809,   815,   824,   833,   834,   841,   845,
   849,   853,   857,   862,   869,   878,   883,   883,   884,   885,
   888,   894,   925,   926,   930,   934,   935,   949,   950,   951,
   952,   953,   954,   958,   959,   960,   964,   965,   966,   970,
   974,   975,   988,   995,  1001,  1011,  1018,  1019,  1023,  1030,
  1036,  1046,  1053,  1061,  1071,  1072,  1076,  1080,  1084,  1091,
  1095,  1099,  1106,  1110,  1114,  1121,  1125,  1132,  1139,  1146,
  1152,  1158,  1180,  1184,  1188,  1204,  1207,  1208,  1211,  1217,
  1221,  1253,  1258,  1264,  1270,  1274,  1278,  1282,  1286,  1313,
  1317,  1321,  1337,  1342,  1346,  1350,  1354,  1355,  1417,  1420,
  1421,  1424,  1430,  1434,  1461,  1466,  1472,  1480,  1489,  1496,
  1501,  1508,  1513,  1517,  1525,  1531,  1555,  1561,  1586,  1590,
  1594,  1608,  1611,  1617,  1617,  1620,  1644,  1650,  1654,  1683,
  1716,  1726,  1730,  1737,  1743,  1747,  1764,  1781,  1789,  1795,
  1799,  1816,  1833,  1840,  1846,  1858,  1866,  1875,  1881,  1887,
  1891,  1905,  1912,  1916,  1949,  1954,  1960,  1966,  1988,  1992,
  1996,  2005,  2012,  2041,  2045,  2049,  2073,  2078,  2083,  2090,
  2091,  2100,  2105,  2108,  2113,  2117,  2123,  2126,  2132,  2132,
  2135,  2141,  2145,  2166,  2170,  2174,  2181,  2186,  2190,  2195,
  2202,  2207,  2211,  2216,  2222,  2230,  2236,  2244,  2250,  2255,
  2259,  2279,  2284,  2288,  2308,  2313
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"CONST","MODULE","INTERFACE","TYPEDEF","LONG","SHORT","UNSIGNED","DOUBLE","FLOAT",
"CHAR","WCHAR","OCTET","BOOLEAN","ANY","STRUCT","UNION","SWITCH","ENUM","SEQUENCE",
"STRING","WSTRING","EXCEPTION","CASE","DEFAULT","READONLY","ATTRIBUTE","ONEWAY",
"IDEMPOTENT","VOID","IN","OUT","INOUT","RAISES","CONTEXT","INTEGER_LITERAL",
"STRING_LITERAL","CHARACTER_LITERAL","FLOATING_PT_LITERAL","TRUETOK","FALSETOK",
"SCOPE_DELIMITOR","LEFT_SHIFT","RIGHT_SHIFT","PRAGMA_ID","PRAGMA_VERSION","PRAGMA_PREFIX",
"';'","'{'","'}'","':'","','","'='","'|'","'^'","'&'","'+'","'-'","'*'","'/'",
"'%'","'~'","'('","')'","'>'","'<'","'['","']'","start","definitions","definition",
"@1","@2","@3","@4","@5","@6","module","@7","@8","@9","@10","interface_def",
"interface","@11","@12","@13","interface_decl","@14","interface_header","inheritance_spec",
"@15","exports","export","@16","@17","@18","@19","@20","@21","at_least_one_scoped_name",
"scoped_names","@22","scoped_name","@23","@24","id","forward","const_dcl","@25",
"@26","@27","@28","const_type","expression","const_expr","or_expr","xor_expr",
"and_expr","shift_expr","add_expr","mult_expr","unary_expr","primary_expr","literal",
"positive_int_expr","type_dcl","@29","type_declarator","@30","type_spec","simple_type_spec",
"base_type_spec","template_type_spec","constructed_type_spec","param_type_spec",
"at_least_one_declarator","declarators","@31","declarator","at_least_one_simple_declarator",
"simple_declarators","@32","simple_declarator","complex_declarator","integer_type",
"signed_int","unsigned_int","floating_pt_type","char_type","octet_type","boolean_type",
"any_type","struct_type","@33","@34","@35","@36","at_least_one_member","members",
"member","@37","@38","@39","union_type","@40","@41","@42","@43","@44","@45",
"@46","@47","switch_type_spec","at_least_one_case_branch","case_branches","case_branch",
"@48","@49","@50","at_least_one_case_label","case_labels","case_label","@51",
"@52","@53","element_spec","@54","enum_type","@55","@56","@57","@58","at_least_one_enumerator",
"enumerators","@59","enumerator","sequence_type_spec","@60","@61","seq_head",
"@62","@63","string_type_spec","@64","@65","string_head","wstring_type_spec",
"@66","@67","wstring_head","array_declarator","@68","at_least_one_array_dim",
"array_dims","array_dim","@69","@70","attribute","@71","@72","opt_readonly",
"exception","@73","@74","@75","@76","operation","@77","@78","@79","@80","opt_op_attribute",
"op_type_spec","parameter_list","@81","@82","at_least_one_parameter","parameters",
"@83","parameter","@84","@85","direction","opt_raises","@86","@87","opt_context",
"@88","@89","at_least_one_string_literal","string_literals","@90","pragma_version",
"@91","@92","pragma_id","@93","@94","pragma_prefix","@95", NULL
};
#endif

static const short yyr1[] = {     0,
    71,    72,    72,    74,    73,    75,    73,    76,    73,    77,
    73,    78,    73,    79,    73,    73,    73,    73,    81,    82,
    83,    84,    80,    85,    85,    87,    88,    89,    86,    91,
    90,    92,    94,    93,    93,    95,    95,    97,    96,    98,
    96,    99,    96,   100,    96,   101,    96,   102,    96,   103,
   105,   104,   104,   106,   107,   106,   108,   106,   109,   110,
   112,   113,   114,   115,   111,   116,   116,   116,   116,   116,
   116,   116,   116,   117,   118,   119,   119,   120,   120,   121,
   121,   122,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   125,   125,   125,   125,   126,   126,   126,   127,   127,
   127,   127,   127,   127,   128,   130,   129,   129,   129,   129,
   132,   131,   133,   133,   134,   134,   134,   135,   135,   135,
   135,   135,   135,   136,   136,   136,   137,   137,   137,   138,
   138,   138,   139,   141,   140,   140,   142,   142,   143,   145,
   144,   144,   146,   147,   148,   148,   149,   149,   149,   150,
   150,   150,   151,   151,   151,   152,   152,   153,   154,   155,
   157,   158,   159,   160,   156,   161,   162,   162,   164,   165,
   163,   166,   163,   168,   169,   170,   171,   172,   173,   174,
   175,   167,   176,   176,   176,   176,   176,   176,   177,   178,
   178,   180,   181,   179,   182,   179,   183,   184,   184,   186,
   185,   187,   188,   185,   190,   189,   192,   193,   194,   195,
   191,   196,   198,   197,   197,   199,   201,   202,   200,   200,
   204,   205,   203,   207,   208,   206,   206,   209,   211,   212,
   210,   210,   213,   215,   214,   216,   217,   217,   219,   220,
   218,   222,   223,   221,   224,   224,   226,   227,   228,   229,
   225,   231,   232,   233,   234,   230,   235,   235,   235,   236,
   236,   238,   237,   239,   237,   237,   240,   242,   241,   241,
   244,   245,   243,   246,   246,   246,   248,   249,   247,   247,
   251,   252,   250,   250,   253,   255,   254,   254,   257,   258,
   256,   260,   261,   259,   263,   262
};

static const short yyr2[] = {     0,
     1,     2,     0,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     0,     3,     1,     1,     1,     0,     0,
     0,     0,     9,     1,     1,     0,     0,     0,     7,     0,
     3,     2,     0,     3,     0,     2,     0,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
     0,     4,     0,     1,     0,     3,     0,     4,     1,     1,
     0,     0,     0,     0,     9,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     3,     1,
     3,     1,     3,     3,     1,     3,     3,     1,     3,     3,
     3,     1,     2,     2,     2,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     0,     3,     1,     1,     1,
     0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     0,     4,     0,     1,     1,     2,     0,
     4,     0,     1,     1,     1,     1,     1,     2,     1,     2,
     3,     2,     1,     1,     2,     1,     1,     1,     1,     1,
     0,     0,     0,     0,     9,     2,     2,     0,     0,     0,
     5,     0,     3,     0,     0,     0,     0,     0,     0,     0,
     0,    17,     1,     1,     1,     1,     1,     1,     2,     2,
     0,     0,     0,     5,     0,     3,     2,     2,     0,     0,
     3,     0,     0,     5,     0,     3,     0,     0,     0,     0,
     9,     2,     0,     4,     0,     1,     0,     0,     6,     2,
     0,     0,     5,     0,     0,     6,     1,     1,     0,     0,
     6,     1,     1,     0,     3,     2,     2,     0,     0,     0,
     5,     0,     0,     6,     1,     0,     0,     0,     0,     0,
     9,     0,     0,     0,     0,    10,     1,     1,     0,     1,
     1,     0,     3,     0,     4,     1,     2,     0,     4,     0,
     0,     0,     5,     1,     1,     1,     0,     0,     6,     0,
     0,     0,     6,     0,     2,     0,     4,     0,     0,     0,
     5,     0,     0,     5,     0,     3
};

static const short yydefact[] = {     0,
    14,    61,    19,    30,   106,   161,   174,   207,   247,   292,
   289,   295,     1,     0,    12,    10,    24,    35,    26,    25,
     6,     4,   108,   109,   110,     8,    17,    16,    18,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     2,     0,     0,    33,    32,     0,     0,     0,     0,
    15,    59,   147,   149,     0,   153,   154,   156,   157,   158,
   159,   228,   233,    55,    73,    54,    62,    66,   145,   146,
    70,    67,    68,    69,    71,   227,    72,   232,    20,    31,
   160,   221,   117,   107,   111,   113,   115,   116,   114,   118,
   119,   120,   122,   121,   123,   127,   128,   129,   124,     0,
   125,   126,   162,   175,   208,   248,   293,   290,   296,    13,
    11,     0,    27,     7,     5,     9,   148,   155,   150,   152,
     0,    57,     0,   224,   229,     0,     0,     0,   217,   220,
     0,     0,     0,     0,     0,     0,    34,    53,    37,   151,
    56,     0,    63,     0,     0,    21,   222,   143,   112,   136,
   137,   138,   144,     0,   163,   176,   209,   249,   294,   291,
    50,     0,    58,     0,    99,   100,   101,   102,   103,   104,
     0,     0,     0,     0,    96,   105,    75,    76,    78,    80,
    82,    85,    88,    92,    97,   225,   230,     0,     0,     0,
   133,   218,     0,     0,     0,   168,    51,    48,   245,   257,
   258,     0,    36,    40,    38,    44,     0,    42,    46,     0,
    64,    93,    94,    95,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    22,   223,   239,
   235,   238,   134,     0,   172,   169,   164,   168,   177,   216,
   210,   215,     0,     0,     0,    29,     0,     0,     0,   242,
     0,     0,   261,   132,   130,   260,   131,   252,     0,    98,
    77,    79,    81,    83,    84,    86,    87,    89,    90,    91,
   226,   231,     0,     0,   236,     0,   219,     0,     0,     0,
     0,     0,     0,   212,   167,     0,    52,    49,    41,    39,
    45,     0,    43,    47,     0,    65,    74,    23,   240,   237,
   135,   173,   170,   165,   147,   188,   183,   184,   185,   186,
   178,   187,   211,   213,   251,   243,   253,     0,     0,     0,
     0,     0,     0,   241,   171,   179,   214,   143,   244,   142,
   266,   264,   254,     0,   139,     0,     0,   280,   180,   140,
   263,   274,   275,   276,     0,   270,   271,   277,   255,     0,
     0,   265,   267,     0,     0,   284,   195,   202,   200,   181,
   191,   192,   199,   141,   268,   272,   278,   281,   256,     0,
     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
   196,   203,   201,   182,   190,   205,   193,   198,   269,   273,
     0,   282,     0,     0,     0,   279,     0,   204,   206,   194,
   288,     0,   285,   283,   286,     0,   287,     0,     0,     0
};

static const short yydefgoto[] = {   408,
    13,    14,    49,    48,    50,    44,    43,    30,    15,    32,
   126,   188,   273,    16,    17,    47,   139,   202,    18,    33,
    19,    46,   112,   162,   203,   248,   247,   251,   249,   252,
   245,   137,   161,   244,   175,   121,   142,    66,    20,    21,
    31,   123,   164,   259,    67,   296,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,    22,    34,    84,
   128,   236,    86,    87,    88,    89,   256,   149,   191,   276,
   150,   329,   335,   351,   151,   152,    90,    69,    70,    91,
    92,    93,    94,    95,    96,    35,   131,   193,   280,   237,
   243,   285,   279,   319,   278,    97,    36,   132,   194,   282,
   320,   334,   350,   373,   311,   360,   374,   361,   375,   395,
   370,   362,   376,   363,   372,   371,   393,   387,   394,    98,
    37,   133,   195,   283,   241,   284,   321,   242,    99,   154,
   234,   100,   127,   189,   101,   144,   226,    76,   102,   145,
   227,    78,   153,   190,   231,   275,   232,   274,   318,   206,
   292,   322,   207,    26,    38,   134,   196,   286,   209,   295,
   323,   338,   356,   210,   258,   333,   336,   337,   345,   353,
   377,   346,   354,   378,   347,   349,   355,   379,   369,   380,
   397,   402,   403,   406,    27,    40,   136,    28,    39,   135,
    29,    41
};

static const short yypact[] = {   382,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   106,-32768,-32768,-32768,   -15,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -22,
    33,    73,    76,   425,    76,    76,    76,    76,    31,    31,
    69,-32768,    64,    84,-32768,-32768,    75,    90,    92,    93,
-32768,-32768,    43,-32768,    65,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   100,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    77,-32768,    79,-32768,-32768,
-32768,-32768,   100,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -17,
-32768,-32768,-32768,-32768,-32768,-32768,   100,   100,-32768,-32768,
-32768,    31,-32768,-32768,-32768,-32768,-32768,-32768,   138,-32768,
    76,-32768,    76,-32768,-32768,    97,    82,    76,-32768,-32768,
   101,   131,   105,   108,   118,   119,-32768,   100,-32768,-32768,
-32768,    76,-32768,    21,    21,-32768,-32768,    98,-32768,-32768,
-32768,-32768,-32768,    21,-32768,-32768,-32768,-32768,-32768,-32768,
   115,   284,-32768,   116,-32768,-32768,-32768,-32768,-32768,-32768,
    28,    28,    28,    21,   100,-32768,   117,   120,   121,    -6,
    32,    36,-32768,-32768,-32768,-32768,-32768,   114,   448,   103,
   122,-32768,   401,   109,   172,-32768,-32768,-32768,-32768,-32768,
-32768,   130,-32768,-32768,-32768,-32768,   154,-32768,-32768,   465,
-32768,-32768,-32768,-32768,   123,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,   124,   126,-32768,-32768,-32768,
-32768,-32768,-32768,   127,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   214,    31,   134,-32768,   136,   137,   140,-32768,
   145,   147,-32768,   100,-32768,-32768,-32768,-32768,    21,-32768,
   120,   121,    -6,    32,    32,    36,    36,-32768,-32768,-32768,
-32768,-32768,   146,    21,   103,    76,-32768,   149,    76,   148,
   354,   239,   150,   151,-32768,   157,   100,-32768,-32768,-32768,
-32768,   490,-32768,-32768,   185,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   193,   100,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   133,   156,   144,
   172,    76,    24,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   155,-32768,   160,   158,   168,    67,   177,-32768,-32768,
-32768,-32768,-32768,-32768,   173,-32768,-32768,-32768,-32768,    57,
    76,-32768,   162,   490,   175,   183,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   164,
    21,   188,   192,    26,   425,    78,    67,    76,    31,   180,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   184,-32768,   198,    76,   209,-32768,   226,-32768,-32768,-32768,
-32768,   203,   216,-32768,-32768,   232,-32768,   272,   273,-32768
};

static const short yypgoto[] = {-32768,
     4,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -105,-32768,-32768,   -25,-32768,-32768,   -33,-32768,   113,
-32768,-32768,-32768,-32768,-32768,-32768,  -163,-32768,    60,    61,
    59,  -103,   -99,   -95,   -35,-32768,  -125,   142,-32768,-32768,
-32768,   -27,    91,  -189,-32768,-32768,  -260,     0,-32768,-32768,
  -253,-32768,-32768,-32768,  -296,-32768,   -21,-32768,-32768,   250,
   -19,   -18,   -14,-32768,    16,-32768,-32768,-32768,-32768,-32768,
    44,   128,-32768,-32768,-32768,    19,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -90,-32768,-32768,
-32768,-32768,-32768,   -70,-32768,-32768,-32768,-32768,-32768,     8,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -13,-32768,-32768,
-32768,-32768,-32768,-32768,   -30,-32768,-32768,-32768,   255,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    35,-32768,-32768,-32768,
-32768,-32768,-32768,   161,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -66,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768
};


#define	YYLAST		534


static const short yytable[] = {    80,
    75,   103,   104,   105,   106,    65,    85,    25,    83,    68,
   215,    72,    73,   107,   108,    23,    74,    42,    24,   187,
   255,    25,   301,    52,   331,   330,   357,    51,   192,    23,
    52,   316,    24,    52,   -60,    52,   129,    45,   219,   220,
    53,    54,    55,    56,    57,    58,    59,    60,    61,   130,
   117,   358,   359,   118,   364,    62,    63,   357,   165,   166,
   167,   168,   169,   170,    64,   165,   166,   167,   168,   169,
   170,    64,   119,   120,    64,    79,    64,  -189,    52,   171,
   172,   390,   358,   359,   173,   174,   138,   141,   332,   143,
   221,   222,   174,   366,   148,   297,   223,   224,   225,   342,
   343,   344,   255,   358,   359,    -3,     1,   109,   163,     2,
     3,     4,     5,   110,     1,   264,   265,     2,     3,     4,
     5,   266,   267,     6,     7,   113,     8,   268,   269,   270,
     9,     6,     7,   111,     8,   212,   213,   214,     9,   114,
   399,   115,   116,   122,   124,   140,   125,   146,   299,   147,
   156,   155,    10,    11,    12,   157,   159,    -3,   158,   160,
    10,    11,    12,    83,   255,    -3,  -234,    83,   197,    25,
   211,   230,   216,   239,   240,   233,   217,    23,   218,   257,
    24,   246,   250,   288,   254,   289,   290,   317,   260,   291,
   271,   228,   272,   277,   293,    25,   294,   298,   302,   304,
   117,   313,   324,    23,   314,   325,    24,   382,   315,   326,
   339,   340,   348,   381,   235,   365,    52,    83,   287,   368,
  -262,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    81,     6,     7,   341,     8,    82,    62,    63,   352,   367,
   383,    52,   148,   384,   392,   148,   305,    54,    55,   396,
   398,    58,    59,    60,    61,    83,   306,    64,   400,     8,
   307,   257,   308,   309,   401,  -250,   254,   310,   404,   405,
   407,   409,   410,   391,   204,   261,   263,   262,   303,   229,
    71,   281,    64,   385,   198,    77,  -259,     2,   328,   312,
     5,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -259,     6,     7,   205,     8,   388,  -259,   327,     9,   300,
   389,   199,  -246,   200,   201,  -259,     0,   328,     0,     0,
   238,     0,   208,   257,     0,     0,     0,  -259,   254,     0,
     0,     0,     0,     0,     0,   -28,     0,     0,     0,     0,
     0,     0,     0,     0,   328,     0,     0,   386,     0,    83,
     0,     0,     0,   138,   235,     0,    52,     0,     0,     0,
   148,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    81,     6,     7,     0,     8,    82,    62,    63,     0,     0,
     0,    -3,     1,     0,     0,     2,     3,     4,     5,     0,
     0,     0,     0,     0,     0,     0,     0,    64,     0,     6,
     7,   235,     8,    52,     0,  -166,     9,     0,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    81,     6,     7,
     0,     8,    82,    62,    63,     0,     0,    52,    10,    11,
    12,     0,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    81,     6,     7,    64,     8,    82,    62,    63,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    81,     0,     0,    52,    64,    82,
    62,    63,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    81,     0,     0,     0,     0,     0,    62,     0,     0,
     0,    64,    52,     0,     0,     0,   253,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    81,     0,    64,     0,
     0,     0,    62,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    64
};

static const short yycheck[] = {    33,
    31,    35,    36,    37,    38,    31,    34,     0,    34,    31,
   174,    31,    31,    39,    40,     0,    31,    14,     0,   145,
   210,    14,   276,     3,     1,   322,     1,    50,   154,    14,
     3,   292,    14,     3,    50,     3,    54,    53,    45,    46,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    67,
     8,    26,    27,    11,   351,    23,    24,     1,    38,    39,
    40,    41,    42,    43,    44,    38,    39,    40,    41,    42,
    43,    44,     8,     9,    44,     3,    44,    52,     3,    59,
    60,   378,    26,    27,    64,    65,   112,   121,    65,   123,
    59,    60,    65,   354,   128,   259,    61,    62,    63,    33,
    34,    35,   292,    26,    27,     0,     1,    39,   142,     4,
     5,     6,     7,    50,     1,   219,   220,     4,     5,     6,
     7,   221,   222,    18,    19,    51,    21,   223,   224,   225,
    25,    18,    19,    50,    21,   171,   172,   173,    25,    50,
   394,    50,    50,    44,    68,     8,    68,    51,   274,    68,
    20,    51,    47,    48,    49,    51,    39,    52,    51,    41,
    47,    48,    49,   189,   354,    52,    69,   193,    54,   162,
    55,    69,    56,    65,     3,    54,    57,   162,    58,   210,
   162,    52,    29,    50,   210,    50,    50,     3,    66,    50,
    67,   188,    67,    67,    50,   188,    50,    52,    50,    52,
     8,    52,    70,   188,    54,    50,   188,   371,    52,    66,
    51,    54,    36,    50,     1,    54,     3,   243,   244,    37,
    66,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    66,    21,    22,    23,    24,    66,    65,
    53,     3,   276,    52,    65,   279,     8,     9,    10,    66,
    53,    13,    14,    15,    16,   281,   282,    44,    50,    21,
   282,   292,   282,   282,    39,    52,   292,   282,    66,    54,
    39,     0,     0,   379,   162,   216,   218,   217,   279,   189,
    31,   238,    44,   374,     1,    31,     3,     4,   322,   282,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,   162,    21,   376,    23,   321,    25,   275,
   377,    28,    29,    30,    31,    32,    -1,   351,    -1,    -1,
   193,    -1,   162,   354,    -1,    -1,    -1,    44,   354,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   378,    -1,    -1,   375,    -1,   375,
    -1,    -1,    -1,   379,     1,    -1,     3,    -1,    -1,    -1,
   394,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
    -1,     0,     1,    -1,    -1,     4,     5,     6,     7,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    18,
    19,     1,    21,     3,    -1,    52,    25,    -1,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    21,    22,    23,    24,    -1,    -1,     3,    47,    48,
    49,    -1,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    44,    21,    22,    23,    24,    -1,
     3,    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    -1,    -1,     3,    44,    22,
    23,    24,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    -1,    -1,    -1,    -1,    -1,    23,    -1,    -1,
    -1,    44,     3,    -1,    -1,    -1,    32,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    -1,    44,    -1,
    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 246 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeDeclSeen);
        ;
    break;}
case 5:
#line 250 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 6:
#line 254 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstDeclSeen);
        ;
    break;}
case 7:
#line 258 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 8:
#line 262 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptDeclSeen);
        ;
    break;}
case 9:
#line 266 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 10:
#line 270 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceDeclSeen);
        ;
    break;}
case 11:
#line 274 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 12:
#line 278 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ModuleDeclSeen);
        ;
    break;}
case 13:
#line 282 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 14:
#line 286 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 15:
#line 290 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 19:
#line 300 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleSeen);
	  ;
    break;}
case 20:
#line 304 "idl.yy"
{
	    UTL_ScopedName 	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	    AST_Module		*m = NULL;
	    UTL_Scope		*s = idl_global->scopes()->top_non_null();
	    UTL_StrList		*p = idl_global->pragmas();	

	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleIDSeen);
	    /*
	     * Make a new module and add it to the enclosing scope
	     */
	    if (s != NULL) {
	      m = idl_global->gen()->create_module(n, p);
	      AST_Module* sb = s->fe_add_module(m); if (sb != NULL) m = sb;
	    }
	    /*
	     * Push it on the stack
	     */
	    idl_global->scopes()->push(m);
	  ;
    break;}
case 21:
#line 325 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleSqSeen);
	  ;
    break;}
case 22:
#line 329 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleBodySeen);
	  ;
    break;}
case 23:
#line 333 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleQsSeen);
	    /*
	     * Finished with this module - pop it from the scope stack
	     */
	    idl_global->scopes()->pop();
	  ;
    break;}
case 26:
#line 349 "idl.yy"
{
	  UTL_Scope     *s = idl_global->scopes()->top_non_null();
	  AST_Interface *i = NULL;
	  AST_Decl	*v = NULL;
	  UTL_StrList   *p = idl_global->pragmas();
	  AST_Decl	*d = NULL;
	  AST_Interface *fd = NULL;

	  /*
	   * Make a new interface node and add it to its enclosing scope
	   */
	  if (s != NULL && yyvsp[0].ihval != NULL) {
	    i = idl_global->gen()->create_interface(yyvsp[0].ihval->interface_name(),
						    yyvsp[0].ihval->inherits(),
						    yyvsp[0].ihval->n_inherits(),
						    p);
	    if (i != NULL &&
		(d = s->lookup_by_name(i->name(), I_FALSE)) != NULL) {
	      /*
	       * See if we're defining a forward declared interface.
	       */
	      if (d->node_type() == AST_Decl::NT_interface) {
		/*
		 * Narrow to an interface
		 */
		fd = AST_Interface::narrow_from_decl(d);
		/*
		 * Successful?
		 */
		if (fd == NULL) {
		  /*
		   * Should we give an error here?
		   */
		}
		/*
		 * If it is a forward declared interface..
		 */
		else if (!fd->is_defined()) {
		  /*
		   * Check if redefining in same scope
		   */
		  if (fd->defined_in() != s) {
		    idl_global->err()
		       ->error3(UTL_Error::EIDL_SCOPE_CONFLICT,
				i,
				fd,
				ScopeAsDecl(s));
		  }
		  /*
		   * All OK, do the redefinition
		   */
		  else {
		    fd->set_inherits(yyvsp[0].ihval->inherits());
		    fd->set_n_inherits(yyvsp[0].ihval->n_inherits());
		    /*
		     * Update place of definition
		     */
		    fd->set_imported(idl_global->imported());
		    fd->set_in_main_file(idl_global->in_main_file());
		    fd->set_line(idl_global->lineno());
		    fd->set_file_name(idl_global->filename());
		    fd->add_pragmas(p);
		    /*
		     * Use full definition node
		     */
		    delete i;
		    i = fd;
		  }
	        }
	      }
	    }
	    /*
	     * Add the interface to its definition scope
	     */
	    (void) s->fe_add_interface(i);
	  }
	  /*
	   * Push it on the scope stack
	   */
	  idl_global->scopes()->push(i);
        ;
    break;}
case 27:
#line 431 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceSqSeen);
	;
    break;}
case 28:
#line 435 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceBodySeen);
	;
    break;}
case 29:
#line 439 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceQsSeen);
	  /*
	   * Done with this interface - pop it off the scopes stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 30:
#line 450 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceSeen);
	 ;
    break;}
case 31:
#line 454 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceIDSeen);
	   yyval.idval = yyvsp[0].idval;
	 ;
    break;}
case 32:
#line 462 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InheritSpecSeen);
	  /*
	   * Create an AST representation of the information in the header
	   * part of an interface - this representation contains a computed
	   * list of all interfaces which this interface inherits from,
	   * recursively
	   */
	  yyval.ihval = new FE_InterfaceHeader(new UTL_ScopedName(yyvsp[-1].idval, NULL), yyvsp[0].nlval);
	;
    break;}
case 33:
#line 476 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InheritColonSeen);
        ;
    break;}
case 34:
#line 480 "idl.yy"
{
	  yyval.nlval = yyvsp[0].nlval;
	;
    break;}
case 35:
#line 484 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 38:
#line 496 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeDeclSeen);
        ;
    break;}
case 39:
#line 500 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 40:
#line 504 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstDeclSeen);
        ;
    break;}
case 41:
#line 508 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 42:
#line 512 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptDeclSeen);
        ;
    break;}
case 43:
#line 516 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 44:
#line 520 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrDeclSeen);
        ;
    break;}
case 45:
#line 524 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 46:
#line 528 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpDeclSeen);
        ;
    break;}
case 47:
#line 532 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 48:
#line 536 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 49:
#line 540 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 50:
#line 548 "idl.yy"
{
	  yyval.nlval = new UTL_NameList(yyvsp[-1].idlist, yyvsp[0].nlval);
	;
    break;}
case 51:
#line 556 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SNListCommaSeen);
        ;
    break;}
case 52:
#line 560 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopedNameSeen);

	  if (yyvsp[-3].nlval == NULL)
	    yyval.nlval = new UTL_NameList(yyvsp[0].idlist, NULL);
	  else {
	    yyvsp[-3].nlval->nconc(new UTL_NameList(yyvsp[0].idlist, NULL));
	    yyval.nlval = yyvsp[-3].nlval;
	  }
	;
    break;}
case 53:
#line 571 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 54:
#line 578 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyval.idlist = new UTL_IdList(yyvsp[0].idval, NULL);
	;
    break;}
case 55:
#line 584 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopeDelimSeen);
        ;
    break;}
case 56:
#line 588 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyval.idlist = new UTL_IdList(new Identifier(yyvsp[-2].strval, 1, 0, I_FALSE),
			      new UTL_IdList(yyvsp[0].idval, NULL));
	;
    break;}
case 57:
#line 596 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopeDelimSeen);
        ;
    break;}
case 58:
#line 600 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyvsp[-3].idlist->nconc(new UTL_IdList(yyvsp[0].idval, NULL));
	  yyval.idlist = yyvsp[-3].idlist;
	;
    break;}
case 59:
#line 609 "idl.yy"
{
            yyval.idval = new Identifier(yyvsp[0].strval, 1, 0, I_FALSE);
        ;
    break;}
case 60:
#line 616 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_InterfaceFwd	*f = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_ForwardDeclSeen);
	  /*
	   * Create a node representing a forward declaration of an
	   * interface. Store it in the enclosing scope
	   */
	  if (s != NULL) {
	    f = idl_global->gen()->create_interface_fwd(n, p);
	    (void) s->fe_add_interface_fwd(f);
	  }
	;
    break;}
case 61:
#line 636 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstSeen);
        ;
    break;}
case 62:
#line 640 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstTypeSeen);
        ;
    break;}
case 63:
#line 644 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstIDSeen);
        ;
    break;}
case 64:
#line 648 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstAssignSeen);
        ;
    break;}
case 65:
#line 652 "idl.yy"
{
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[-4].idval, NULL);
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Constant		*c = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstExprSeen);
	  /*
	   * Create a node representing a constant declaration. Store
	   * it in the enclosing scope
	   */
	  if (yyvsp[0].exval != NULL && s != NULL) {
	    if (yyvsp[0].exval->coerce(yyvsp[-6].etval) == NULL)
	      idl_global->err()->coercion_error(yyvsp[0].exval, yyvsp[-6].etval);
	    else {
	      c =
		idl_global->gen()->create_constant(yyvsp[-6].etval, yyvsp[0].exval, n, p);
	      (void) s->fe_add_constant(c);
	    }
	  }
	;
    break;}
case 71:
#line 683 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_string;
	;
    break;}
case 72:
#line 687 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_wstring;
        ;
    break;}
case 73:
#line 691 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Decl		*d = NULL;
	  AST_PredefinedType	*c = NULL;
	  AST_Typedef		*t = NULL;

	  /*
	   * If the constant's type is a scoped name, it must resolve
	   * to a scalar constant type
	   */
	  if (s != NULL && (d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE)) != NULL) {
	    /*
	     * Look through typedefs
	     */
	    while (d->node_type() == AST_Decl::NT_typedef) {
	      t = AST_Typedef::narrow_from_decl(d);
	      if (t == NULL)
	        break;
	      d = t->base_type();
	    }
	    if (d == NULL)
	      yyval.etval = AST_Expression::EV_any;
	    else if (d->node_type() == AST_Decl::NT_pre_defined) {
	      c = AST_PredefinedType::narrow_from_decl(d);
	      if (c != NULL) {
	         yyval.etval = idl_global->PredefinedTypeToExprType(c->pt());
	      } else {
	         yyval.etval = AST_Expression::EV_any;
	      }
	    } else if (d->node_type() == AST_Decl::NT_string) {
	      yyval.etval = AST_Expression::EV_string;
	    }
	    else {
              // We should check for wstring here. Not done at the moment
	      // any typedef of wstring used would definitely fail with
	      // a coersion error. Fix this when support for wstring is added.
	      yyval.etval = AST_Expression::EV_any;
	    }
	  } else
	    yyval.etval = AST_Expression::EV_any;
	;
    break;}
case 77:
#line 740 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_or, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 79:
#line 748 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_xor, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 81:
#line 756 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_and, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 83:
#line 764 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_left,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 84:
#line 768 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_right,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 86:
#line 776 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_add, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 87:
#line 780 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_minus,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 89:
#line 788 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_mul, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 90:
#line 792 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_div, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 91:
#line 796 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_mod, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 93:
#line 804 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_u_plus,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 94:
#line 810 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_u_minus,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 95:
#line 816 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_bit_neg,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 96:
#line 825 "idl.yy"
{
	  /*
	   * An expression which is a scoped name is not resolved now,
	   * but only when it is evaluated (such as when it is assigned
	   * as a constant value)
	   */
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].idlist);
	;
    break;}
case 98:
#line 835 "idl.yy"
{
	  yyval.exval = yyvsp[-1].exval;
	;
    break;}
case 99:
#line 842 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].ival);
	;
    break;}
case 100:
#line 846 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].sval);
	;
    break;}
case 101:
#line 850 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].cval);
	;
    break;}
case 102:
#line 854 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].dval);
	;
    break;}
case 103:
#line 858 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr((idl_bool) I_TRUE,
					    AST_Expression::EV_bool);
	;
    break;}
case 104:
#line 863 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr((idl_bool) I_FALSE,
					    AST_Expression::EV_bool);
	;
    break;}
case 105:
#line 871 "idl.yy"
{
	    yyvsp[0].exval->evaluate(AST_Expression::EK_const);
	    yyval.exval = idl_global->gen()->create_expr(yyvsp[0].exval, AST_Expression::EV_ulong);
	;
    break;}
case 106:
#line 879 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_TypedefSeen);
	  ;
    break;}
case 111:
#line 890 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeSpecSeen);
        ;
    break;}
case 112:
#line 894 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l;
	  FE_Declarator		*d = NULL;
	  AST_Typedef		*t = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclaratorsSeen);
	  /*
	   * Create a list of type renamings. Add them to the
	   * enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL && yyvsp[0].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[0].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL) 
		continue;
              AST_Type * tp = d->compose(yyvsp[-2].dcval);
              if (tp == NULL) 
		continue;
	      t = idl_global->gen()->create_typedef(tp, d->name(), p);
	      (void) s->fe_add_typedef(t);
	    }
	    delete l;
	  }
	;
    break;}
case 115:
#line 931 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 117:
#line 936 "idl.yy"
{
	  UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE);
	  if (d == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	  yyval.dcval = d;
	;
    break;}
case 130:
#line 971 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 132:
#line 976 "idl.yy"
{
	  UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE);
	  if (d == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	  yyval.dcval = d;
	;
    break;}
case 133:
#line 990 "idl.yy"
{
	  yyval.dlval = new UTL_DeclList(yyvsp[-1].deval, yyvsp[0].dlval);
	;
    break;}
case 134:
#line 997 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsCommaSeen);
        ;
    break;}
case 135:
#line 1001 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsDeclSeen);

	  if (yyvsp[-3].dlval == NULL)
	    yyval.dlval = new UTL_DeclList(yyvsp[0].deval, NULL);
	  else {
	    yyvsp[-3].dlval->nconc(new UTL_DeclList(yyvsp[0].deval, NULL));
	    yyval.dlval = yyvsp[-3].dlval;
	  }
	;
    break;}
case 136:
#line 1012 "idl.yy"
{
	  yyval.dlval = NULL;
	;
    break;}
case 139:
#line 1024 "idl.yy"
{
	   yyval.dlval = new UTL_DeclList(yyvsp[-1].deval, yyvsp[0].dlval);
	;
    break;}
case 140:
#line 1032 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsCommaSeen);
	;
    break;}
case 141:
#line 1036 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsDeclSeen);

	  if (yyvsp[-3].dlval == NULL)
	    yyval.dlval = new UTL_DeclList(yyvsp[0].deval, NULL);
	  else {
	    yyvsp[-3].dlval->nconc(new UTL_DeclList(yyvsp[0].deval, NULL));
	    yyval.dlval = yyvsp[-3].dlval;
	  }
	;
    break;}
case 142:
#line 1047 "idl.yy"
{
	   yyval.dlval = NULL;
	;
    break;}
case 143:
#line 1055 "idl.yy"
{
	  yyval.deval = new FE_Declarator(new UTL_ScopedName(yyvsp[0].idval, NULL),
				 FE_Declarator::FD_simple, NULL);
	;
    break;}
case 144:
#line 1063 "idl.yy"
{
	  yyval.deval = new FE_Declarator(new UTL_ScopedName(yyvsp[0].dcval->local_name(), NULL),
				 FE_Declarator::FD_complex,
				 yyvsp[0].dcval);
	;
    break;}
case 147:
#line 1077 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_long;
	;
    break;}
case 148:
#line 1081 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_longlong;
        ;
    break;}
case 149:
#line 1085 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_short;
	;
    break;}
case 150:
#line 1092 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ulong;
	;
    break;}
case 151:
#line 1096 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ulonglong;
        ;
    break;}
case 152:
#line 1100 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ushort;
	;
    break;}
case 153:
#line 1107 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_double;
	;
    break;}
case 154:
#line 1111 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_float;
	;
    break;}
case 155:
#line 1115 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_longdouble;
        ;
    break;}
case 156:
#line 1122 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_char;
	;
    break;}
case 157:
#line 1126 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_wchar;
        ;
    break;}
case 158:
#line 1133 "idl.yy"
{ 
          yyval.etval = AST_Expression::EV_octet;
	;
    break;}
case 159:
#line 1140 "idl.yy"
{ 
	  yyval.etval = AST_Expression::EV_bool;
        ;
    break;}
case 160:
#line 1147 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_any;
	;
    break;}
case 161:
#line 1154 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructSeen);
        ;
    break;}
case 162:
#line 1158 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Structure		*d = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

	  idl_global->set_parse_state(IDL_GlobalData::PS_StructIDSeen);
	  /*
	   * Create a node representing a struct declaration. Add it
	   * to the enclosing scope
	   */
	  if (s != NULL) {
	    d = idl_global->gen()->create_structure(n, p);
	    (void) s->fe_add_structure(d);
	  }
	  /*
	   * Push the scope of the struct on the scopes stack
	   */
	  idl_global->scopes()->push(d);
	;
    break;}
case 163:
#line 1180 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructSqSeen);
        ;
    break;}
case 164:
#line 1184 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructBodySeen);
        ;
    break;}
case 165:
#line 1188 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructQsSeen);
	  /*
	   * Done with this struct. Pop its scope off the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval =
	      AST_Structure::narrow_from_scope(
				   idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 169:
#line 1213 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberTypeSeen);
        ;
    break;}
case 170:
#line 1217 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberDeclsSeen);
        ;
    break;}
case 171:
#line 1221 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l = NULL;
	  FE_Declarator		*d = NULL;
	  AST_Field		*f = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberDeclsCompleted);
	  /*
	   * Check for illegal recursive use of type
	   */
	  if (yyvsp[-4].dcval != NULL && AST_illegal_recursive_type(yyvsp[-4].dcval))
	    idl_global->err()->error1(UTL_Error::EIDL_RECURSIVE_TYPE, yyvsp[-4].dcval);
	  /*
	   * Create a node representing a struct or exception member
	   * Add it to the enclosing scope
	   */
	  else if (s != NULL && yyvsp[-4].dcval != NULL && yyvsp[-2].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[-2].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL) 
		continue;
 	      AST_Type *tp = d->compose(yyvsp[-4].dcval);
	      if (tp == NULL) 
		continue;
	      f = idl_global->gen()->create_field(tp, d->name(), p);
	      (void) s->fe_add_field(f);
	    }
	    delete l;
	  }
	;
    break;}
case 172:
#line 1254 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 173:
#line 1258 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 174:
#line 1266 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionSeen);
        ;
    break;}
case 175:
#line 1270 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionIDSeen);
        ;
    break;}
case 176:
#line 1274 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchSeen);
        ;
    break;}
case 177:
#line 1278 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchOpenParSeen);
        ;
    break;}
case 178:
#line 1282 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchTypeSeen);
        ;
    break;}
case 179:
#line 1286 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[-8].idval, NULL);
	  AST_Union		*u = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchCloseParSeen);
	  /*
	   * Create a node representing a union. Add it to its enclosing
	   * scope
	   */
	  if (yyvsp[-2].dcval != NULL && s != NULL) {
 	    AST_ConcreteType    *tp = AST_ConcreteType::narrow_from_decl(yyvsp[-2].dcval);
            if (tp == NULL) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else {
	      u = idl_global->gen()->create_union(tp, n, p);
	      (void) s->fe_add_union(u);
 	    }
	  }
	  /*
	   * Push the scope of the union on the scopes stack
	   */
	  idl_global->scopes()->push(u);
	;
    break;}
case 180:
#line 1313 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionSqSeen);
        ;
    break;}
case 181:
#line 1317 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionBodySeen);
        ;
    break;}
case 182:
#line 1321 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionQsSeen);
	  /*
	   * Done with this union. Pop its scope from the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval =
	      AST_Union::narrow_from_scope(
				idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 183:
#line 1339 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 184:
#line 1343 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 185:
#line 1347 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 186:
#line 1351 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 188:
#line 1356 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Decl		*d = NULL;
	  AST_PredefinedType	*p = NULL;
	  AST_Typedef		*t = NULL;
	  long			found = I_FALSE;

	  /*
	   * The discriminator is a scoped name. Try to resolve to
	   * one of the scalar types or to an enum. Thread through
	   * typedef's to arrive at the base type at the end of the
	   * chain
	   */
	  if (s != NULL && (d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE)) != NULL) {
	    while (!found) {
	      switch (d->node_type()) {
	      case AST_Decl::NT_enum:
		yyval.dcval = d;
		found = I_TRUE;
		break;
	      case AST_Decl::NT_pre_defined:
		p = AST_PredefinedType::narrow_from_decl(d);
		if (p != NULL) {
		  switch (p->pt()) {
		  case AST_PredefinedType::PT_long:
		  case AST_PredefinedType::PT_ulong:
		  case AST_PredefinedType::PT_longlong:
		  case AST_PredefinedType::PT_ulonglong:
		  case AST_PredefinedType::PT_short:
		  case AST_PredefinedType::PT_char:
		  case AST_PredefinedType::PT_wchar:
		  case AST_PredefinedType::PT_octet:
		  case AST_PredefinedType::PT_boolean:
		    yyval.dcval = p;
		    found = I_TRUE;
		    break;
		  default:
		    yyval.dcval = NULL;
		    found = I_TRUE;
		    break;
		  }
		}
		break;
	      case AST_Decl::NT_typedef:
		t = AST_Typedef::narrow_from_decl(d);
		if (t != NULL) d = t->base_type();
		break;
	      default:
		yyval.dcval = NULL;
		found = I_TRUE;
		break;
	      }
	    }
	  } else
	    yyval.dcval = NULL;

	  if (yyval.dcval == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	;
    break;}
case 192:
#line 1426 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionLabelSeen);
        ;
    break;}
case 193:
#line 1430 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemSeen);
        ;
    break;}
case 194:
#line 1434 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_LabellistActiveIterator *l = NULL;
	  AST_UnionLabel	*d = NULL;
	  AST_UnionBranch	*b = NULL;
	  AST_Field		*f = yyvsp[-2].ffval;

	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemCompleted);
	  /*
	   * Create several nodes representing branches of a union.
	   * Add them to the enclosing scope (the union scope)
	   */
	  if (s != NULL && yyvsp[-4].llval != NULL && yyvsp[-2].ffval != NULL) {
	    l = new UTL_LabellistActiveIterator(yyvsp[-4].llval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
	      b = idl_global->gen()->create_union_branch(d,
						      f->field_type(),
						      f->name(),
						      f->pragmas());
	      (void) s->fe_add_union_branch(b);
	    }
	    delete l;
	  }
	;
    break;}
case 195:
#line 1462 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 196:
#line 1466 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 197:
#line 1474 "idl.yy"
{
	  yyval.llval = new UTL_LabelList(yyvsp[-1].ulval, yyvsp[0].llval);
	;
    break;}
case 198:
#line 1481 "idl.yy"
{
	  if (yyvsp[-1].llval == NULL)
	    yyval.llval = new UTL_LabelList(yyvsp[0].ulval, NULL);
	  else {
	    yyvsp[-1].llval->nconc(new UTL_LabelList(yyvsp[0].ulval, NULL));
	    yyval.llval = yyvsp[-1].llval;
	  }
	;
    break;}
case 199:
#line 1490 "idl.yy"
{
	  yyval.llval = NULL;
	;
    break;}
case 200:
#line 1497 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DefaultSeen);
        ;
    break;}
case 201:
#line 1501 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelColonSeen);

	  yyval.ulval = idl_global->gen()->
	            create_union_label(AST_UnionLabel::UL_default,
				       NULL);
	;
    break;}
case 202:
#line 1509 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_CaseSeen);
        ;
    break;}
case 203:
#line 1513 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelExprSeen);
        ;
    break;}
case 204:
#line 1517 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelColonSeen);

	  yyval.ulval = idl_global->gen()->create_union_label(AST_UnionLabel::UL_label,
						     yyvsp[-2].exval);
	;
    break;}
case 205:
#line 1527 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemTypeSeen);
        ;
    break;}
case 206:
#line 1531 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemDeclSeen);
	  /*
	   * Check for illegal recursive use of type
	   */
	  if (yyvsp[-2].dcval != NULL && AST_illegal_recursive_type(yyvsp[-2].dcval))
	    idl_global->err()->error1(UTL_Error::EIDL_RECURSIVE_TYPE, yyvsp[-2].dcval);
	  /*
	   * Create a field in a union branch
	   */
	  else if (yyvsp[-2].dcval == NULL || yyvsp[0].deval == NULL)
	    yyval.ffval = NULL;
	  else {
	    AST_Type *tp = yyvsp[0].deval->compose(yyvsp[-2].dcval);
	    if (tp == NULL)
	      yyval.ffval = NULL;
 	    else
	      yyval.ffval = idl_global->gen()->create_field(tp,
			        		   yyvsp[0].deval->name(),
			        		   idl_global->pragmas());
	  }
	;
    break;}
case 207:
#line 1557 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumSeen);
        ;
    break;}
case 208:
#line 1561 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Enum		*e = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumIDSeen);
	  /*
	   * Create a node representing an enum and add it to its
	   * enclosing scope
	   */
	  if (s != NULL) {
	    e = idl_global->gen()->create_enum(n, p);
	    /*
	     * Add it to its defining scope
	     */
	    (void) s->fe_add_enum(e);
	  }
	  /*
	   * Push the enum scope on the scopes stack
	   */
	  idl_global->scopes()->push(e);
	;
    break;}
case 209:
#line 1586 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumSqSeen);
        ;
    break;}
case 210:
#line 1590 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumBodySeen);
        ;
    break;}
case 211:
#line 1594 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumQsSeen);
	  /*
	   * Done with this enum. Pop its scope from the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval = AST_Enum::narrow_from_scope(idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 213:
#line 1613 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumCommaSeen);
        ;
    break;}
case 216:
#line 1622 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	  AST_EnumVal		*e = NULL;
	  AST_Enum		*c = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  /*
	   * Create a node representing one enumerator in an enum
	   * Add it to the enclosing scope (the enum scope)
	   */
	  if (s != NULL && s->scope_node_type() == AST_Decl::NT_enum) {
	    c = AST_Enum::narrow_from_scope(s);
	    if (c != NULL) 
	      e = idl_global->gen()->create_enum_val(c->next_enum_val(), n, p);
	    (void) s->fe_add_enum_val(e);
	  }
	;
    break;}
case 217:
#line 1646 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceCommaSeen);
        ;
    break;}
case 218:
#line 1650 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceExprSeen);
        ;
    break;}
case 219:
#line 1654 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceQsSeen);
	  /*
	   * Remove sequence marker from scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    idl_global->scopes()->pop();
	  /*
	   * Create a node representing a sequence
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else if (yyvsp[-5].dcval == NULL) {
	    yyval.dcval = NULL;
	  } else {
 	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-5].dcval); 
	    if (tp == NULL) 
	      yyval.dcval = NULL;
	    else {
	      yyval.dcval = idl_global->gen()->create_sequence(yyvsp[-2].exval, tp);
	      /*
	       * Add this AST_Sequence to the types defined in the global scope
	       */
	      (void) idl_global->root()
		        ->fe_add_sequence(AST_Sequence::narrow_from_decl(yyval.dcval));
 	    }
	  }
	;
    break;}
case 220:
#line 1685 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceQsSeen);
	  /*
	   * Remove sequence marker from scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    idl_global->scopes()->pop();
	  /*
	   * Create a node representing a sequence
	   */
	  if (yyvsp[-1].dcval == NULL)
	    yyval.dcval = NULL;
	  else {
	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-1].dcval);
	    if (tp == NULL)
	      yyval.dcval = NULL;
            else {
	      yyval.dcval =
	        idl_global->gen()->create_sequence(
		  	     idl_global->gen()->create_expr((unsigned long) 0),
			     tp);
	      /*
	       * Add this AST_Sequence to the types defined in the global scope
	       */
	      (void) idl_global->root()
		        ->fe_add_sequence(AST_Sequence::narrow_from_decl(yyval.dcval));
	    }
	  }
	;
    break;}
case 221:
#line 1718 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceSeen);
	  /*
	   * Push a sequence marker on scopes stack
	   */
	  idl_global->scopes()->push(NULL);
	;
    break;}
case 222:
#line 1726 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceSqSeen);
        ;
    break;}
case 223:
#line 1730 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceTypeSeen);
	  yyval.dcval = yyvsp[0].dcval;
        ;
    break;}
case 224:
#line 1739 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSqSeen);
        ;
    break;}
case 225:
#line 1743 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_StringExprSeen);
        ;
    break;}
case 226:
#line 1747 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringQsSeen);
	  /*
	   * Create a node representing a string
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else {
	    yyval.dcval = idl_global->gen()->create_string(yyvsp[-2].exval);
	    /*
	     * Add this AST_String to the types defined in the global scope
	     */
	    (void) idl_global->root()
		      ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	  }
	;
    break;}
case 227:
#line 1765 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringCompleted);
	  /*
	   * Create a node representing a string
	   */
	  yyval.dcval =
	    idl_global->gen()->create_string(
			 idl_global->gen()->create_expr((unsigned long) 0));
	  /*
	   * Add this AST_String to the types defined in the global scope
	   */
	  (void) idl_global->root()
                    ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	;
    break;}
case 228:
#line 1783 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSeen);
        ;
    break;}
case 229:
#line 1791 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSqSeen);
        ;
    break;}
case 230:
#line 1795 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_StringExprSeen);
        ;
    break;}
case 231:
#line 1799 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringQsSeen);
	  /*
	   * Create a node representing a string
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else {
	    yyval.dcval = idl_global->gen()->create_wstring(yyvsp[-2].exval);
	    /*
	     * Add this AST_String to the types defined in the global scope
	     */
	    (void) idl_global->root()
		      ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	  }
	;
    break;}
case 232:
#line 1817 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringCompleted);
	  /*
	   * Create a node representing a string
	   */
	  yyval.dcval =
	    idl_global->gen()->create_wstring(
			 idl_global->gen()->create_expr((unsigned long) 0));
	  /*
	   * Add this AST_String to the types defined in the global scope
	   */
	  (void) idl_global->root()
                    ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	;
    break;}
case 233:
#line 1835 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSeen);
        ;
    break;}
case 234:
#line 1842 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ArrayIDSeen);
        ;
    break;}
case 235:
#line 1846 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ArrayCompleted);
	  /*
	   * Create a node representing an array
	   */
	  if (yyvsp[0].elval != NULL) {
	     yyval.dcval = idl_global->gen()->create_array(new UTL_ScopedName(yyvsp[-2].idval, NULL),
						  yyvsp[0].elval->length(), yyvsp[0].elval);
	  }
	;
    break;}
case 236:
#line 1860 "idl.yy"
{
	  yyval.elval = new UTL_ExprList(yyvsp[-1].exval, yyvsp[0].elval);
	;
    break;}
case 237:
#line 1867 "idl.yy"
{
	  if (yyvsp[-1].elval == NULL)
	    yyval.elval = new UTL_ExprList(yyvsp[0].exval, NULL);
	  else {
	    yyvsp[-1].elval->nconc(new UTL_ExprList(yyvsp[0].exval, NULL));
	    yyval.elval = yyvsp[-1].elval;
	  }
	;
    break;}
case 238:
#line 1876 "idl.yy"
{
	  yyval.elval = NULL;
	;
    break;}
case 239:
#line 1883 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimSqSeen);
        ;
    break;}
case 240:
#line 1887 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimExprSeen);
        ;
    break;}
case 241:
#line 1891 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimQsSeen);
	  /*
	   * Array dimensions are expressions which must be coerced to
	   * positive integers
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.exval = NULL;
	  } else
	    yyval.exval = yyvsp[-2].exval;
	;
    break;}
case 242:
#line 1908 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrSeen);
        ;
    break;}
case 243:
#line 1912 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrTypeSeen);
        ;
    break;}
case 244:
#line 1916 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l = NULL;
	  AST_Attribute		*a = NULL;
	  FE_Declarator		*d = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrCompleted);
	  /*
	   * Create nodes representing attributes and add them to the
	   * enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL && yyvsp[0].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[0].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
	      AST_Type *tp = d->compose(yyvsp[-2].dcval);
 	      if (tp == NULL)
	 	continue;
	      a = idl_global->gen()->create_attribute(yyvsp[-5].bval, tp, d->name(), p);
	      /*
	       * Add one attribute to the enclosing scope
	       */
	      (void) s->fe_add_attribute(a);
	    }
	    delete l;
	  }
	;
    break;}
case 245:
#line 1950 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrROSeen);
	  yyval.bval = I_TRUE;
	;
    break;}
case 246:
#line 1955 "idl.yy"
{
	  yyval.bval = I_FALSE;
	;
    break;}
case 247:
#line 1962 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptSeen);
	;
    break;}
case 248:
#line 1966 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Exception		*e = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptIDSeen);
	  /*
	   * Create a node representing an exception and add it to
	   * the enclosing scope
	   */
	  if (s != NULL) {
	    e = idl_global->gen()->create_exception(n, p);
	    (void) s->fe_add_exception(e);
	  }
	  /*
	   * Push the exception scope on the scope stack
	   */
	  idl_global->scopes()->push(e);
	;
    break;}
case 249:
#line 1988 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptSqSeen);
        ;
    break;}
case 250:
#line 1992 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptBodySeen);
        ;
    break;}
case 251:
#line 1996 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptQsSeen);
	  /*
	   * Done with this exception. Pop its scope from the scope stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 252:
#line 2008 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpTypeSeen);
        ;
    break;}
case 253:
#line 2012 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	  AST_Operation		*o = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpIDSeen);
	  /*
	   * Create a node representing an operation on an interface
	   * and add it to its enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL) {
	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-2].dcval);
            if (tp == NULL) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else if (tp->node_type() == AST_Decl::NT_except) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else {
	      o = idl_global->gen()->create_operation(tp, yyvsp[-3].ofval, n, p);
	      (void) s->fe_add_operation(o);
	    }
	  }
	  /*
	   * Push the operation scope onto the scopes stack
	   */
	  idl_global->scopes()->push(o);
	;
    break;}
case 254:
#line 2041 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParsCompleted);
        ;
    break;}
case 255:
#line 2045 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseCompleted);
        ;
    break;}
case 256:
#line 2049 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Operation		*o = NULL;

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpCompleted);
	  /*
	   * Add exceptions and context to the operation
	   */
	  if (s != NULL && s->scope_node_type() == AST_Decl::NT_op) {
	    o = AST_Operation::narrow_from_scope(s);

	    if (yyvsp[-2].nlval != NULL && o != NULL)
	      (void) o->fe_add_exceptions(yyvsp[-2].nlval);
	    if (yyvsp[0].slval != NULL)
	      (void) o->fe_add_context(yyvsp[0].slval);
	  }
	  /*
	   * Done with this operation. Pop its scope from the scopes stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 257:
#line 2074 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpAttrSeen);
	  yyval.ofval = AST_Operation::OP_oneway;
	;
    break;}
case 258:
#line 2079 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpAttrSeen);
	  yyval.ofval = AST_Operation::OP_idempotent;
	;
    break;}
case 259:
#line 2084 "idl.yy"
{
	  yyval.ofval = AST_Operation::OP_noflags;
	;
    break;}
case 261:
#line 2092 "idl.yy"
{
	  yyval.dcval =
	    idl_global->scopes()->bottom()
	       ->lookup_primitive_type(AST_Expression::EV_void);
	;
    break;}
case 262:
#line 2101 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpSqSeen);
        ;
    break;}
case 263:
#line 2105 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpQsSeen);
        ;
    break;}
case 264:
#line 2109 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpSqSeen);
        ;
    break;}
case 265:
#line 2114 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpQsSeen);
        ;
    break;}
case 266:
#line 2118 "idl.yy"
{
           idl_global->err()->syntax_error(idl_global->parse_state());
        ;
    break;}
case 268:
#line 2128 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParCommaSeen);
        ;
    break;}
case 271:
#line 2137 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParDirSeen);
        ;
    break;}
case 272:
#line 2141 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParTypeSeen);
        ;
    break;}
case 273:
#line 2145 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Argument		*a = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParDeclSeen);
	  /*
	   * Create a node representing an argument to an operation
	   * Add it to the enclosing scope (the operation scope)
	   */
	  if (yyvsp[-2].dcval != NULL && yyvsp[0].deval != NULL && s != NULL) {
	    AST_Type *tp = yyvsp[0].deval->compose(yyvsp[-2].dcval);
	    if (tp != NULL) {
	      a = idl_global->gen()->create_argument(yyvsp[-4].dival, tp, yyvsp[0].deval->name(), p);
	      (void) s->fe_add_argument(a);
	    }
	  }
	;
    break;}
case 274:
#line 2167 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_IN;
	;
    break;}
case 275:
#line 2171 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_OUT;
	;
    break;}
case 276:
#line 2175 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_INOUT;
	;
    break;}
case 277:
#line 2182 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseSeen);
        ;
    break;}
case 278:
#line 2186 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseSqSeen);
        ;
    break;}
case 279:
#line 2191 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseQsSeen);
	  yyval.nlval = yyvsp[-1].nlval;
	;
    break;}
case 280:
#line 2196 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 281:
#line 2203 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextSeen);
        ;
    break;}
case 282:
#line 2207 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextSqSeen);
        ;
    break;}
case 283:
#line 2212 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextQsSeen);
	  yyval.slval = yyvsp[-1].slval;
	;
    break;}
case 284:
#line 2217 "idl.yy"
{
	  yyval.slval = NULL;
	;
    break;}
case 285:
#line 2224 "idl.yy"
{
	  yyval.slval = new UTL_StrList(yyvsp[-1].sval, yyvsp[0].slval);
	;
    break;}
case 286:
#line 2232 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextCommaSeen);
        ;
    break;}
case 287:
#line 2236 "idl.yy"
{
	  if (yyvsp[-3].slval == NULL)
	    yyval.slval = new UTL_StrList(yyvsp[0].sval, NULL);
	  else {
	    yyvsp[-3].slval->nconc(new UTL_StrList(yyvsp[0].sval, NULL));
	    yyval.slval = yyvsp[-3].slval;
	  }
	;
    break;}
case 288:
#line 2245 "idl.yy"
{
	  yyval.slval = NULL;
	;
    break;}
case 289:
#line 2251 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_PragmaVersionSeen);
	;
    break;}
case 290:
#line 2255 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopedNameSeen);
        ;
    break;}
case 291:
#line 2259 "idl.yy"
{
          UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[-2].idlist, I_TRUE);
	  if (d == NULL) {
	    idl_global->err()->lookup_error(yyvsp[-2].idlist);
	  }
	  else {
	    d->add_pragmas(new UTL_StrList(new String("version"),
					   new UTL_StrList(new String(yytext),
							   NULL
							   )
					   )
			   );
	  }
	;
    break;}
case 292:
#line 2280 "idl.yy"
{	
	  idl_global->set_parse_state(IDL_GlobalData::PS_PragmaIDSeen);
        ;
    break;}
case 293:
#line 2284 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopedNameSeen);
        ;
    break;}
case 294:
#line 2288 "idl.yy"
{
          UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[-2].idlist, I_TRUE);
	  if (d == NULL) {
	    idl_global->err()->lookup_error(yyvsp[-2].idlist);
	  }
	  else {
	    d->add_pragmas(new UTL_StrList(new String("ID"),
					   new UTL_StrList(new String(yyvsp[0].sval),
							   NULL
							   )
					   )
			   );
	  }
	;
    break;}
case 295:
#line 2309 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_PragmaPrefixSeen);
        ;
    break;}
case 296:
#line 2313 "idl.yy"
{
	  UTL_Scope *s = idl_global->scopes()->top_non_null();
	  AST_Decl  *d = ScopeAsDecl(s);
	  d->add_pragmas(new UTL_StrList(new String("prefix"),
					 new UTL_StrList(new String(yyvsp[0].sval),
							 NULL
							 )
					 )
			 );
	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2323 "idl.yy"

/* programs */

/*
 * ???
 */
int
yywrap()
{
  return 1;
}

/*
 * Report an error situation discovered in a production
 *
 * This does not do anything since we report all error situations through
 * idl_global->err() operations
 */
void
yyerror(const char *)
{
}
#ifdef __VMS
// Some versions of DEC C++ for OpenVMS set the module name used by the
// librarian based on the last #line encountered.
#line 3584 "y_tab.cc"
#endif
