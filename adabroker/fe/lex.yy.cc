/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: //depot/adabroker/main/adabroker/fe/lex.yy.cc#1 $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
static yyconst short int yy_acclist[332] =
    {   0,
       59,   59,   63,   61,   62,   59,   61,   62,   60,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   43,   61,
       62,   41,   61,   62,   61,   62,   61,   62,   61,   62,
       38,   61,   62,   38,   61,   62,   38,   61,   62,   38,
       61,   62,   38,   61,   62,   38,   61,   62,   38,   61,
       62,   38,   61,   62,   38,   61,   62,   38,   61,   62,
       38,   61,   62,   38,   61,   62,   38,   61,   62,   38,
       61,   62,   38,   61,   62,   38,   61,   62,   38,   61,
       62,   38,   61,   62,   38,   61,   62,   59,   61,   62,
       61,   62,   59,   44,   43,   41,   58,   39,   43,   41,

       37,   35,   36,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   32,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   59,   53,   45,   45,   57,   39,
       39,   40,   42,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   33,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   47,   46,   47,   39,   40,
       38,   29,   38,   38,   38,   17,   38,   24,   38,   38,
       38,   38,   38,   11,   38,   38,   38,   38,   38,   21,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   28,   38,   38,   38,   46,   30,
       38,   38,   38,    8,   38,   38,   38,   38,   38,   19,
       38,   31,   38,   38,   38,   27,   38,   38,   38,   38,
       38,   22,   38,   38,   38,   38,   38,   15,   38,   38,
       38,   38,   52,   38,   38,   38,   38,   20,   38,   38,
       38,    1,   38,   34,   38,    2,   38,   38,   38,   12,
       38,   10,   38,   16,   38,   38,   38,   38,   38,   55,
       38,   26,   38,    6,   38,   18,   38,   38,   38,   38,
       38,    9,   38,   38,   25,   38,   38,   56,   38,   38,

       38,    3,   38,   14,   38,   23,   38,   38,    4,   38,
        5,   38,    7,   38,   13,   38,   54,   51,16433,16434,
       51,16432, 8241,   51, 8241,   51, 8242,   51, 8242, 8240,
       51
    } ;

static yyconst short int yy_accept[331] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   15,   17,
       19,   22,   25,   27,   29,   31,   34,   37,   40,   43,
       46,   49,   52,   55,   58,   61,   64,   67,   70,   73,
       76,   79,   82,   85,   88,   91,   93,   94,   94,   95,
       95,   95,   96,   97,   98,   98,   99,  100,  100,  100,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  119,  120,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  136,  136,  137,  137,
      137,  137,  137,  137,  137,  138,  138,  139,  139,  139,

      140,  141,  141,  142,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  176,  176,
      176,  176,  176,  177,  179,  179,  179,  180,  181,  182,
      184,  185,  186,  188,  190,  191,  192,  193,  194,  196,
      197,  198,  199,  200,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  217,  218,
      219,  219,  219,  219,  219,  219,  220,  220,  222,  223,
      224,  226,  227,  228,  229,  230,  232,  234,  235,  236,

      238,  239,  240,  241,  242,  244,  245,  246,  247,  248,
      250,  251,  252,  253,  253,  254,  254,  254,  254,  255,
      256,  257,  258,  260,  261,  262,  264,  266,  268,  269,
      270,  272,  274,  276,  277,  278,  279,  280,  280,  280,
      281,  281,  281,  281,  282,  284,  286,  288,  289,  290,
      291,  292,  294,  295,  297,  298,  298,  299,  299,  299,
      299,  300,  301,  302,  304,  306,  308,  309,  309,  309,
      309,  311,  313,  315,  317,  317,  318,  318,  318,  319,
      319,  319,  319,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  321,  321,  321,

      322,  322,  322,  323,  323,  323,  323,  325,  325,  325,
      325,  326,  326,  327,  327,  327,  327,  327,  327,  329,
      329,  329,  329,  330,  330,  330,  330,  330,  332,  332
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    7,    1,    1,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    1,   18,
        1,   19,    1,    1,   20,   21,   21,   22,   23,   24,
       25,   25,   26,   25,   25,   27,   25,   25,   25,   25,
       25,   28,   29,   30,   31,   25,   25,   32,   25,   25,
        1,   33,    1,    1,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   25,   25,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    1,    1,    1,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    4,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst short int yy_base[350] =
    {   0,
        0,   56,  723,  724,   57,  724,  717,  688,   49,   57,
       57,   62,  703,  701,  699,    0,  697,  688,  663,  667,
       40,   44,   38,  669,  666,  664,  663,   42,   51,   60,
      652,  662,  660,   30,  101,  114,   96,  701,  724,  697,
       96,  108,  120,  724,  701,  151,  130,  140,  166,    0,
      171,  724,  724,  724,    0,  676,  671,  649,  653,  648,
      663,  651,  656,  642,  641,  656,  645,   45,  645,  652,
      637,  649,  635,  643,  650,  635,  636,  632,  638,  632,
       63,  636,  636,  625,  135,  197,    0,  724,  671,  201,
      216,  637,  631,  623,  724,  664,  663,  111,  667,  724,

        0,  182,  724,  134,  210,    0,  640,  645,  617,  622,
      626,  614,   57,  628,  626,  616,  621,  624,  605,  618,
      615,  602,  615,  598,    0,  601,  613,  597,  599,  108,
      596,  608,  599,  602,  606,  608,  592,  636,  237,  601,
      593,  603,  724,  724,  192,  156,  232,  724,  614,    0,
      593,  596,    0,    0,  582,  594,  579,  587,    0,  582,
      577,  576,  577,    0,  582,  573,  589,  584,  575,  582,
      568,  573,  581,  580,  578,  507,  506,    0,  490,  496,
      533,  534,  490,  496,  493,  724,  525,    0,  496,  496,
        0,  474,  485,  489,  473,    0,    0,  484,  484,    0,

      465,  456,  460,  459,    0,  463,  448,  457,  459,    0,
      451,  462,  449,  489,  724,  421,  259,  427,  415,  421,
      414,  413,    0,  421,  428,    0,    0,    0,  418,  424,
        0,    0,    0,  400,  400,  386,  396,  430,  263,  724,
      266,  280,  397,  379,    0,    0,    0,  383,  392,  371,
      386,    0,  369,    0,  372,  399,  724,  353,  335,  225,
      294,  271,  273,    0,    0,    0,  259,  238,  235,  284,
        0,    0,    0,    0,  230,  724,  211,  287,  724,  199,
      185,  170,  295,  219,  186,  341,  252,  254,  375,   90,
      257,  299,  408,  237,  181,  303,  312,  315,  304,  163,

      317,  320,  324,  155,  327,  360,  724,  331,  441,  363,
      724,  334,  133,  366,  475,  122,  369,  387,  724,  420,
      508,  393,  724,  389,  455,  487,  396,  724,  724,  541,
      545,  547,  551,  555,   65,  559,  563,  567,  571,  575,
      579,  583,  587,  591,  595,  599,  603,  607,  611
    } ;

static yyconst short int yy_def[350] =
    {   0,
      329,    1,  329,  329,  329,  329,  330,  331,  329,  329,
      329,  329,  329,  329,  329,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  329,  329,  329,  330,  329,  329,
      333,  329,  329,  329,  334,  329,  329,  329,  329,  335,
      329,  329,  329,  329,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  329,  329,   36,  329,   36,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  334,  329,

       46,  329,  329,  329,  329,  335,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  336,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      336,  337,  329,  329,  329,  329,  329,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  337,  329,  329,  329,  329,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  338,  329,  329,
      329,  329,  329,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  338,  329,  339,  329,  329,
      332,  332,  332,  332,  332,  332,  332,  339,  340,  341,
      332,  332,  332,  332,  340,  329,  341,  341,  329,  341,
      341,  341,  341,  341,  341,  342,  341,  341,  343,  341,
      341,  341,  343,  341,  341,  344,  341,  341,  344,  345,

      341,  341,  341,  345,  329,  341,  329,  346,  347,  329,
      329,  346,  348,  341,  349,  348,  329,  341,  329,  341,
      349,  329,  329,  341,  341,  341,  341,  329,    0,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329
    } ;

static yyconst short int yy_nxt[782] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    8,    4,    4,
        9,    4,   10,   11,   12,   12,   13,   14,   15,   16,
       16,   16,   16,   17,   16,   16,   16,   16,   16,   18,
       16,   16,    4,    4,   19,   20,   21,   22,   23,   24,
       16,   16,   25,   26,   27,   16,   28,   16,   16,   29,
       30,   31,   32,   33,   34,   16,   16,   35,   37,   35,
       37,   36,   42,   43,   43,   44,   83,  106,   46,   45,
       47,   47,   48,   46,   60,   51,   51,   51,   71,   49,
       84,   61,   63,   65,   49,   74,   62,   72,   50,   75,
       64,  119,  279,   66,   73,   49,  120,   37,   76,   37,

       49,   77,   85,   97,   85,  133,   86,  155,  156,   98,
       98,   78,   50,  134,   79,   87,   88,   89,  144,   46,
       90,   47,   47,   48,  145,  145,  317,   91,   91,   91,
       49,   46,  294,   51,   51,   51,   85,  317,   85,   50,
       86,   46,   49,   47,   47,   48,   49,  105,  105,  105,
      172,   46,   49,   48,   48,   48,   92,   93,   49,  305,
      173,   94,   49,   50,  101,  101,  101,  305,   49,  147,
      147,  147,  279,  102,  103,  104,  104,  103,   49,  105,
      105,  105,   46,  279,   51,   51,   51,  279,  279,  102,
      103,  146,  146,   49,  103,  147,  147,  147,   90,  186,

       90,  279,   90,   90,   90,  187,  187,   90,  285,   49,
       90,   90,   90,  279,   90,   90,   90,   90,   88,  139,
      283,  279,   90,  105,  105,  105,  270,  298,  270,   91,
       91,   91,  276,  148,  284,  288,  148,  276,   90,  279,
       90,  138,  269,   90,   94,  147,  147,  147,   94,  148,
       90,   90,   90,  148,  279,  103,  279,  287,  103,  279,
      239,  240,  241,   94,  239,  240,  241,  239,  240,  241,
      258,  103,  242,  242,  242,  103,  242,  242,  242,  242,
      242,  242,  240,  259,   94,  278,  279,  278,  278,  279,
      278,  290,  297,  242,  242,  242,  286,  279,  286,  295,

      292,  279,  292,  296,  291,  300,  300,  301,  301,  280,
      274,  273,  280,  302,  279,  302,  272,  279,  306,  307,
      306,  302,  279,  302,  308,  309,  279,  309,  310,  311,
      310,  281,  271,  313,  281,  314,  313,  282,  314,  258,
      282,  277,  286,  279,  286,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  269,  277,  277,
      303,  306,  307,  306,  310,  311,  310,  318,  319,  318,
      322,  323,  322,  277,  277,  277,  292,  279,  292,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  318,  319,
      318,  279,  277,  277,  322,  323,  322,  327,  328,  327,

      325,  257,  324,  324,  324,  267,  266,  277,  277,  292,
      279,  292,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  320,  279,  320,  265,  277,  277,  264,  263,  262,
      261,  260,  257,  324,  324,  324,  255,  254,  253,  252,
      277,  277,  309,  279,  309,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  279,  277,  277,
      251,  250,  249,  248,  247,  246,  245,  244,  326,  326,
      326,  243,  238,  277,  277,  277,  320,  279,  320,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  327,  328,
      327,  215,  277,  277,  237,  236,  235,  234,  233,  232,

      326,  326,  326,  231,  230,  229,  228,  277,  277,  320,
      279,  320,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  227,  226,  225,  224,  277,  277,  223,  222,  221,
      220,  219,  186,  218,  217,  216,  215,  182,  213,  212,
      277,   38,   38,   38,   38,   40,  211,   40,   40,   55,
       55,   96,  210,   96,   96,   99,   99,   99,   99,  181,
      181,  181,  181,  214,  214,  214,  214,  256,  256,  256,
      256,  268,  268,  268,  268,  275,  275,  275,  275,  277,
      277,  277,  277,  289,  289,  289,  289,  293,  293,  293,
      293,  299,  299,  299,  299,  304,  304,  304,  304,  312,

      312,  312,  312,  315,  315,  315,  315,  316,  316,  316,
      316,  321,  321,  321,  321,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  185,  184,  183,
      182,  180,  179,  178,  177,  176,  175,  174,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  154,  153,  152,  151,  150,  149,  100,
      143,  143,  142,  141,  140,  138,  137,  136,  135,  132,
      131,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  118,  117,  116,  115,  114,  113,  112,  111,  110,

      109,  108,  107,  100,   95,   39,   82,   81,   80,   70,
       69,   68,   67,   59,   58,   57,   56,   54,   53,   52,
       41,   39,  329,    3,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329
    } ;

static yyconst short int yy_chk[782] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    5,    2,
        5,    2,    9,    9,    9,   10,   34,  335,   11,   10,
       11,   11,   11,   12,   21,   12,   12,   12,   28,   11,
       34,   21,   22,   23,   12,   29,   21,   28,   11,   29,
       22,   68,  290,   23,   28,   11,   68,   37,   30,   37,

       12,   30,   35,   41,   35,   81,   35,  113,  113,   41,
       41,   30,   11,   81,   30,   36,   36,   36,   98,   42,
       36,   42,   42,   42,   98,   98,  316,   36,   36,   36,
       42,   43,  290,   43,   43,   43,   85,  313,   85,   42,
       85,   47,   43,   47,   47,   47,   42,  104,  104,  104,
      130,   48,   47,   48,   48,   48,   36,   36,   43,  304,
      130,   36,   48,   42,   46,   46,   46,  300,   47,  146,
      146,  146,  282,   46,   46,   49,   49,   46,   48,   49,
       49,   49,   51,  295,   51,   51,   51,  281,  285,   46,
       46,  102,  102,   51,   46,  102,  102,  102,   86,  145,

       86,  280,   90,   86,   90,  145,  145,   90,  282,   51,
       86,   86,   86,  277,   90,   90,   90,   91,   91,   91,
      280,  284,   91,  105,  105,  105,  260,  295,  260,   91,
       91,   91,  275,  105,  281,  285,  105,  269,  139,  294,
      139,  139,  268,  139,   86,  147,  147,  147,   90,  105,
      139,  139,  139,  105,  287,  147,  288,  284,  147,  291,
      217,  217,  217,   91,  239,  239,  239,  241,  241,  241,
      241,  147,  217,  217,  217,  147,  239,  239,  239,  241,
      241,  241,  242,  242,  139,  270,  270,  270,  278,  278,
      278,  287,  294,  242,  242,  242,  283,  283,  283,  291,

      292,  292,  292,  292,  288,  296,  299,  296,  299,  270,
      267,  263,  278,  297,  297,  297,  262,  298,  301,  301,
      301,  302,  302,  302,  302,  303,  303,  303,  305,  305,
      305,  270,  261,  308,  278,  308,  312,  270,  312,  259,
      278,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  258,  286,  286,
      298,  306,  306,  306,  310,  310,  310,  314,  314,  314,
      317,  317,  317,  286,  286,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  318,  318,
      318,  324,  289,  289,  322,  322,  322,  327,  327,  327,

      324,  256,  324,  324,  324,  255,  253,  289,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  320,  320,  320,  251,  293,  293,  250,  249,  248,
      244,  243,  238,  320,  320,  320,  237,  236,  235,  234,
      293,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  325,  309,  309,
      230,  229,  225,  224,  222,  221,  220,  219,  325,  325,
      325,  218,  216,  309,  309,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  326,  326,
      326,  214,  315,  315,  213,  212,  211,  209,  208,  207,

      326,  326,  326,  206,  204,  203,  202,  315,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  201,  199,  198,  195,  321,  321,  194,  193,  192,
      190,  189,  187,  185,  184,  183,  182,  181,  180,  179,
      321,  330,  330,  330,  330,  331,  177,  331,  331,  332,
      332,  333,  176,  333,  333,  334,  334,  334,  334,  336,
      336,  336,  336,  337,  337,  337,  337,  338,  338,  338,
      338,  339,  339,  339,  339,  340,  340,  340,  340,  341,
      341,  341,  341,  342,  342,  342,  342,  343,  343,  343,
      343,  344,  344,  344,  344,  345,  345,  345,  345,  346,

      346,  346,  346,  347,  347,  347,  347,  348,  348,  348,
      348,  349,  349,  349,  349,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  163,  162,  161,  160,
      158,  157,  156,  155,  152,  151,  149,  142,  141,  140,
      138,  137,  136,  135,  134,  133,  132,  131,  129,  128,
      127,  126,  124,  123,  122,  121,  120,  119,  118,  117,
      116,  115,  114,  112,  111,  110,  109,  108,  107,   99,
       97,   96,   94,   93,   92,   89,   84,   83,   82,   80,
       79,   78,   77,   76,   75,   74,   73,   72,   71,   70,
       69,   67,   66,   65,   64,   63,   62,   61,   60,   59,

       58,   57,   56,   45,   40,   38,   33,   32,   31,   27,
       26,   25,   24,   20,   19,   18,   17,   15,   14,   13,
        8,    7,    3,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "idl.ll"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 4 "idl.ll"
/*

COPYRIGHT

Copyright 1992, 1993, 1994 Sun Microsystems, Inc.  Printed in the United
States of America.  All Rights Reserved.

This product is protected by copyright and distributed under the following
license restricting its use.

The Interface Definition Language Compiler Front End (CFE) is made
available for your use provided that you include this license and copyright
notice on all media and documentation and the software program in which
this product is incorporated in whole or part. You may copy and extend
functionality (but may not remove functionality) of the Interface
Definition Language CFE without charge, but you are not authorized to
license or distribute it to anyone else except as part of a product or
program developed by you or with the express written consent of Sun
Microsystems, Inc. ("Sun").

The names of Sun Microsystems, Inc. and any of its subsidiaries or
affiliates may not be used in advertising or publicity pertaining to
distribution of Interface Definition Language CFE as permitted herein.

This license is effective until terminated by Sun for failure to comply
with this license.  Upon termination, you shall destroy or return all code
and documentation for the Interface Definition Language CFE.

INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED AS IS WITH NO WARRANTIES OF
ANY KIND INCLUDING THE WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS
FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR ARISING FROM A COURSE OF
DEALING, USAGE OR TRADE PRACTICE.

INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED WITH NO SUPPORT AND WITHOUT
ANY OBLIGATION ON THE PART OF Sun OR ANY OF ITS SUBSIDIARIES OR AFFILIATES
TO ASSIST IN ITS USE, CORRECTION, MODIFICATION OR ENHANCEMENT.

SUN OR ANY OF ITS SUBSIDIARIES OR AFFILIATES SHALL HAVE NO LIABILITY WITH
RESPECT TO THE INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY
INTERFACE DEFINITION LANGUAGE CFE OR ANY PART THEREOF.

IN NO EVENT WILL SUN OR ANY OF ITS SUBSIDIARIES OR AFFILIATES BE LIABLE FOR
ANY LOST REVENUE OR PROFITS OR OTHER SPECIAL, INDIRECT AND CONSEQUENTIAL
DAMAGES, EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Use, duplication, or disclosure by the government is subject to
restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
Technical Data and Computer Software clause at DFARS 252.227-7013 and FAR
52.227-19.

Sun, Sun Microsystems and the Sun logo are trademarks or registered
trademarks of Sun Microsystems, Inc.

SunSoft, Inc.  
2550 Garcia Avenue 
Mountain View, California  94043

NOTE:

SunOS, SunSoft, Sun, Solaris, Sun Microsystems or the Sun logo are
trademarks or registered trademarks of Sun Microsystems, Inc.

 */

/*
 * idl.ll - Lexical scanner for IDL 1.1
 */

#include <idl.hh>
#include <idl_extern.hh>

#include <fe_private.hh>

#if defined(__VMS)
#include "y_tab.h"
#else
#include "y.tab.h"
#endif

#include <string.h>

static char	idl_escape_reader(char *);
static double	idl_atof(char *);
static long	idl_atoi(char *, long);
static void	idl_parse_line_and_file(char *);
static void	idl_parse_line_and_file_NT(char *);
static void	idl_store_pragma(char *);

#line 791 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 94 "idl.ll"


#line 948 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 330 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 329 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 96 "idl.ll"
return MODULE;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 97 "idl.ll"
return RAISES;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "idl.ll"
return READONLY;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "idl.ll"
return ATTRIBUTE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "idl.ll"
return EXCEPTION;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 101 "idl.ll"
return CONTEXT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 102 "idl.ll"
return INTERFACE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "idl.ll"
return CONST;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "idl.ll"
return TYPEDEF;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "idl.ll"
return STRUCT;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "idl.ll"
return ENUM;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 107 "idl.ll"
return STRING;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "idl.ll"
return WSTRING;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "idl.ll"
return SEQUENCE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "idl.ll"
return UNION;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "idl.ll"
return SWITCH;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 112 "idl.ll"
return CASE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 113 "idl.ll"
return DEFAULT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 114 "idl.ll"
return FLOAT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "idl.ll"
return DOUBLE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "idl.ll"
return LONG;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "idl.ll"
return SHORT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 118 "idl.ll"
return UNSIGNED;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 119 "idl.ll"
return CHAR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 120 "idl.ll"
return WCHAR;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 121 "idl.ll"
return BOOLEAN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 122 "idl.ll"
return OCTET;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "idl.ll"
return VOID;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 125 "idl.ll"
return TRUETOK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 126 "idl.ll"
return FALSETOK;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 128 "idl.ll"
return INOUT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 129 "idl.ll"
return IN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 130 "idl.ll"
return OUT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 131 "idl.ll"
return ONEWAY;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "idl.ll"
return LEFT_SHIFT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "idl.ll"
return RIGHT_SHIFT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "idl.ll"
{
		  yylval.strval = "::";    
		  return SCOPE_DELIMITOR;
		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 140 "idl.ll"
{
    char *z = (char *) malloc(strlen(yytext) + 1);
    strcpy(z, yytext);
    yylval.strval = z;
    return IDENTIFIER;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 147 "idl.ll"
{
                  yylval.dval = idl_atof(yytext);
                  return FLOATING_PT_LITERAL;
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "idl.ll"
{
                  yylval.dval = idl_atof(yytext);
                  return FLOATING_PT_LITERAL;
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 156 "idl.ll"
{
		  yylval.ival = idl_atoi(yytext, 10);
		  return INTEGER_LITERAL;
	        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 160 "idl.ll"
{
		  yylval.ival = idl_atoi(yytext, 16);
		  return INTEGER_LITERAL;
	        }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 164 "idl.ll"
{
		  yylval.ival = idl_atoi(yytext, 8);
		  return INTEGER_LITERAL;
	      	}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 169 "idl.ll"
{
		  yytext[strlen(yytext)-1] = '\0';
		  yylval.sval = new String(yytext + 1);
		  return STRING_LITERAL;
	      	}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 174 "idl.ll"
{
		  yylval.cval = yytext[1];
		  return CHARACTER_LITERAL;
	      	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 178 "idl.ll"
{
		  // octal character constant
		  yylval.cval = idl_escape_reader(yytext + 1);
		  return CHARACTER_LITERAL;
		}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "idl.ll"
{
		  yylval.cval = idl_escape_reader(yytext + 1);
		  return CHARACTER_LITERAL;
		}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 188 "idl.ll"
{
                   return PRAGMA_VERSION;
                 }               
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "idl.ll"
{
                    return PRAGMA_ID;
		 }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 196 "idl.ll"
{
                     return PRAGMA_PREFIX;
                 }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "idl.ll"
{/* remember pragma */
		  idl_store_pragma(yytext);
		}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 203 "idl.ll"
{
		  idl_parse_line_and_file(yytext);
		}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 206 "idl.ll"
{
		  idl_parse_line_and_file(yytext);
	        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 209 "idl.ll"
{
		  idl_parse_line_and_file_NT(yytext);
		}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 212 "idl.ll"
{
		  idl_parse_line_and_file_NT(yytext);
	        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 215 "idl.ll"
{
		  /* ignore cpp ident */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 219 "idl.ll"
{
		  /* ignore comments */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 223 "idl.ll"
{
		  for(;;) {
		    char c = yyinput();
		    if (c == '*') {
		      char next = yyinput();
		      if (next == '/')
			break;
		      else
			/* yyunput(c); */
			unput(c);
	              if (c == '\n') 
		        idl_global->set_lineno(idl_global->lineno() + 1);
		    }
	          }
	        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 238 "idl.ll"
;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 239 "idl.ll"
{
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 242 "idl.ll"
return yytext[0];
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 244 "idl.ll"
ECHO;
	YY_BREAK
#line 1438 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 330 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 330 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 329);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 244 "idl.ll"

	/* subroutines */

/*
 * Strip down a name to the last component, i.e. everything after the last
 * '/' character
 */
static char *
stripped_name(UTL_String *fn)
{
    char	*n = fn->get_string();
    long	l;

    if (n == NULL)
	return NULL;
    l = strlen(n);
#if defined(__WIN32__)
    for (n += l; l > 0 && *n != 92; l--, n--);
    if (*n == 92) n++;
#elif defined(__VMS)

    for (n += l; l > 0 && *n != ';'; l--, n--);
    if (*n == ';') {
        static UTL_String temp;
        temp = UTL_String(fn);
        n = temp.get_string();
        n[l] = 0;
    }

    for (n += l; l > 0 && *n != ']' && *n != ':'; l--, n--);
    if (*n == ']' || *n==':') n++;

#else
    for (n += l; l > 0 && *n != '/'; l--, n--);
    if (*n == '/') n++;
#endif
	
    return n;
}

/*
 * Parse a #line statement generated by the C preprocessor
 */
static void
idl_parse_line_and_file(char *buf)
{
  char		*r = buf;
  char 		*h;
  UTL_String	*nm;

  /* Skip initial '#' */
  if (*r != '#') {
    return;
  }

  /* Find line number */
  for (r++; *r == ' ' || *r == '\t'; r++);
  h = r;
  for (; *r != '\0' && *r != ' ' && *r != '\t'; r++);
  if (*r != '\0') {
     *r++ = 0;
  }
  idl_global->set_lineno(idl_atoi(h, 10));

  if (*r == '\0') {
    return;
  }
  
  /* Find file name, if present */
  for (; *r != '"'; r++) {
    if (*r == '\n' || *r == '\0')
      return;
  }
  h = ++r;
  for (; *r != '"'; r++);
  *r = 0;
  if (*h == '\0')
    idl_global->set_filename(new String("standard input"));
  else {
#ifdef __VMS
    // kill version
    char* v(r);
    for(--v; v != h && *v != ';'; --v);
    if (*v==';') *v = 0;
    else v = r;
    // kill device/directory:
    for(r=v; r != h && *r != ']' && *r != ':'; --r) {
        if(isalpha(*r)) *r = tolower(*r);
    }
    if (*r==']' || *r==':') h = r+1;
#endif
    idl_global->set_filename(new String(h));
  }

  idl_global->set_in_main_file(
    (idl_global->filename()->compare(idl_global->real_filename())) ?
    I_TRUE :
    I_FALSE
  );
  /*
   * If it's an import file store the stripped name for the BE to use
   */
  if (!(idl_global->in_main_file()) && idl_global->import()) {
    nm = new UTL_String(stripped_name(idl_global->filename()));
    idl_global->store_include_file_name(nm);
  }
}


/*
 * Parse a #line statement generated by the C preprocessor
 * - NT version.
 */
static void
idl_parse_line_and_file_NT(char *buf)
{
  char		*r = buf;
  char 		*h;
  char 		*j;
  int count=0,jcount=0;
  UTL_String	*nm;

  /* Skip initial '#' */
  if (*r != '#') {
    return;
  }

  /* Find line number */

  /* Skip whitespace: */
  for (r++; *r == ' ' || *r == '\t'; r++);

  /* Skip "line": */
  r+=4;
	
  /* Skip whitespace: */
  for (r++; *r == ' ' || *r == '\t'; r++);

  h = r;
  for (; *r != '\0' && *r != ' ' && *r != '\t'; r++);
  if (*r != '\0') {
    *r++ = 0;
  }
  idl_global->set_lineno(idl_atoi(h, 10));

  if (*r == '\0') {
     return;
  }
  
  
  /* Find file name, if present */
  for (; *r != '"'; r++) {
    if (*r == '\n' || *r == '\0')
      return;
  }
  h = ++r;
  for (; *r != '"'; r++);
  *r = 0;

  if (*h == '\0')
    idl_global->set_filename(new String("standard input"));
  else
    {
#ifdef __VMS
      // kill version
      char* v(r);
      for(--v; v != h && *v != ';'; --v);
      if (*v==';') *v = 0;
      else v = r;
      // kill device/directory:
      for(r=v; r != h && *r != ']' && *r != ':'; --r) {
	if(isalpha(*r)) *r = tolower(*r);
      }
      if (*r==']' || *r==':') h = r+1;
      idl_global->set_filename(new String(h));
#else
      /* Get around the NT include problem: */
      
      j = new char[strlen(h)+1];
      
      int nflag = 0;
      for (count = 0; count < strlen(h); count++)
	{
	  if (h[count] == 92 && h[count+1] == 92 && nflag == 0) 
	    {
	      nflag = 1;
	      continue;
	    }
	  nflag = 0;
	  j[jcount] = h[count];
	  jcount++;
	}
      j[jcount] = 0;	
      idl_global->set_filename(new String(j));
      delete[] j;
#endif	
    }

  idl_global->set_in_main_file(
    (idl_global->filename()->compare(idl_global->real_filename())) ?
    I_TRUE :
    I_FALSE
  );
  /*
   * If it's an import file store the stripped name for the BE to use
   */
  if (!(idl_global->in_main_file()) && idl_global->import()) {
    nm = new UTL_String(stripped_name(idl_global->filename()));
    idl_global->store_include_file_name(nm);
  }
}

    
/*
 * Store a #pragma line into the list of pragmas
 */
static void
idl_store_pragma(char *buf)
{
  char *cp = buf + 1;
  while(*cp != 'p')
    cp++;
  while(*cp != ' ' && *cp != '\t')
    cp++;
  while(*cp == ' ' || *cp == '\t')
    cp++;

  char *pp = cp;
  while (*pp != '\n') pp++;
  char* pragma = new char[pp-cp+1];
  pp = pragma;
  while(*cp != '\n') {
    *pp++ = *cp++;
  }
  *pp = 0;
  pp = strchr(pragma,' ');
  if (!pp) pp = strchr(pragma,'\t');
  if (strncmp(pragma,"version",7) == 0) {
    if (!pp || pp == pragma + 7) {
      idl_global->set_parse_state(IDL_GlobalData::PS_PragmaVersionSeen);
      idl_global->err()->syntax_error(idl_global->parse_state());
      idl_global->set_lineno(idl_global->lineno() + 1);
      return;
    }
  }
  else if (strncmp(pragma,"ID",2) == 0) {
    if (!pp || pp == pragma + 2) {
      idl_global->set_parse_state(IDL_GlobalData::PS_PragmaIDSeen);
      idl_global->err()->syntax_error(idl_global->parse_state());
      idl_global->set_lineno(idl_global->lineno() + 1);
      return;
    }
  }
  else if (strncmp(pragma,"prefix",6) == 0) {
    if (!pp || pp == pragma + 6) {
      idl_global->set_parse_state(IDL_GlobalData::PS_PragmaPrefixSeen);
      idl_global->err()->syntax_error(idl_global->parse_state());
      idl_global->set_lineno(idl_global->lineno() + 1);
      return;
    }
  }
  else if (strcmp(pragma, "import") == 0) {
    idl_global->set_import(I_TRUE);
    return;
  } 
  else if (strcmp(pragma, "include") == 0) {
    idl_global->set_import(I_FALSE);
    return;
  }

  UTL_StrList *p = idl_global->pragmas();
  if (p == NULL)
    idl_global->set_pragmas(new UTL_StrList(new String(""),
	 	                            new UTL_StrList(new String(buf), 
                                                           NULL
                                                           )
                                            )
                            );
  else {
    p->nconc(new UTL_StrList(new String(""),
                             new UTL_StrList(new String(buf), 
                                             NULL
                                            )
	                    )
             );
    idl_global->set_pragmas(p);
  }
  idl_global->set_lineno(idl_global->lineno() + 1);
}

/*
 * idl_atoi - Convert a string of digits into an integer according to base b
 */
static long
idl_atoi(char *s, long b)
{
	long	r = 0;
	long	negative = 0;

	if (*s == '-') {
	  negative = 1;
	  s++;
	}
	if (b == 8 && *s == '0')
	  s++;
	else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
	  s += 2;

	for (; *s; s++)
	  if (*s <= '9' && *s >= '0')
	    r = (r * b) + (*s - '0');
	  else if (b > 10 && *s <= 'f' && *s >= 'a')
	    r = (r * b) + (*s - 'a' + 10);
	  else if (b > 10 && *s <= 'F' && *s >= 'A')
	    r = (r * b) + (*s - 'A' + 10);
	  else
	    break;

	if (negative)
	  r *= -1;

	return r;
}

/*
 * Convert a string to a float; atof doesn't seem to work, always.
 */
static double
idl_atof(char *s)
{
	char    *h = s;
	double	d = 0.0;
	double	f = 0.0;
	double	e, k;
	long	neg = 0, negexp = 0;

	if (*s == '-') {
	  neg = 1;
	  s++;
	}
	while (*s >= '0' && *s <= '9') {
		d = (d * 10) + *s - '0';
		s++;
	}
	if (*s == '.') {
		s++;
		e = 10;
		while (*s >= '0' && *s <= '9') {
			d += (*s - '0') / (e * 1.0);
			e *= 10;
			s++;
		}
	}
	if (*s == 'e' || *s == 'E') {
		s++;
		if (*s == '-') {
			negexp = 1;
			s++;
		} else if (*s == '+')
			s++;
		e = 0;
		while (*s >= '0' && *s <= '9') {
			e = (e * 10) + *s - '0';
			s++;
		}
		if (e > 0) {
			for (k = 1; e > 0; k *= 10, e--);
			if (negexp)
				d /= k;
			else
				d *= k;
		}
	}

	if (neg) d *= -1.0;

	return d;
}	

/*
 * Convert (some) escaped characters into their ascii values
 */
static char
idl_escape_reader(
    char *str
)
{
    if (str[0] != '\\') {
	return str[0];
    }

    switch (str[1]) {
      case 'n':
	return '\n';
      case 't':
	return '\t';
      case 'v':
	return '\v';
      case 'b':
	return '\b';
      case 'r':
	return '\r';
      case 'f':
	return '\f';
      case 'a':
	return '\a';
      case '\\':
	return '\\';
      case '\?':
	return '?';
      case '\'':
	return '\'';
      case '"':
	return '"';
      case 'x':
	{
	    // hex value
            int i;
	    for (i = 2; str[i] != '\0' && isxdigit(str[i]); i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoi(&str[2], 16);
	    str[i] = save;
	    return out;
	}
	break;
      default:
	// check for octal value
	if (str[1] >= '0' && str[1] <= '7') {
            int i;
	    for (i = 1; str[i] >= '0' && str[i] <= '7'; i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoi(&str[1], 8);
	    str[i] = save;
	    return out;
	} else {
	  return str[1] - 'a';
	}
	break;
    }
}
#ifdef __VMS
// Some versions of DEC C++ for OpenVMS set the module name used by the
// librarian based on the last #line encountered.
#line 2768 "lex_yy.cc"
#endif
