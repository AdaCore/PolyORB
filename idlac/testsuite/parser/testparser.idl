/***  Outside any rule  ***/
module module1 {
  valuetype valuetype1;
  interface interface1;
};


/***  Test of rule 2 ***/

Error
abstract Error
module mymodule {}

/***  Test of rule 3 ***/

module
module toto
module toto {};
module toto {};

/***  Test of rule 4 through 7 ***/ 

/* Test of rule Interface1 & 2 &3 */
interface
interface tata;
interface tata;
interface tata
interface tata{};
interface tutu{};
interface tata;
interface titi{}
abstract interface to;
interface to{};
abstract interface tu{};

/***  Test of rule 13 through 26 ***/

/* Test of rule Value2 */
custom
custom valuetype

/* Test of rule Value3 */
abstract
abstract valuetype
abstract valuetype toto

/* Test of rule Value4 */
valuetype
valuetype toto

/* Test of rule Value5 & Value6 */
valuetype toto {};
//valuetype titi supports toto

/* Test of rule Value7 */
valuetype toto;
valuetype forward_value;
valuetype forward_value;

/* Test of rule Value8 */
valuetype forward_value long;
valuetype toto long;
valuetype rightboxedvalue long;
valuetype FooSeq sequence <FooSeq>;

/* Test of rule 19 */
/* test errors */
abstract valuetype value1 {};
abstract valuetype value2 : truncatable value1 {};
custom valuetype value3 : truncatable value1 {};
valuetype value4 {};
abstract valuetype value5 : value4 {};
valuetype value6 : truncatable value1 {};
valuetype value7;
valuetype value8 : value7 {};
valuetype value9 long;
valuetype value10 : value9 {};
interface valueinterface1 {};
valuetype value11 : valueinterface1 {};
valuetype value12 : {};
valuetype value13 : value1, value1 {};
valuetype value14 : value4, value4 {};
valuetype value15 : value4, value7 {};
valuetype value16 : value4, value9 {};
valuetype value17 : value4, valueinterface1 {};
valuetype value18 : value4, {};
interface valueinterface2;
valuetype value19 supports valueinterface2 {};
valuetype value20 supports value4 {};
valuetype value21 supports {};
interface valueinterface3 {};
valuetype value22 supports valueinterface1, valueinterface3 {};
valuetype value23 supports valueinterface1, valueinterface2 {};
valuetype value24 supports valueinterface1, value4 {};
valuetype value25 supports valueinterface1, {};
valuetype value26 : value1, value1 Error {};
/* test ok */
valuetype value30 : value4 {};
abstract valuetype value31 {};
valuetype value32 : value4, value1 {};
valuetype value33 : value4, value1, value 31 {};
valuetype value34 : truncatable value4 {};
valuetype value35 : truncatable value4, value1 {};
valuetype value36 : truncatable value4, value1, value 31 {};
abstract valuetype value37 : value1 {};
abstract valuetype value38 : value1, value 31 {};
abstract interface valueinterface4 {};
abstract interface valueinterface5 {};
valuetype value39 supports valueinterface1 {};
valuetype value40 supports valueinterface1, valueinterface4 {};
valuetype value41 supports valueinterface1, valueinterface4, valueinterface5 {};
abstract valuetype value42 supports valueinterface1, valueinterface3 {};
abstract valuetype value43 supports valueinterface1, valueinterface3, valueinterface4 {};
abstract valuetype value44 supports valueinterface1, valueinterface3, valueinterface4, valueinterface5 {};

/* Test of rule 21 */
valuetype value45 { Error };

/* Test of rule 22 */
valuetype value45 { 
  private long[5]
};

/* Test of rule 23 */
valuetype value46 {
  factory 
  factory factory1 ();
  factory factory1 ();
  factory factory2
  factory factory3 (;
  factory factory4 ()
};

/* Test of rule 25 */
valuetype value47 {
  factory factory1 (out long l);
  factory factory2 (long l);
  factory factory3 (Error);
  factory factory4 (out long l, out l ll);
};

/* Test of rule 44 */
valuetype value48 {
  private Error;
};

/* Test of Rule 45 */
typedef sequence <Error>;

/* Test of rule 50 */
union union1 switch (boolean) {
  case true : long ;
  default : short short1;
};

/* Test of rule 51 */
valuetype value49 {
  factory factory1 (in long);
  factory factory1 (in long l, in short l);
};

/* Test of rule 59 */
unsigned Error;

/* Test of rule 69 */
struct { long i;};
struct struct1 { long i; };
struct struct1 { long i; };
struct struct3 { long struct1; };
struct struct3 {;
struct struct4 { long struct4; };

/* Test of rule 70 */
struct struct5 {};

/* Test of rule 71 */
struct struct6 { long i };

/* Test of rule 72 */
union;
union union1 switch (boolean) { case true : long i; };
union union1 switch (boolean) { case true : long i; };
union union2;
union union3 switch;
union union4 switch (boolean {};
union union5 switch (boolean);
union union6 switch (boolean) { case true : long i; ;

/* Test of rule 73 */
union union7 switch (error) { case true : long i; };

/* Test of rule 74 */
union union8 switch (boolean) { };
union union9 switch (boolean) {
    default : long i;
    default : short j;
};